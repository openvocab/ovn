{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A vocabulary for the distributed economic networks of the next economy Valueflows (VF) is a set of common vocabularies to describe flows of economic resources of all kinds within distributed economic ecosystems. Purpose: to enable internetworking among many different software projects for resource planning and accounting within fractal networks of people and groups. The vocabulary will work for any kind of economic activity, but the focus is to facilitate groups experimenting with solidarity / cooperative / collaborative / small business ecosystem / commons based peer production / any transitional economies. Or, with less buzzwords, \"let's help a lot of alternative economic software projects that are solving different pieces of the same puzzle be able to work together\". One of the purposes of this vocab is to support resource flows connecting many software applications. These flows may be oriented around processes that make things, exchanges that trade things, or combinations of both. The vocabulary is presented in several ways, as Linked Open Data using the Resource Description Framework (RDF) family of languages, as well as a GraphQL reference and a UML model. We want to support RDF based and non-RDF based uses of the vocabulary, basically any way that people want to use software and data on the internet to help create economic networks. If this document seems too much to start with, or you just want a quicker overview, you can start here with a Valueflows Story about apple pie (yum!). You can find us here on gitlab , also mirrored on github . Or come on over and say hello, ask questions, or request gitlab permissions in the Welcome Chat . This vocabulary and documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Home"},{"location":"#a-vocabulary-for-the-distributed-economic-networks-of-the-next-economy","text":"Valueflows (VF) is a set of common vocabularies to describe flows of economic resources of all kinds within distributed economic ecosystems. Purpose: to enable internetworking among many different software projects for resource planning and accounting within fractal networks of people and groups. The vocabulary will work for any kind of economic activity, but the focus is to facilitate groups experimenting with solidarity / cooperative / collaborative / small business ecosystem / commons based peer production / any transitional economies. Or, with less buzzwords, \"let's help a lot of alternative economic software projects that are solving different pieces of the same puzzle be able to work together\". One of the purposes of this vocab is to support resource flows connecting many software applications. These flows may be oriented around processes that make things, exchanges that trade things, or combinations of both. The vocabulary is presented in several ways, as Linked Open Data using the Resource Description Framework (RDF) family of languages, as well as a GraphQL reference and a UML model. We want to support RDF based and non-RDF based uses of the vocabulary, basically any way that people want to use software and data on the internet to help create economic networks. If this document seems too much to start with, or you just want a quicker overview, you can start here with a Valueflows Story about apple pie (yum!). You can find us here on gitlab , also mirrored on github . Or come on over and say hello, ask questions, or request gitlab permissions in the Welcome Chat . This vocabulary and documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"A vocabulary for the distributed economic networks of the next economy"},{"location":"algorithms/cashflows/","text":"Cash Flows This algorithm is called Cash Flows because that is the most-used small business monitoring tool, but it could also refer to monitoring the inflows and outflows of any critical resource, for example, water. Cash inflows and outflows are plotted on a timeline, sometimes weekly, sometimes quarterly, totalled as a positive or negative number for each period, and then summarized into a running cumulative cash flow. Here's an article about cash flows for farming . And a sample report from that article: Cash flows could be budgeted (future estimated cash flows), or actual past cash flows, often compared to the estimates.","title":"Cash Flows"},{"location":"algorithms/cashflows/#cash-flows","text":"This algorithm is called Cash Flows because that is the most-used small business monitoring tool, but it could also refer to monitoring the inflows and outflows of any critical resource, for example, water. Cash inflows and outflows are plotted on a timeline, sometimes weekly, sometimes quarterly, totalled as a positive or negative number for each period, and then summarized into a running cumulative cash flow. Here's an article about cash flows for farming . And a sample report from that article: Cash flows could be budgeted (future estimated cash flows), or actual past cash flows, often compared to the estimates.","title":"Cash Flows"},{"location":"algorithms/critical-path/","text":"Critical Path Excerpted from the Critical Path Method (CPM) Wikipedia page. The essential technique for using CPM is to construct a model of the project that includes the following: A list of all activities [in Value Flows, those would be Processes] required to complete the project (typically categorized within a work breakdown structure) [this could come from the Dependent Demand explosion], The time (duration) that each activity will take to complete, The dependencies between the activities and, Logical end points such as milestones or deliverable items. Using these values, CPM calculates the longest path of planned activities to logical end points or to the end of the project, and the earliest and latest that each activity can start and finish without making the project longer. This process determines which activities are \"critical\" (i.e., on the longest path) and which have \"total float\" (i.e., can be delayed without making the project longer). In project management, a critical path is the sequence of project network activities which add up to the longest overall duration, regardless if that longest duration has float or not. This determines the shortest time possible to complete the project. How to use CPM: prioritize all of the processes on the critical path. Delaying any of them will delay the whole project. Delaying some other process beyond its \"float\" might put that process on the critical path.","title":"Critical Path"},{"location":"algorithms/critical-path/#critical-path","text":"Excerpted from the Critical Path Method (CPM) Wikipedia page. The essential technique for using CPM is to construct a model of the project that includes the following: A list of all activities [in Value Flows, those would be Processes] required to complete the project (typically categorized within a work breakdown structure) [this could come from the Dependent Demand explosion], The time (duration) that each activity will take to complete, The dependencies between the activities and, Logical end points such as milestones or deliverable items. Using these values, CPM calculates the longest path of planned activities to logical end points or to the end of the project, and the earliest and latest that each activity can start and finish without making the project longer. This process determines which activities are \"critical\" (i.e., on the longest path) and which have \"total float\" (i.e., can be delayed without making the project longer). In project management, a critical path is the sequence of project network activities which add up to the longest overall duration, regardless if that longest duration has float or not. This determines the shortest time possible to complete the project. How to use CPM: prioritize all of the processes on the critical path. Delaying any of them will delay the whole project. Delaying some other process beyond its \"float\" might put that process on the critical path.","title":"Critical Path"},{"location":"algorithms/dependent-demand/","text":"Dependent Demand Dependent demand is one popular planning and scheduling algorithm for economic networks. It is used in Material Requirements Planning (MRP), for example. The algorithm traverses recipes to create schedules for economic processes. Here is a long description of Dependent Demand . Below is a short version. Basically, you traverse a graph of Recipe Processes backwards from the last Recipe Output, connecting Recipe Inputs with Recipe Outputs that have matching Resource Categories, and backscheduling all the processes and resource requirements based on estimated process durations. See Graph search algorithms . This description refers to this diagram: Take each request for quantities of Recipe Resource as a demand and start the traversal. Start: First check for onhand and available Economic Resources, or previously scheduled output Intents, that are not yet allocated to any demand. Allocate any that you find to the highest priority demand (where highest priority usually means earliest delivery date). (Those are soft allocations, known only in the computer system.) For demands that find no or insufficient available inventory or output Intents, look for a Recipe Process that can create some. If you can't find a Recipe Process, suggest a purchase. (Note: a Recipe is not really a thing, it's just a graph - although in a future release it will be a thing. A requested Recipe Resource may have one or more Recipe Processes that can create some Resources of that specification. Each of those Recipe Processes may have Recipe Flow inputs that specify some other Recipe Resources, and each of those Recipe Resources may have Recipe Processes that can create them, and so on, recursively, until you can't find any more creation Recipe Processes. If you find more than one creation Recipe Processes, you will need some way to select one.) When you find a Recipe Process, then schedule a planned Process based on the Recipe Process, with an output Intent of the required quantity of the demanded Recipe Resource. Backschedule so that the end of the process meets the timing requirements of the inputs to the processes that will be waiting for them. Then schedule input Intents for each of the recipe inputs of that Recipe Process, with their quantities scaled to the quantity of the planned output. Then start over from the Start with each of those new input Intents as the demand.","title":"Dependent Demand"},{"location":"algorithms/dependent-demand/#dependent-demand","text":"Dependent demand is one popular planning and scheduling algorithm for economic networks. It is used in Material Requirements Planning (MRP), for example. The algorithm traverses recipes to create schedules for economic processes. Here is a long description of Dependent Demand . Below is a short version. Basically, you traverse a graph of Recipe Processes backwards from the last Recipe Output, connecting Recipe Inputs with Recipe Outputs that have matching Resource Categories, and backscheduling all the processes and resource requirements based on estimated process durations. See Graph search algorithms . This description refers to this diagram: Take each request for quantities of Recipe Resource as a demand and start the traversal. Start: First check for onhand and available Economic Resources, or previously scheduled output Intents, that are not yet allocated to any demand. Allocate any that you find to the highest priority demand (where highest priority usually means earliest delivery date). (Those are soft allocations, known only in the computer system.) For demands that find no or insufficient available inventory or output Intents, look for a Recipe Process that can create some. If you can't find a Recipe Process, suggest a purchase. (Note: a Recipe is not really a thing, it's just a graph - although in a future release it will be a thing. A requested Recipe Resource may have one or more Recipe Processes that can create some Resources of that specification. Each of those Recipe Processes may have Recipe Flow inputs that specify some other Recipe Resources, and each of those Recipe Resources may have Recipe Processes that can create them, and so on, recursively, until you can't find any more creation Recipe Processes. If you find more than one creation Recipe Processes, you will need some way to select one.) When you find a Recipe Process, then schedule a planned Process based on the Recipe Process, with an output Intent of the required quantity of the demanded Recipe Resource. Backschedule so that the end of the process meets the timing requirements of the inputs to the processes that will be waiting for them. Then schedule input Intents for each of the recipe inputs of that Recipe Process, with their quantities scaled to the quantity of the planned output. Then start over from the Start with each of those new input Intents as the demand.","title":"Dependent Demand"},{"location":"algorithms/equations/","text":"Value Equations As far as we know, the idea and name for value equations was invented by Sensorica , a pioneering Open Value Network. They are now calling them \"Benefit Redistribution Algorithms\". The idea is to have a published formula for distributing income to contributors to creating some deliverable that brings in some money. This is a (simplified) very specific example taken from Sensorica: Contributing to creating the output: Distributing income according to the value equation: Here's a lot more detail about value equations as implemented in Sensorica's NRP software, one of the precursors to Valueflows.","title":"Value Equations"},{"location":"algorithms/equations/#value-equations","text":"As far as we know, the idea and name for value equations was invented by Sensorica , a pioneering Open Value Network. They are now calling them \"Benefit Redistribution Algorithms\". The idea is to have a published formula for distributing income to contributors to creating some deliverable that brings in some money. This is a (simplified) very specific example taken from Sensorica: Contributing to creating the output: Distributing income according to the value equation: Here's a lot more detail about value equations as implemented in Sensorica's NRP software, one of the precursors to Valueflows.","title":"Value Equations"},{"location":"algorithms/netflows/","text":"Network Flows We've presented a selection of algorithms you could use with value flows networks. Here are some articles describing others: Stanford Network Flow Problems MIT Network Flow lecture notes Shortest Path Problem , listing several algorithms. A 500+ page book about directed graph algorithms","title":"Network Flows"},{"location":"algorithms/netflows/#network-flows","text":"We've presented a selection of algorithms you could use with value flows networks. Here are some articles describing others: Stanford Network Flow Problems MIT Network Flow lecture notes Shortest Path Problem , listing several algorithms. A 500+ page book about directed graph algorithms","title":"Network Flows"},{"location":"algorithms/overview/","text":"Value Flow Algorithms This section is about what computer programs (or humans with pencil and paper and a lot of work) can do with Valueflows economic networks once they are constructed on the Web or in a database. Network-based algorithms Dependent Demand constructs schedules for operational economic networks from recipes Many other scheduling algorithms can be used over the same recipes. Gantt charts are a popular network schedule visualization. Critical Path is another scheduling algorithm that analyzes a network of processes to figure out the bottlenecks, the processes that need special attention. Value Rollups summarize the total value of all inputs to the resulting output from a recipe. Value Equations determine how income should be distributed according to contributions to a deliverable item. Track and Trace follow the path of a resource forwards (to where it went) and backwards (where it came from, and what other resources went into it). Provenance is like Trace, focusing on the path of a resource and all of the other resources that went into it. Cash Flow is mostly about money, but could also apply to other resources, looking at the inflows and outflows on a timeline, historical in the past, forecasted in the future. Economic and Ecosystem Analysis : System Dynamics Systems Ecology including Energy Flow Analysis Input-Output Analysis Environmentally Extended IPO Analysis Life Cycle Analysis Material Flow Analysis Network Flows is a general name for all of those algorithms and many many more. See Flow Networks on Wikipedia and elsewhere. There are similarities and differences among the algorithms: Scheduling algorithms and cash flows use time-phasing: placing planned or reported events on a timeline. Dependent Demand schedules backwards from an end date; Critical Path schedules forwards from a start date. Dependent Demand does an explosion: breaking down the end resource of a recipe into a tree of components and processes. Value Rollups do an implosion: summarizing all the inputs of the exploded tree of components and processes into a total value. The Economic and Ecosystem algorithms use Input-Process-Output Models All of those algorithms work on flow networks, otherwise known as directed graphs, composed of nodes and links between them. Agent-based algorithms Agent-Based Models In biology In economics In sociology , including Social Network Analysis Complex adaptive systems","title":"Overview"},{"location":"algorithms/overview/#value-flow-algorithms","text":"This section is about what computer programs (or humans with pencil and paper and a lot of work) can do with Valueflows economic networks once they are constructed on the Web or in a database.","title":"Value Flow Algorithms"},{"location":"algorithms/overview/#network-based-algorithms","text":"Dependent Demand constructs schedules for operational economic networks from recipes Many other scheduling algorithms can be used over the same recipes. Gantt charts are a popular network schedule visualization. Critical Path is another scheduling algorithm that analyzes a network of processes to figure out the bottlenecks, the processes that need special attention. Value Rollups summarize the total value of all inputs to the resulting output from a recipe. Value Equations determine how income should be distributed according to contributions to a deliverable item. Track and Trace follow the path of a resource forwards (to where it went) and backwards (where it came from, and what other resources went into it). Provenance is like Trace, focusing on the path of a resource and all of the other resources that went into it. Cash Flow is mostly about money, but could also apply to other resources, looking at the inflows and outflows on a timeline, historical in the past, forecasted in the future. Economic and Ecosystem Analysis : System Dynamics Systems Ecology including Energy Flow Analysis Input-Output Analysis Environmentally Extended IPO Analysis Life Cycle Analysis Material Flow Analysis Network Flows is a general name for all of those algorithms and many many more. See Flow Networks on Wikipedia and elsewhere. There are similarities and differences among the algorithms: Scheduling algorithms and cash flows use time-phasing: placing planned or reported events on a timeline. Dependent Demand schedules backwards from an end date; Critical Path schedules forwards from a start date. Dependent Demand does an explosion: breaking down the end resource of a recipe into a tree of components and processes. Value Rollups do an implosion: summarizing all the inputs of the exploded tree of components and processes into a total value. The Economic and Ecosystem algorithms use Input-Process-Output Models All of those algorithms work on flow networks, otherwise known as directed graphs, composed of nodes and links between them.","title":"Network-based algorithms"},{"location":"algorithms/overview/#agent-based-algorithms","text":"Agent-Based Models In biology In economics In sociology , including Social Network Analysis Complex adaptive systems","title":"Agent-based algorithms"},{"location":"algorithms/provenance/","text":"Provenance Provenance is a form of tracing the origins of some end state. The term is often used for scientific papers or for valuable assets like artworks or diamonds. From PROV Overview : \"Provenance is information about entities, activities, and people involved in producing a piece of data or thing, which can be used to form assessments about its quality, reliability or trustworthiness.\" Provenance traces the history of an artifact, its processes and inputs, their processes and inputs, etc. - source Provenance goes backward from the end of a flow, just like value equations. Two businesses based on provenance and blockchains: https://www.provenance.org/ https://www.everledger.io/","title":"Provenance"},{"location":"algorithms/provenance/#provenance","text":"Provenance is a form of tracing the origins of some end state. The term is often used for scientific papers or for valuable assets like artworks or diamonds. From PROV Overview : \"Provenance is information about entities, activities, and people involved in producing a piece of data or thing, which can be used to form assessments about its quality, reliability or trustworthiness.\" Provenance traces the history of an artifact, its processes and inputs, their processes and inputs, etc. - source Provenance goes backward from the end of a flow, just like value equations. Two businesses based on provenance and blockchains: https://www.provenance.org/ https://www.everledger.io/","title":"Provenance"},{"location":"algorithms/rollup/","text":"Value Rollup Value rollups can be done on recipes as well as on reported events. They summarize the values of all of the inputs to all of the processes that go into the creation of a Resource Category or an Economic Resource. In business, cost rollups on recipes (usually bills of material and routings) calculate the Standard Cost of producing a commercial product model. Then actual cost rollups, summarizing the actual events that went into creating a product instance, can be compared to the standard cost. In value networks, value rollups can be done in both of those same ways (standard value and actual value), but all of the input values need to be converted into the same unit: often, but not necessarily, a unit of money. In a time bank system, the unit would be hours. In a mutual credit system, the unit could be hours, or it could be whatever the credits represent.","title":"Value Rollup"},{"location":"algorithms/rollup/#value-rollup","text":"Value rollups can be done on recipes as well as on reported events. They summarize the values of all of the inputs to all of the processes that go into the creation of a Resource Category or an Economic Resource. In business, cost rollups on recipes (usually bills of material and routings) calculate the Standard Cost of producing a commercial product model. Then actual cost rollups, summarizing the actual events that went into creating a product instance, can be compared to the standard cost. In value networks, value rollups can be done in both of those same ways (standard value and actual value), but all of the input values need to be converted into the same unit: often, but not necessarily, a unit of money. In a time bank system, the unit would be hours. In a mutual credit system, the unit could be hours, or it could be whatever the credits represent.","title":"Value Rollup"},{"location":"algorithms/track/","text":"Difference between tracking and tracing From StackExchange: : The difference is in direction & point in time: To trace: follow the completed path backwards from its current point to where it began... When you \"trace\" a cellphone call, you try to determine its origin... You go backward to the starting point. To track: follow the emerging path forwards from your starting point to wherever the thing currently is... When you \"track\" a cellphone, you monitor [the starting] location ... and follow it wherever it goes... One of the most-often used traces is to find the origins of health problems like mad cow disease and tainted drugs and food. In Valueflows terms, that would start with the product (economic resource) that caused a health problem, and trace back along the chain of resource flows to the source or sources of the product. Then it might be necessary to also track forwards from the source(s) to find everything else that might include that source(s). It is also used when the provenance is useful for other information, like to determine the sustainability of the creation of a resource (like fossil fuel inputs, potential carbon implications, etc.), how healthy the inputs are, how local is the production and distribution, etc. Or when an agent is interested in what happens to a resource they created, for example what is the effect of their recycling efforts or material donations to an educational program. Also, this logic is used in other features, like \"contribution economy\" calculations, where all contributions of various kinds over time can be found be tracing backwards from an end resource. Valueflows query terminology previous and next bring back the element one flow step backwards or forwards track and trace bring back the whole resource flow tree forwards or backwards, starting with a resource or an output event Briefly, to gather a whole track or trace, the previous or next methods should be used in recursive logic, traveling down the flow and each branch of the flow, when there are many inputs or many outputs. Trace logic Adding breadcrumbs on initial save For the most part, the structure provides the causal order of the flows. But for some specific situations, such as repeated cycles referencing the same ProcessSpecifications, additional information should be saved on the EconomicEvent and EconomicResource to aid in obtaining consistent causal order. (Timestamps are not reliable in distributed systems.) Add two new fields called previousEvent , one on EconomicResource and one on EconomicEvent. The previousEvent fields reference an EconomicEvent. When a new event is created with a resourceInventoriedAs , the new event takes the resource's previousEvent value and puts it into the new event's previousEvent field, and puts the new event into the resource's previousEvent field. Those previousEvent references provide breadcrumbs for tracking and tracing through ambiguous situations, see pseudocode below. Where to start a trace The \"starting item\" can be an EconomicResource or EconomicEvent. If you want to start at the present time, and trace everything that ever happened to the resource, start with the resource and the value of its previousEvent . If you just want to know how a resource was made, and what inputs went into it, start with selecting the output event where that resource was initially created, or if it is a stock resource, where it was last incremented. Pseudocode The following is included to give some idea of the logic required. It tries to cover all actions and scenarios, but is meant as a suggestion, and has not been thoroughly tested in code. EconomicResource \"previous\": find all events that are process outputs and where the resource is resourceInventoriedAs find all events that have the resource as toResourceInventoriedAs (all transfers and move) find all raise/lower events that reference the resource as resourceInventoriedAs return all of the above events Process \"previous\": return all events that are input to the process EconomicEvent \"previous\": if the event is output of a process return the process else if the event is triggeredBy another event return the triggeredBy event else if resourceInventoriedAs of the event exists return the resourceInventoriedAs trace (parameter: starting item) initialize \"flows\", \"visited\", \"contained\", \"modified\", \"delivered\" (list or similar, \"flows\" must be ordered) add the starting item to \"visited\" add the starting item to \"flows\" if the item is an unpack event add the resourceInventoriedAs to \"contained\" if the item is a modify event add the resourceInventoriedAs to \"modified\" if the item is a dropoff event add the resourceInventoriedAs to \"delivered\" call trace-depth-first-search (which will go recursively backwards through the tree) return \"flows\" trace-depth-first-search (parameters: \"flows\", \"visited\", \"contained\", \"modified\", \"delivered\", \"savedEvent\") for the last item in \"flows\", get \"previous\" (defined below) if that last item is an event save the previousEvent in savedEvent order descending the \"previous\" items by id or other unique element if the savedEvent is one of those items move it to the position where it will be processed first for each of those items if the item is not in \"visited\" set \"skip\" to false if the item is a pickup event if the event's resourceInventoriedAs is in \"delivered\" remove it from \"delivered\" else set \"skip\" to true else if the item is an accept event if the event's resourceInventoriedAs is in \"modified\" remove it from \"modified\" else set \"skip\" to true else if the item is a pack event if the event's resourceInventoriedAs is in \"contained\" remove it from \"contained\" else set \"skip\" to true else if the item is an unpack event add the resourceInventoriedAs to \"contained\" else if the item is a modify event add the resourceInventoriedAs to \"modified\" else if the item is a dropoff event add the resourceInventoriedAs to \"delivered\" if \"skip\" is false add the item to \"visited\" add the item to \"flows\" call trace-depth-first-search return \"flows\" Track logic Pseudocode Again, the following is included to give some idea of the logic required. It tries to cover all actions and scenarios, but is meant as a suggested starting point, it has not been tested in code. EconomicResource \"next\": return all events where the resource is resourceInventoriedAs Process \"next\": return all events that are output of the process EconomicEvent \"next\": if the event is input of a process return the process if there are any events that are triggeredBy this event return them if the event is output of a process return the resourceInventoriedAs if the toResourceInventoriedAs of the event exists return the toResourceInventoriedAs track (parameter: starting item) TBD.... return \"flows\" Tracking identifier and lot Currently, often companies' internal flow information is not public, although in many countries they are required to be able to provide input and output information when needed in a medical emergency, without connecting all the dots internally. Also any organization can be missing resource flow data so that there are gaps in the flows, no matter the level of transparency. For these reasons, tracking identifier (often a serial number) and a standard lot identifier are currently used when food or medical tracing and tracking is required. And in VF, they can be used whenever there is missing resource flow information for any reason; or when many resources go in and out of one process, such as might happen in transportation. Note that in VF, for simplicity, besides lot , a lot identifier can be stored in the trackingIdentifier property. Also note that lots get \"spread out\" into splits of a resource or different types of resources. For example, one cow could have a lot identifier, which when the cow goes through a butchering process will be included in all the cuts of beef from that cow. Or one production batch of a medicine that contains many packages of the same medicine would have a lot identifier, which stays attached to the individual packages wherever they go.","title":"Track and Trace"},{"location":"algorithms/track/#difference-between-tracking-and-tracing","text":"From StackExchange: : The difference is in direction & point in time: To trace: follow the completed path backwards from its current point to where it began... When you \"trace\" a cellphone call, you try to determine its origin... You go backward to the starting point. To track: follow the emerging path forwards from your starting point to wherever the thing currently is... When you \"track\" a cellphone, you monitor [the starting] location ... and follow it wherever it goes... One of the most-often used traces is to find the origins of health problems like mad cow disease and tainted drugs and food. In Valueflows terms, that would start with the product (economic resource) that caused a health problem, and trace back along the chain of resource flows to the source or sources of the product. Then it might be necessary to also track forwards from the source(s) to find everything else that might include that source(s). It is also used when the provenance is useful for other information, like to determine the sustainability of the creation of a resource (like fossil fuel inputs, potential carbon implications, etc.), how healthy the inputs are, how local is the production and distribution, etc. Or when an agent is interested in what happens to a resource they created, for example what is the effect of their recycling efforts or material donations to an educational program. Also, this logic is used in other features, like \"contribution economy\" calculations, where all contributions of various kinds over time can be found be tracing backwards from an end resource.","title":"Difference between tracking and tracing"},{"location":"algorithms/track/#valueflows-query-terminology","text":"previous and next bring back the element one flow step backwards or forwards track and trace bring back the whole resource flow tree forwards or backwards, starting with a resource or an output event Briefly, to gather a whole track or trace, the previous or next methods should be used in recursive logic, traveling down the flow and each branch of the flow, when there are many inputs or many outputs.","title":"Valueflows query terminology"},{"location":"algorithms/track/#trace-logic","text":"","title":"Trace logic"},{"location":"algorithms/track/#adding-breadcrumbs-on-initial-save","text":"For the most part, the structure provides the causal order of the flows. But for some specific situations, such as repeated cycles referencing the same ProcessSpecifications, additional information should be saved on the EconomicEvent and EconomicResource to aid in obtaining consistent causal order. (Timestamps are not reliable in distributed systems.) Add two new fields called previousEvent , one on EconomicResource and one on EconomicEvent. The previousEvent fields reference an EconomicEvent. When a new event is created with a resourceInventoriedAs , the new event takes the resource's previousEvent value and puts it into the new event's previousEvent field, and puts the new event into the resource's previousEvent field. Those previousEvent references provide breadcrumbs for tracking and tracing through ambiguous situations, see pseudocode below.","title":"Adding breadcrumbs on initial save"},{"location":"algorithms/track/#where-to-start-a-trace","text":"The \"starting item\" can be an EconomicResource or EconomicEvent. If you want to start at the present time, and trace everything that ever happened to the resource, start with the resource and the value of its previousEvent . If you just want to know how a resource was made, and what inputs went into it, start with selecting the output event where that resource was initially created, or if it is a stock resource, where it was last incremented.","title":"Where to start a trace"},{"location":"algorithms/track/#pseudocode","text":"The following is included to give some idea of the logic required. It tries to cover all actions and scenarios, but is meant as a suggestion, and has not been thoroughly tested in code. EconomicResource \"previous\": find all events that are process outputs and where the resource is resourceInventoriedAs find all events that have the resource as toResourceInventoriedAs (all transfers and move) find all raise/lower events that reference the resource as resourceInventoriedAs return all of the above events Process \"previous\": return all events that are input to the process EconomicEvent \"previous\": if the event is output of a process return the process else if the event is triggeredBy another event return the triggeredBy event else if resourceInventoriedAs of the event exists return the resourceInventoriedAs trace (parameter: starting item) initialize \"flows\", \"visited\", \"contained\", \"modified\", \"delivered\" (list or similar, \"flows\" must be ordered) add the starting item to \"visited\" add the starting item to \"flows\" if the item is an unpack event add the resourceInventoriedAs to \"contained\" if the item is a modify event add the resourceInventoriedAs to \"modified\" if the item is a dropoff event add the resourceInventoriedAs to \"delivered\" call trace-depth-first-search (which will go recursively backwards through the tree) return \"flows\" trace-depth-first-search (parameters: \"flows\", \"visited\", \"contained\", \"modified\", \"delivered\", \"savedEvent\") for the last item in \"flows\", get \"previous\" (defined below) if that last item is an event save the previousEvent in savedEvent order descending the \"previous\" items by id or other unique element if the savedEvent is one of those items move it to the position where it will be processed first for each of those items if the item is not in \"visited\" set \"skip\" to false if the item is a pickup event if the event's resourceInventoriedAs is in \"delivered\" remove it from \"delivered\" else set \"skip\" to true else if the item is an accept event if the event's resourceInventoriedAs is in \"modified\" remove it from \"modified\" else set \"skip\" to true else if the item is a pack event if the event's resourceInventoriedAs is in \"contained\" remove it from \"contained\" else set \"skip\" to true else if the item is an unpack event add the resourceInventoriedAs to \"contained\" else if the item is a modify event add the resourceInventoriedAs to \"modified\" else if the item is a dropoff event add the resourceInventoriedAs to \"delivered\" if \"skip\" is false add the item to \"visited\" add the item to \"flows\" call trace-depth-first-search return \"flows\"","title":"Pseudocode"},{"location":"algorithms/track/#track-logic","text":"","title":"Track logic"},{"location":"algorithms/track/#pseudocode_1","text":"Again, the following is included to give some idea of the logic required. It tries to cover all actions and scenarios, but is meant as a suggested starting point, it has not been tested in code. EconomicResource \"next\": return all events where the resource is resourceInventoriedAs Process \"next\": return all events that are output of the process EconomicEvent \"next\": if the event is input of a process return the process if there are any events that are triggeredBy this event return them if the event is output of a process return the resourceInventoriedAs if the toResourceInventoriedAs of the event exists return the toResourceInventoriedAs track (parameter: starting item) TBD.... return \"flows\"","title":"Pseudocode"},{"location":"algorithms/track/#tracking-identifier-and-lot","text":"Currently, often companies' internal flow information is not public, although in many countries they are required to be able to provide input and output information when needed in a medical emergency, without connecting all the dots internally. Also any organization can be missing resource flow data so that there are gaps in the flows, no matter the level of transparency. For these reasons, tracking identifier (often a serial number) and a standard lot identifier are currently used when food or medical tracing and tracking is required. And in VF, they can be used whenever there is missing resource flow information for any reason; or when many resources go in and out of one process, such as might happen in transportation. Note that in VF, for simplicity, besides lot , a lot identifier can be stored in the trackingIdentifier property. Also note that lots get \"spread out\" into splits of a resource or different types of resources. For example, one cow could have a lot identifier, which when the cow goes through a butchering process will be included in all the cuts of beef from that cow. Or one production batch of a medicine that contains many packages of the same medicine would have a lot identifier, which stays attached to the individual packages wherever they go.","title":"Tracking identifier and lot"},{"location":"appendix/presentations/","text":"Other Available Documentation We are occasionally asked for other documentation and visuals for Valueflows. We'll keep adding below as new things become available. We also appreciate projects contributing graphics and other useful presentations back to the Valueflows community, and we will add them here. Graphics in this documentation Most of the graphics on these VF website pages are available in xml (for drawing tools) and as images here: images in the main documentation images on the example pages Presentations All of the following presentations can also be found in this directory , with editable versions where we have them. A basic VF presentation, 2021 A short presentation to the Climate Collabathon, 2020 , which includes some duplicates of the previous deck, but also some additional slides. Everything in Valueflows is connected , a high level trip through the model. An early presentation by Connor Turland , intended for people involved in the distributed web (DWeb), talking about \"why Valueflows\", and core challenges and opportunities. A presentation to a Bill McCarthy accounting class in 2017 , including some history of Valueflows in relation to REA, comparisons, and example projects. A presentation to a Bill McCarthy accounting class in 2020 , including \"what can an economic network do that an enterprise can't?\", and example projects. Intro to REA, selected slides from Bill McCarthy , and a few others. Accounting for Good by pospi , lead developer of hREA, the VF backend framework for Holochain. Citizen involvement in Amsterdam textiles circular economy Videos A short summary for the Yale Climate Collabathon, 2020 (14 minutes, slides above) Holochain Ecosystem Session with New York Textile Lab, 2021 (52 minutes, very interesting supply chain coordination use case) Tom Miller walks through the VF story about pie, 2020 (45 minutes, slides available here ) Deep dive into VF for devs, 2019 (2 hours, model slightly out of date) Dave Darby interviews about VF, part 1 amd part 2","title":"Other Documentation"},{"location":"appendix/presentations/#other-available-documentation","text":"We are occasionally asked for other documentation and visuals for Valueflows. We'll keep adding below as new things become available. We also appreciate projects contributing graphics and other useful presentations back to the Valueflows community, and we will add them here.","title":"Other Available Documentation"},{"location":"appendix/presentations/#graphics-in-this-documentation","text":"Most of the graphics on these VF website pages are available in xml (for drawing tools) and as images here: images in the main documentation images on the example pages","title":"Graphics in this documentation"},{"location":"appendix/presentations/#presentations","text":"All of the following presentations can also be found in this directory , with editable versions where we have them. A basic VF presentation, 2021 A short presentation to the Climate Collabathon, 2020 , which includes some duplicates of the previous deck, but also some additional slides. Everything in Valueflows is connected , a high level trip through the model. An early presentation by Connor Turland , intended for people involved in the distributed web (DWeb), talking about \"why Valueflows\", and core challenges and opportunities. A presentation to a Bill McCarthy accounting class in 2017 , including some history of Valueflows in relation to REA, comparisons, and example projects. A presentation to a Bill McCarthy accounting class in 2020 , including \"what can an economic network do that an enterprise can't?\", and example projects. Intro to REA, selected slides from Bill McCarthy , and a few others. Accounting for Good by pospi , lead developer of hREA, the VF backend framework for Holochain. Citizen involvement in Amsterdam textiles circular economy","title":"Presentations"},{"location":"appendix/presentations/#videos","text":"A short summary for the Yale Climate Collabathon, 2020 (14 minutes, slides above) Holochain Ecosystem Session with New York Textile Lab, 2021 (52 minutes, very interesting supply chain coordination use case) Tom Miller walks through the VF story about pie, 2020 (45 minutes, slides available here ) Deep dive into VF for devs, 2019 (2 hours, model slightly out of date) Dave Darby interviews about VF, part 1 amd part 2","title":"Videos"},{"location":"appendix/rea/","text":"Background of the REA (Resource, Event, Agent) model which this vocabulary is based on: Bill McCarthy's REA papers McCarthy's original 1982 REA paper REA ontology paper Singapore REA Learning Tool Extending REA from internal business systems into larger economic networks: Radically Distributed Supply Chain Systems A semantic model for Internet supply chain collaboration a little dated and most of the internal links are broken, but still useful ISO Accounting and Economic Ontology based on REA. International Standards Organization, \u201cISO 15944-4: Information Technology \u2013 Business Operational View \u2013 Part 4: Business Transaction Scenarios \u2013 Accounting and Economic Ontology,\u201d Second Version of International Standard, The International Organization for Standards (ISO), Geneva, Switzerland, April 2015 . (Link connects reader to request for free copy of certain ISO standards; reader then chooses to ask for 15944-4-2015.) McCarthy ISO slide deck REA Beyond the Enterprise From private ownership to commons accounting Besides REA, the other main core concept is dependent demand. We do event-driven Resource Requirements Planning based on that pattern. Dependent Demand - a Business Pattern","title":"REA References"},{"location":"appendix/usedfor/","text":"Who Is Using Valueflows Reference applications Listed here are some of the developer teams and user groups who have implemented or are implementing Valueflows in open source projects. Please let us know if we have missed you and you would like to be listed. Holochain ecosystem A generic Valueflows backend is being developed in Holochain , called hREA. Information can be found on the website , on github , chat in discord . hREA exposes the graphql api for UI/UX apps to build on. Some of the UI/UX apps being built on hREA are Code A, an international group of university professors working on climate change issues, wants to create an application for classes to use as they do practical work to learn about methods for micro to macro climate accounting, and how to coordinate among themselves and with their communities. Code is on github . New York Textile Lab is a supply chain network that connects designers to fiber producers and mills to help grow an economically diverse textile supply ecosystem. They are featured on this Holochain Ecosystem video . Sensorica , an open value network in Montreal, is just starting design on a new version of their NRP software, which was used as one input for Valueflows. Fediverse ecosystem The Fediverse is a collection of networking applications that federate with each other using the ActivityPub social networking protocol as the core. Bonfire kicked the federation direction off by supporting Valueflows as an extension of ActivityPub, and including the same graphql api as hREA. This supports a user-friendly integration of social and economic networking, which we think is an important direction. Information is at their website , the Valueflows extension is on github . Reflow was an EU H2020 funded project that seeks to understand and transform urban material flows, co-create and test regenerative solutions at business, governance, and citizen levels to create a resilient circular economy. The ReflowOS backend, developed by Dyne (see below), built on the Bonfire application. FabCity Hamburg (in process) will build on Reflow to support a global network of Fab Cities that proposes a new urban, economic, social and industrial model that relocalises production to the city and its bioregional context, while building a digital infrastructure enabling ecological, economic and social sustainability. Dyne (see below) is also heavily involved in this development. Dyne has done and is doing development on Reflow and FabCity Hamburg, including developing the Reflow \" Digital Product Passport \" based on Valueflows for a number of pilots, including some Reflow pilots and FabCity Hamburg (see above). LearnDeep , created by students at MSOE , supports a network of high school fablabs in Milwaukee that receive contributions of materials from the community and share these with each other. Their gitlab code will soon be merged upstream and completed as a Bonfire flavour. Other applications Web of Needs , in progress. The goal is to do automated matching of intents with attached actors/resources on the one side and interaction patterns on the other, such that meaningful interactions can be automatically suggested to users. The code is on github . Basis Project is a protocol for scalable, ecological production. It's using an auto-generated (from the owl file) Valueflows class structure in Rust to drive a reference implementation. The code lives on github . Whither from here? Valueflows philosophically seeks to develop in collaboration with user groups on the ground. This round of projects is providing valuable input to the Valueflows vocabulary. We can expect some additions and extensions. As more implementations are becoming distributed, a particularly interesting direction is composing systems out of VF-enabled apps or modules, or using them to interact with each other. Two possible patterns: Composing bigger apps from many smaller apps Networks of apps interacting with one another Following this direction, we will need to figure out the sweet spots for component size and shape for Valueflows Open Apps. If we do that well, many people should be able to create variations on any of the components, and they might be able to work together with any of the other variations. (Depending on devils in details...)","title":"Implementations"},{"location":"appendix/usedfor/#who-is-using-valueflows","text":"","title":"Who Is Using Valueflows"},{"location":"appendix/usedfor/#reference-applications","text":"Listed here are some of the developer teams and user groups who have implemented or are implementing Valueflows in open source projects. Please let us know if we have missed you and you would like to be listed.","title":"Reference applications"},{"location":"appendix/usedfor/#holochain-ecosystem","text":"A generic Valueflows backend is being developed in Holochain , called hREA. Information can be found on the website , on github , chat in discord . hREA exposes the graphql api for UI/UX apps to build on. Some of the UI/UX apps being built on hREA are Code A, an international group of university professors working on climate change issues, wants to create an application for classes to use as they do practical work to learn about methods for micro to macro climate accounting, and how to coordinate among themselves and with their communities. Code is on github . New York Textile Lab is a supply chain network that connects designers to fiber producers and mills to help grow an economically diverse textile supply ecosystem. They are featured on this Holochain Ecosystem video . Sensorica , an open value network in Montreal, is just starting design on a new version of their NRP software, which was used as one input for Valueflows.","title":"Holochain ecosystem"},{"location":"appendix/usedfor/#fediverse-ecosystem","text":"The Fediverse is a collection of networking applications that federate with each other using the ActivityPub social networking protocol as the core. Bonfire kicked the federation direction off by supporting Valueflows as an extension of ActivityPub, and including the same graphql api as hREA. This supports a user-friendly integration of social and economic networking, which we think is an important direction. Information is at their website , the Valueflows extension is on github . Reflow was an EU H2020 funded project that seeks to understand and transform urban material flows, co-create and test regenerative solutions at business, governance, and citizen levels to create a resilient circular economy. The ReflowOS backend, developed by Dyne (see below), built on the Bonfire application. FabCity Hamburg (in process) will build on Reflow to support a global network of Fab Cities that proposes a new urban, economic, social and industrial model that relocalises production to the city and its bioregional context, while building a digital infrastructure enabling ecological, economic and social sustainability. Dyne (see below) is also heavily involved in this development. Dyne has done and is doing development on Reflow and FabCity Hamburg, including developing the Reflow \" Digital Product Passport \" based on Valueflows for a number of pilots, including some Reflow pilots and FabCity Hamburg (see above). LearnDeep , created by students at MSOE , supports a network of high school fablabs in Milwaukee that receive contributions of materials from the community and share these with each other. Their gitlab code will soon be merged upstream and completed as a Bonfire flavour.","title":"Fediverse ecosystem"},{"location":"appendix/usedfor/#other-applications","text":"Web of Needs , in progress. The goal is to do automated matching of intents with attached actors/resources on the one side and interaction patterns on the other, such that meaningful interactions can be automatically suggested to users. The code is on github . Basis Project is a protocol for scalable, ecological production. It's using an auto-generated (from the owl file) Valueflows class structure in Rust to drive a reference implementation. The code lives on github .","title":"Other applications"},{"location":"appendix/usedfor/#whither-from-here","text":"Valueflows philosophically seeks to develop in collaboration with user groups on the ground. This round of projects is providing valuable input to the Valueflows vocabulary. We can expect some additions and extensions. As more implementations are becoming distributed, a particularly interesting direction is composing systems out of VF-enabled apps or modules, or using them to interact with each other. Two possible patterns: Composing bigger apps from many smaller apps Networks of apps interacting with one another Following this direction, we will need to figure out the sweet spots for component size and shape for Valueflows Open Apps. If we do that well, many people should be able to create variations on any of the components, and they might be able to work together with any of the other variations. (Depending on devils in details...)","title":"Whither from here?"},{"location":"concepts/accounting/","text":"Accounting Recording Basic Economic Activity The Valueflows vocabulary is based on the REA ontology (Resources, Events and Agents) the ISO Accounting and Economic Ontology, which was evolved for that purpose. (See Appendix for links.) Since all the data is recorded as the economic activity happens and is represented in its most basic form, you can get separate accounting views for: a network, each group in the network, each project, each individual. In other words, people in the network log events as they occur and the accounting Just Happens . All of the views can emerge from subsets of the same data. Any standard (or non-standard) accounting report can be created. Or potentially, views for a global value system economy (really). Accounting as in Accountability... from peers to each other from members to a network from a network to the members from one network to another from a network to the community from a network to the ecosystem Accounting isn't always just counting beans. It will be important for community economies: what resources do we have, what happened with them, how are they doing? What resources do we need? Who needs what? Who can provide what? What waste have we generated and how can we improve? But if you want to count beans... The standard set of accounting reports are needed by many organizations. A standard General Ledger, Balance Sheet, and Income Statement can be generated automatically from Valueflows data. No need to create a Chart of Accounts or post double-entries, those can all be created by a computer program on request. Moreover, General Ledgers and accounting reports can be created automatically for each agent in an economic network using the VF vocabulary. The accounting views use the Dependent or Individual Agent view of ValueFlows. See also Independent vs Dependent views . Accounting statements can also be updated instantly for each participant in any economic event as soon as the event is recorded. For example, consider an economic exchange, where one agent transfers some goods to another, and the other agent transfers some money in return. The inventory of the goods-providing agent will be instantly decremented, and the receiving agent's incremented. Likewise the money accounts of the money-providing and receiving agents will immediately change. Income statements, balance sheets, and cash flow reports can reflect the new changes immediately. The financial positions of each agent can always be up-to-date as of the last recorded event. This article describes how to generate General Ledgers etc. from REA data using procedural code: Operation of a Relational Accounting System, Graham Gal and Bill McCarthy Wim Laurier is working on how to do it declaratively. This paper gives an early view of how Wim and Satoshi Horiuchi intend to do it. The difference between doing it procedurally and doing it declaratively: A procedural program defines a step-by-step method of getting the desired results. A declarative program describes the desired results and hands it to another program that can generate the desired results from your description. The person who desires the results writes much less code.","title":"Accounting"},{"location":"concepts/accounting/#accounting","text":"","title":"Accounting"},{"location":"concepts/accounting/#recording-basic-economic-activity","text":"The Valueflows vocabulary is based on the REA ontology (Resources, Events and Agents) the ISO Accounting and Economic Ontology, which was evolved for that purpose. (See Appendix for links.) Since all the data is recorded as the economic activity happens and is represented in its most basic form, you can get separate accounting views for: a network, each group in the network, each project, each individual. In other words, people in the network log events as they occur and the accounting Just Happens . All of the views can emerge from subsets of the same data. Any standard (or non-standard) accounting report can be created. Or potentially, views for a global value system economy (really).","title":"Recording Basic Economic Activity"},{"location":"concepts/accounting/#accounting-as-in-accountability","text":"from peers to each other from members to a network from a network to the members from one network to another from a network to the community from a network to the ecosystem Accounting isn't always just counting beans. It will be important for community economies: what resources do we have, what happened with them, how are they doing? What resources do we need? Who needs what? Who can provide what? What waste have we generated and how can we improve?","title":"Accounting as in Accountability..."},{"location":"concepts/accounting/#but-if-you-want-to-count-beans","text":"The standard set of accounting reports are needed by many organizations. A standard General Ledger, Balance Sheet, and Income Statement can be generated automatically from Valueflows data. No need to create a Chart of Accounts or post double-entries, those can all be created by a computer program on request. Moreover, General Ledgers and accounting reports can be created automatically for each agent in an economic network using the VF vocabulary. The accounting views use the Dependent or Individual Agent view of ValueFlows. See also Independent vs Dependent views . Accounting statements can also be updated instantly for each participant in any economic event as soon as the event is recorded. For example, consider an economic exchange, where one agent transfers some goods to another, and the other agent transfers some money in return. The inventory of the goods-providing agent will be instantly decremented, and the receiving agent's incremented. Likewise the money accounts of the money-providing and receiving agents will immediately change. Income statements, balance sheets, and cash flow reports can reflect the new changes immediately. The financial positions of each agent can always be up-to-date as of the last recorded event. This article describes how to generate General Ledgers etc. from REA data using procedural code: Operation of a Relational Accounting System, Graham Gal and Bill McCarthy Wim Laurier is working on how to do it declaratively. This paper gives an early view of how Wim and Satoshi Horiuchi intend to do it. The difference between doing it procedurally and doing it declaratively: A procedural program defines a step-by-step method of getting the desired results. A declarative program describes the desired results and hands it to another program that can generate the desired results from your description. The person who desires the results writes much less code.","title":"But if you want to count beans..."},{"location":"concepts/actions/","text":"Action Definitions All flows (Economic Event, Commitment, Intent, Claim, Recipe Flow) use an action property to designate what the flow is doing and how it will affect an economic resource (or not). Actions are defined as follows. vf:produce - A new resource is created in the process, or an addition to an existing stock resource of the same type is incremented. produce is used in manufacturing of goods, but also in any kind of creation of a material or digital or energy resource. vf:use - Most often use is employed for equipment or tools that are used in a process, but not consumed. After the process, the piece of equipment of tool still exists, but during the process, it is unavailable. The unavailability can be useful to know if the resource must be scheduled, or if one needs to know how much the resource is used. vf:consume - Most often, an ingredient or component is transformed into the output(s) of the process. Or the input resource can be used up during the process, like energy. After the process the specified quantity of the consumed input is gone. vf:cite - cite is used when a resource is input to a process, but is neither used nor consumed, and remains available during the process. Examples are a design file or a scientific paper, any digital knowledge, which is cited so that the agent(s) responsible for the resource receive credit. vf:work - work refers to labor power applied to a process. There is generally no identifiable resource involved, only the provider agent. In this case, the type of work or skill involved can be identified by a resource specification. A possible exception would be if the agent's work schedule is kept on a calendar, representing when the specific agent is available to work. vf:pickup - The transported resource or person enters the process; the same resource will appear later in an output of the process. It is assumed that the resource is already in custody of the agent providing the transportation. vf:dropoff - The transported resource or person leaves the process; the same resource or person appeared in an input of this process. vf:accept - This is used as input to a process involving repair, modification, testing, or similar of a resource. The same resource will appear in the output of the process. It is sometimes a bit of a gray area when to use accept / modify vs. consume / produce . The choice is based on the need to have the same identified resource before and after the process. Generally if the resource is involved in a series of processes to create it before anything else happens to it, accept / modify is appropriate. If the input resource and the output resource need to be identified as different resource specifications for any reason, then accept / modify is not appropriate. vf:modify - The identified resource that was accepted into a process appears in the output of that process, with modifications made. Note not all modifications require a physical change, for example quality testing. In all cases though, it matters that the resource has gone through that process, and the stage of the resource (the process specification of the process) is then used as part of the logical identification of the resource when the resource is requested as a process input or for a transfer. vf:combine - A resource is put in a package or a combination resource; the same resource might appear later when it is separated. Examples are packing one or more resources for transportation or storage, or creation of a kit resource. The combined resource is still identified in the system, but is containedIn the package or combination resource, which would be usually produced in the process. When a resource is containedIn another resource, it is not available on its own. Note that packing materials or containers which will continue to have their own identity later are also combined in the process; if not, they can be consumed. vf:separate - A resource is removed from a package or a combination resource; the same resource appeared as input earlier in this or another process when it was combined. When the resource is separated, it loses its containedIn reference, and becomes available on its own. vf:deliver-service - A new service is produced and delivered as output of a process. A service implies that an agent actively receives the service at the same time as it is delivered. Services are not tangible, so would not create or increment an inventoried resource. Services are perhaps most often delivered directly to an agent. But unlike other actions, sometimes the service is at the same time being delivered into another documented process, in which case it can be output from a process and input to another, at the same time. vf:transfer-all-rights - This action gives full (in the human realm) rights and responsibilities to another agent, without transferring physical custody. People might call this \"ownership\"; or it might be considered \"stewardship\" or similar. This occurs instantaneously, and does not involve documented physical transfer. It is often triggeredBy a transfer of custody, for example shipping or receipt of goods. vf:transfer-custody - This action gives physical custody and control of a resource to another agent, without full rights. The physical custodian often has responsibilities associated with custody, however. Examples where transfer of custody is useful are loaning a resource to another agent, or when a resource is transferred to have a service performed by another agent, like transportation or repair. vf:transfer - This action gives full (human) rights and responsibilities plus physical custody, combining the last two actions. vf:move - move changes the location, and possibly the identifier, if location is part of the logical identifier, of a resource with no transfer of agent rights or custodianship. vf:raise - This action adjusts a quantity up, used either when a computer system is brought up and existing resources must be entered with a beginning balance, or when an inventory count in the real world shows that there the quantity in the computer system is too low. When it is known how a resource was obtained, it is preferable to use the real action. vf:lower - This action adjusts a quantity down, based on an inventory count in the real world showing that the quantity in the computer system is too high. When it is known how a resource was lowered, it is preferable to use the real action. Action Behaviors Action Accounting effect Onhand effect I/O Other effect Pairs with produce Increment Increment Output primaryAccountable(5) N/A consume Decrement Decrement Input N/A N/A use No effect(1) No effect(1) Input N/A N/A work No effect(1) No effect(1) Input N/A N/A cite No effect No effect Input N/A N/A deliver-service No effect No effect Output(3) N/A N/A pickup No effect No effect Input N/A dropoff dropoff No effect No effect Output currentLocation(4) pickup accept No effect Decrement Input N/A modify modify No effect Increment Output N/A accept combine No effect Decrement Input add containedIn separate separate No effect Increment Output remove containedIn combine transfer-custody No effect Decr+Incr(2) N/A currentLocation(4) N/A transfer-all-rights Decr+Incr(2) No effect N/A primaryAccountable(5) N/A transfer Decr+Incr(2) Decr+Incr(2) N/A currentLocation(4), primaryAccountable(5) N/A move Decr+Incr(2) Decr+Incr(2) N/A currentLocation(4) N/A raise Increment Increment N/A primaryAccountable(5) N/A lower Decrement Decrement N/A N/A N/A We have defined a core set of actions, but expect that this will be extended with some others. If extended, they should be defined as part of this or another formal vocabulary so that all can use them and assume the same meaning. However, the effects of the actions are included in the data definitions so that computer systems can be \"data driven\" in their effects on resources if desired. (1) The actions use and work are time-based actions, either with or without an explicit schedule. If the schedule is documented as part of the economic resource, then those economic events could decrement that schedule, although not the \"current quantity\" of the resource. (2) The transfer actions and move can optionally define a second identified resource on the receiver side. (3) The action deliver-service can sometimes be an input to another process, at the same time as it is an output from a process. This is because services imply delivery as they are created. (4) These actions should update the resource's currentLocation if toLocation is provided on the event. For dropoff it is the resource which is affected by the event, for all others it is the to resource, the resource that results from the event. For the latter, the resource and to resource may be the same resource, depending on how resources are identified in the user community. (5) These actions should update the resource's primaryAccountable agent using the event's receiver agent. For produce , the resource is the one that is created by the event, if one is created. For the transfers, the resource updated is the toResourceInventoriedAs . For raise , this only applies if a new resource is created, not if an existing resource is raised.","title":"Actions"},{"location":"concepts/actions/#action-definitions","text":"All flows (Economic Event, Commitment, Intent, Claim, Recipe Flow) use an action property to designate what the flow is doing and how it will affect an economic resource (or not). Actions are defined as follows. vf:produce - A new resource is created in the process, or an addition to an existing stock resource of the same type is incremented. produce is used in manufacturing of goods, but also in any kind of creation of a material or digital or energy resource. vf:use - Most often use is employed for equipment or tools that are used in a process, but not consumed. After the process, the piece of equipment of tool still exists, but during the process, it is unavailable. The unavailability can be useful to know if the resource must be scheduled, or if one needs to know how much the resource is used. vf:consume - Most often, an ingredient or component is transformed into the output(s) of the process. Or the input resource can be used up during the process, like energy. After the process the specified quantity of the consumed input is gone. vf:cite - cite is used when a resource is input to a process, but is neither used nor consumed, and remains available during the process. Examples are a design file or a scientific paper, any digital knowledge, which is cited so that the agent(s) responsible for the resource receive credit. vf:work - work refers to labor power applied to a process. There is generally no identifiable resource involved, only the provider agent. In this case, the type of work or skill involved can be identified by a resource specification. A possible exception would be if the agent's work schedule is kept on a calendar, representing when the specific agent is available to work. vf:pickup - The transported resource or person enters the process; the same resource will appear later in an output of the process. It is assumed that the resource is already in custody of the agent providing the transportation. vf:dropoff - The transported resource or person leaves the process; the same resource or person appeared in an input of this process. vf:accept - This is used as input to a process involving repair, modification, testing, or similar of a resource. The same resource will appear in the output of the process. It is sometimes a bit of a gray area when to use accept / modify vs. consume / produce . The choice is based on the need to have the same identified resource before and after the process. Generally if the resource is involved in a series of processes to create it before anything else happens to it, accept / modify is appropriate. If the input resource and the output resource need to be identified as different resource specifications for any reason, then accept / modify is not appropriate. vf:modify - The identified resource that was accepted into a process appears in the output of that process, with modifications made. Note not all modifications require a physical change, for example quality testing. In all cases though, it matters that the resource has gone through that process, and the stage of the resource (the process specification of the process) is then used as part of the logical identification of the resource when the resource is requested as a process input or for a transfer. vf:combine - A resource is put in a package or a combination resource; the same resource might appear later when it is separated. Examples are packing one or more resources for transportation or storage, or creation of a kit resource. The combined resource is still identified in the system, but is containedIn the package or combination resource, which would be usually produced in the process. When a resource is containedIn another resource, it is not available on its own. Note that packing materials or containers which will continue to have their own identity later are also combined in the process; if not, they can be consumed. vf:separate - A resource is removed from a package or a combination resource; the same resource appeared as input earlier in this or another process when it was combined. When the resource is separated, it loses its containedIn reference, and becomes available on its own. vf:deliver-service - A new service is produced and delivered as output of a process. A service implies that an agent actively receives the service at the same time as it is delivered. Services are not tangible, so would not create or increment an inventoried resource. Services are perhaps most often delivered directly to an agent. But unlike other actions, sometimes the service is at the same time being delivered into another documented process, in which case it can be output from a process and input to another, at the same time. vf:transfer-all-rights - This action gives full (in the human realm) rights and responsibilities to another agent, without transferring physical custody. People might call this \"ownership\"; or it might be considered \"stewardship\" or similar. This occurs instantaneously, and does not involve documented physical transfer. It is often triggeredBy a transfer of custody, for example shipping or receipt of goods. vf:transfer-custody - This action gives physical custody and control of a resource to another agent, without full rights. The physical custodian often has responsibilities associated with custody, however. Examples where transfer of custody is useful are loaning a resource to another agent, or when a resource is transferred to have a service performed by another agent, like transportation or repair. vf:transfer - This action gives full (human) rights and responsibilities plus physical custody, combining the last two actions. vf:move - move changes the location, and possibly the identifier, if location is part of the logical identifier, of a resource with no transfer of agent rights or custodianship. vf:raise - This action adjusts a quantity up, used either when a computer system is brought up and existing resources must be entered with a beginning balance, or when an inventory count in the real world shows that there the quantity in the computer system is too low. When it is known how a resource was obtained, it is preferable to use the real action. vf:lower - This action adjusts a quantity down, based on an inventory count in the real world showing that the quantity in the computer system is too high. When it is known how a resource was lowered, it is preferable to use the real action.","title":"Action Definitions"},{"location":"concepts/actions/#action-behaviors","text":"Action Accounting effect Onhand effect I/O Other effect Pairs with produce Increment Increment Output primaryAccountable(5) N/A consume Decrement Decrement Input N/A N/A use No effect(1) No effect(1) Input N/A N/A work No effect(1) No effect(1) Input N/A N/A cite No effect No effect Input N/A N/A deliver-service No effect No effect Output(3) N/A N/A pickup No effect No effect Input N/A dropoff dropoff No effect No effect Output currentLocation(4) pickup accept No effect Decrement Input N/A modify modify No effect Increment Output N/A accept combine No effect Decrement Input add containedIn separate separate No effect Increment Output remove containedIn combine transfer-custody No effect Decr+Incr(2) N/A currentLocation(4) N/A transfer-all-rights Decr+Incr(2) No effect N/A primaryAccountable(5) N/A transfer Decr+Incr(2) Decr+Incr(2) N/A currentLocation(4), primaryAccountable(5) N/A move Decr+Incr(2) Decr+Incr(2) N/A currentLocation(4) N/A raise Increment Increment N/A primaryAccountable(5) N/A lower Decrement Decrement N/A N/A N/A We have defined a core set of actions, but expect that this will be extended with some others. If extended, they should be defined as part of this or another formal vocabulary so that all can use them and assume the same meaning. However, the effects of the actions are included in the data definitions so that computer systems can be \"data driven\" in their effects on resources if desired. (1) The actions use and work are time-based actions, either with or without an explicit schedule. If the schedule is documented as part of the economic resource, then those economic events could decrement that schedule, although not the \"current quantity\" of the resource. (2) The transfer actions and move can optionally define a second identified resource on the receiver side. (3) The action deliver-service can sometimes be an input to another process, at the same time as it is an output from a process. This is because services imply delivery as they are created. (4) These actions should update the resource's currentLocation if toLocation is provided on the event. For dropoff it is the resource which is affected by the event, for all others it is the to resource, the resource that results from the event. For the latter, the resource and to resource may be the same resource, depending on how resources are identified in the user community. (5) These actions should update the resource's primaryAccountable agent using the event's receiver agent. For produce , the resource is the one that is created by the event, if one is created. For the transfers, the resource updated is the toResourceInventoriedAs . For raise , this only applies if a new resource is created, not if an existing resource is raised.","title":"Action Behaviors"},{"location":"concepts/agents/","text":"The agent vocabulary describes networks of people, organizations and networks, constructed using a simple but powerful model of agents and their relationships. Agents Agents can be individual persons or organizations. Organizations include formal or informal organizations of all kinds. (The concept of \"Agent\" will in the future probably include \"ecological agents\", as we explore with others how to use REA for ecological accounting to combat climate change. The concept of \"Agent\" could also in the future include software agents, but this is controversial.) In Valueflows, we are talking about economic agents, agents who can create or exchange value, and make agreements with each other - who have economic agency. But we want to re-use existing vocabularies for commonly defined things (including foaf:Agent, foaf:Person, org:Organization), so we have elected to use those as much as possible here, even though they are sometimes more broadly defined. But also, the broader definitions will help map and integrate technologies across the web. If people want to define types of organizations (like cooperative, corporation, network, community, etc.) we provide a classification property which people can define as they wish. Agent Relationships Agent relationships have many nuances, thus VF provides the ability to define one's own kinds of relationships. For example people might \"participate\" with an organization by means of agreeing to terms and conditions. Or people might have more active \"membership\" in a group or organization. Or people might consider themselves members but want a more independently flavored term such as \"affiliates\". A relationship can be direct, like \"steward\", or more like a role, for example \"grower\" or \"harvester\" for a food network. Relationships can also include roles like \"sub-organization\" or \"trading partner\". There are a number of useful Properties in existing vocabularies that can be used. Or people can create their own as needed. Relationships have direction: For example, in \"Michael is a member of Enspiral\", Michael is the subject and Enspiral is the object. In this case the inverse is also valid, \"Enspiral has member Michael\". In VF, we consider this to be one relationship. One directional relationships like \"follows\" are also supported. Relationships can be in a scope (or not): For example, \"Kathy is mentor of Sam, in the scope of Enspiral.\" Agent Philosophies We also want to acknowledge that some people prefer to think of themselves as independent and decentralized agents who interact in different places in the economy as individuals, and some people think of themselves more as members of different groups and networks and communities and interact more in the context of those groups and networks and communities. Many experiments are going on as people strive towards another economy. We want to support all these experiments, so want to support both of these ways of thinking and organizing ourselves. The agent vocabulary is very flexible, and will support these as well as current conventional structures. So, if people want to form a group that has agency as a group, fine. If people want to consider that their group does not have agency as a group, also fine. Not all groups, and especially not all networks, will be economic Agents in Valueflows. That depends on the agreement of the people in the group, and what the group needs to do as-a-group. For example, does the group need to make agreements as-a-group with other groups? Or exchange resources with other agents as-a-group? Note that within the vocabulary, network formations will appear, as agents have economic interactions with each other in the world. This does not mean that the network is necessarily a Valueflows Agent, but it could be, if the participants want.","title":"Agents"},{"location":"concepts/agents/#agents","text":"Agents can be individual persons or organizations. Organizations include formal or informal organizations of all kinds. (The concept of \"Agent\" will in the future probably include \"ecological agents\", as we explore with others how to use REA for ecological accounting to combat climate change. The concept of \"Agent\" could also in the future include software agents, but this is controversial.) In Valueflows, we are talking about economic agents, agents who can create or exchange value, and make agreements with each other - who have economic agency. But we want to re-use existing vocabularies for commonly defined things (including foaf:Agent, foaf:Person, org:Organization), so we have elected to use those as much as possible here, even though they are sometimes more broadly defined. But also, the broader definitions will help map and integrate technologies across the web. If people want to define types of organizations (like cooperative, corporation, network, community, etc.) we provide a classification property which people can define as they wish.","title":"Agents"},{"location":"concepts/agents/#agent-relationships","text":"Agent relationships have many nuances, thus VF provides the ability to define one's own kinds of relationships. For example people might \"participate\" with an organization by means of agreeing to terms and conditions. Or people might have more active \"membership\" in a group or organization. Or people might consider themselves members but want a more independently flavored term such as \"affiliates\". A relationship can be direct, like \"steward\", or more like a role, for example \"grower\" or \"harvester\" for a food network. Relationships can also include roles like \"sub-organization\" or \"trading partner\". There are a number of useful Properties in existing vocabularies that can be used. Or people can create their own as needed. Relationships have direction: For example, in \"Michael is a member of Enspiral\", Michael is the subject and Enspiral is the object. In this case the inverse is also valid, \"Enspiral has member Michael\". In VF, we consider this to be one relationship. One directional relationships like \"follows\" are also supported. Relationships can be in a scope (or not): For example, \"Kathy is mentor of Sam, in the scope of Enspiral.\"","title":"Agent Relationships"},{"location":"concepts/agents/#agent-philosophies","text":"We also want to acknowledge that some people prefer to think of themselves as independent and decentralized agents who interact in different places in the economy as individuals, and some people think of themselves more as members of different groups and networks and communities and interact more in the context of those groups and networks and communities. Many experiments are going on as people strive towards another economy. We want to support all these experiments, so want to support both of these ways of thinking and organizing ourselves. The agent vocabulary is very flexible, and will support these as well as current conventional structures. So, if people want to form a group that has agency as a group, fine. If people want to consider that their group does not have agency as a group, also fine. Not all groups, and especially not all networks, will be economic Agents in Valueflows. That depends on the agreement of the people in the group, and what the group needs to do as-a-group. For example, does the group need to make agreements as-a-group with other groups? Or exchange resources with other agents as-a-group? Note that within the vocabulary, network formations will appear, as agents have economic interactions with each other in the world. This does not mean that the network is necessarily a Valueflows Agent, but it could be, if the participants want.","title":"Agent Philosophies"},{"location":"concepts/cfa/","text":"Conversation for Action Exchanges may use any of several technical protocols, but the main human-level protocol has been in use for many years. It may be called Offer-Acceptance or Conversation for Action . It may include several preparation stages for agents who have never exchanged anything before, or it may be really simple if they exchange resources all the time. ISO 15944-1 lists 5 phases: Planning: In the Planning Phase, both the buyer and seller are engaged in activities to decide what action to take for acquiring or selling a good, service, and/or right. Identification: The Identification Phase pertains to all those actions or events whereby data is interchanged among potential buyers and sellers in order to establish a one-to-one linkage. Negotiation: The Negotiation Phase pertains to all those actions and events involving the exchange of information following the Identification Phase where a potential buyer and seller have (1) identified the nature of good(s) and/or service(s) to be provided; and, (2) identified each other at a level of certainty. The process of negotiation is directed at achieving an explicit, mutually understood, and agreed upon goal of a business collaboration and associated terms and conditions. This may include such things as the detailed specification of the good, service, and/or right, quantity, pricing, after sales servicing, delivery requirements, financing, use of agents and/or third parties, etc. Actualization: The Actualization Phase pertains to all activities or events necessary for the execution of the results of the negotiation for an actual business transaction. Normally the seller produces or assembles the goods, starts providing the services, prepares and completes the delivery of good, service, and/or right, etc., to the buyer as agreed according to the terms and conditions agreed upon at the termination of the Negotiation Phase. Likewise, the buyer begins the transfer of acceptable equivalent value, usually in money, to the seller providing the good, service, and/or right. Post-Actualization: The Post-Actualization Phase includes all of the activities or events and associated exchanges of information that occur between the buyer and the seller after the agreed upon good, service, and/or right is deemed to have been delivered. These can be activities pertaining to warranty coverage, service after sales, post-sales financing such as monthly payments or other financial arrangements, consumer complaint handling and redress or some general post-actualization relationships between buyer and seller. Offers and Wants are matched in the Planning and Identification Phases. Conversation for Action covers Negotiation, Actualization and some of Post-Actualization.","title":"Conversations"},{"location":"concepts/cfa/#conversation-for-action","text":"Exchanges may use any of several technical protocols, but the main human-level protocol has been in use for many years. It may be called Offer-Acceptance or Conversation for Action . It may include several preparation stages for agents who have never exchanged anything before, or it may be really simple if they exchange resources all the time. ISO 15944-1 lists 5 phases: Planning: In the Planning Phase, both the buyer and seller are engaged in activities to decide what action to take for acquiring or selling a good, service, and/or right. Identification: The Identification Phase pertains to all those actions or events whereby data is interchanged among potential buyers and sellers in order to establish a one-to-one linkage. Negotiation: The Negotiation Phase pertains to all those actions and events involving the exchange of information following the Identification Phase where a potential buyer and seller have (1) identified the nature of good(s) and/or service(s) to be provided; and, (2) identified each other at a level of certainty. The process of negotiation is directed at achieving an explicit, mutually understood, and agreed upon goal of a business collaboration and associated terms and conditions. This may include such things as the detailed specification of the good, service, and/or right, quantity, pricing, after sales servicing, delivery requirements, financing, use of agents and/or third parties, etc. Actualization: The Actualization Phase pertains to all activities or events necessary for the execution of the results of the negotiation for an actual business transaction. Normally the seller produces or assembles the goods, starts providing the services, prepares and completes the delivery of good, service, and/or right, etc., to the buyer as agreed according to the terms and conditions agreed upon at the termination of the Negotiation Phase. Likewise, the buyer begins the transfer of acceptable equivalent value, usually in money, to the seller providing the good, service, and/or right. Post-Actualization: The Post-Actualization Phase includes all of the activities or events and associated exchanges of information that occur between the buyer and the seller after the agreed upon good, service, and/or right is deemed to have been delivered. These can be activities pertaining to warranty coverage, service after sales, post-sales financing such as monthly payments or other financial arrangements, consumer complaint handling and redress or some general post-actualization relationships between buyer and seller. Offers and Wants are matched in the Planning and Identification Phases. Conversation for Action covers Negotiation, Actualization and some of Post-Actualization.","title":"Conversation for Action"},{"location":"concepts/classification/","text":"Types Classification creates references to categories and other classifications of the economic resources and processes, and exchanges. The classifications can be a part of a taxonomy, flat list, tag set, faceted classification scheme, and any other structure desired. Valueflows will not include the structures that the classifications are part of, and assume that is handled outside the VF scope. Classifications can be created by user groups for themselves, or can be existing semantic structures, such as wikidata. Examples Resource Classification Haralson apple - https://www.wikidata.org/wiki/Q3127261 Honda Fit - https://www.wikidata.org/wiki/Q1135125 Transistor - https://www.wikidata.org/wiki/Q5339 Process Classification Transport - https://www.wikidata.org/wiki/Q7590 Packaging - https://www.wikidata.org/wiki/Q29585952 Exchange Classification Trade - https://www.wikidata.org/wiki/Q601401 Barter - https://www.wikidata.org/wiki/Q484830 Gift - https://www.wikidata.org/wiki/Q184303","title":"Classification"},{"location":"concepts/classification/#types","text":"Classification creates references to categories and other classifications of the economic resources and processes, and exchanges. The classifications can be a part of a taxonomy, flat list, tag set, faceted classification scheme, and any other structure desired. Valueflows will not include the structures that the classifications are part of, and assume that is handled outside the VF scope. Classifications can be created by user groups for themselves, or can be existing semantic structures, such as wikidata.","title":"Types"},{"location":"concepts/classification/#examples","text":"","title":"Examples"},{"location":"concepts/classification/#resource-classification","text":"Haralson apple - https://www.wikidata.org/wiki/Q3127261 Honda Fit - https://www.wikidata.org/wiki/Q1135125 Transistor - https://www.wikidata.org/wiki/Q5339","title":"Resource Classification"},{"location":"concepts/classification/#process-classification","text":"Transport - https://www.wikidata.org/wiki/Q7590 Packaging - https://www.wikidata.org/wiki/Q29585952","title":"Process Classification"},{"location":"concepts/classification/#exchange-classification","text":"Trade - https://www.wikidata.org/wiki/Q601401 Barter - https://www.wikidata.org/wiki/Q484830 Gift - https://www.wikidata.org/wiki/Q184303","title":"Exchange Classification"},{"location":"concepts/estimates/","text":"Scenarios The Processes section explains processes at their basic level, starting with operational observable processes. The Operational Planning section explains how to group those processes into a scheduled plan at an operational level. This section explains how to use the same process and plan pattern to represent higher level requirements, those that are not (yet) actually scheduled. We are calling those Scenarios. Processes can be composed into scenarios at any level. Like scheduled plans, these scenarios can be created from recipes. Like scheduled plans, they have inputs and outputs (usually intents, sometimes sumarized economic events), derived from nested processes. Some examples we have seen: Plan Refinement . Before the final operation plan is set, sometimes it is useful to make more general plans, which then can be refined further, ending with the scheduled plan. These plans are estimates made using \"planning horizons\", which are defined durations starting from the planning date - for example year then month, then blending into the actual scheduled plans. Budgeting . A Budget is a summary of input requirements for a scope for a time interval (sometimes corresponding to the organization's \"accounting period\"), often yearly, as a higher level of planning. Budgets are often created to support a specific goal. Budgets are usually created before operational planning is done, and are estimates. Often a forecast is made consisting of desired or expected deliverables for the period, sometimes using past event history as a starting point. This would create a demand-driven budget. Or sometimes a supply-driven budget makes more sense, for example when all of the producing capacity will be used in any case, and then the outputs will be constrained by the inputs available. In any case, the budgeted inputs and outputs are kept, as they are often compared to actuals later. The budget itself could be represented as a Process, and it could nest line item processes based on type of resource or process. A budget is usually for one scope. Comparative Analysis . Often different plans will be created for the same basic data set. One example is when doing risk analysis or other comparative analysis. Different assumptions might skew a plan in different useful directions, for example a \"normal scenario\" and a \"worst case scenario\". Network Analysis . This is an analytical look at all or some of the actual and/or potential resource flows for a scope, often a community or region. This can be modeled using higher level types of processes and types of resources, and could include intents or economic events. One use of this kind of analysis is to identify gaps and opportunities to keep resources circulating in a community to improve economic health and resilience. Agents can define different scenarios that they want to use. So for example, if a group does yearly budgets, each budget for different years could reference the same \"yearly budget\" scenario definition. The model itself is quite flexible, and we expect there will be more uses for it, all using the basic input-process-output structure with resource flows connecting them, contained by a scenario. Connecting Plans and Scenarios Plans do not need to be directly connected to Scenarios, although they can be. If comparisons are needed, often the time periods and scope are all that is needed. In addition, if resource specifications and/or process specifications are part of a classification taxonomy, that can be used for connecting the higher to lower perspectives. For example, the plan for carrots could be aggregated into the higher level plan for all vegetables. Often Plans do not fit cleanly within Scenarios, because plans tend to be for real production when it happens, which usually does not fit nicely into accounting periods or planning horizons. Seasonal food production can be an exception to this. Scenarios can be refinements of other scenarios. For example, a group might do scenarios for yearly estimates, then refine those for each month, before creating operational plans which will be executed. If other requirements arise, we are happy to add connections as needed to the vocabulary.","title":"Budgeting and Analysis"},{"location":"concepts/estimates/#scenarios","text":"The Processes section explains processes at their basic level, starting with operational observable processes. The Operational Planning section explains how to group those processes into a scheduled plan at an operational level. This section explains how to use the same process and plan pattern to represent higher level requirements, those that are not (yet) actually scheduled. We are calling those Scenarios. Processes can be composed into scenarios at any level. Like scheduled plans, these scenarios can be created from recipes. Like scheduled plans, they have inputs and outputs (usually intents, sometimes sumarized economic events), derived from nested processes. Some examples we have seen: Plan Refinement . Before the final operation plan is set, sometimes it is useful to make more general plans, which then can be refined further, ending with the scheduled plan. These plans are estimates made using \"planning horizons\", which are defined durations starting from the planning date - for example year then month, then blending into the actual scheduled plans. Budgeting . A Budget is a summary of input requirements for a scope for a time interval (sometimes corresponding to the organization's \"accounting period\"), often yearly, as a higher level of planning. Budgets are often created to support a specific goal. Budgets are usually created before operational planning is done, and are estimates. Often a forecast is made consisting of desired or expected deliverables for the period, sometimes using past event history as a starting point. This would create a demand-driven budget. Or sometimes a supply-driven budget makes more sense, for example when all of the producing capacity will be used in any case, and then the outputs will be constrained by the inputs available. In any case, the budgeted inputs and outputs are kept, as they are often compared to actuals later. The budget itself could be represented as a Process, and it could nest line item processes based on type of resource or process. A budget is usually for one scope. Comparative Analysis . Often different plans will be created for the same basic data set. One example is when doing risk analysis or other comparative analysis. Different assumptions might skew a plan in different useful directions, for example a \"normal scenario\" and a \"worst case scenario\". Network Analysis . This is an analytical look at all or some of the actual and/or potential resource flows for a scope, often a community or region. This can be modeled using higher level types of processes and types of resources, and could include intents or economic events. One use of this kind of analysis is to identify gaps and opportunities to keep resources circulating in a community to improve economic health and resilience. Agents can define different scenarios that they want to use. So for example, if a group does yearly budgets, each budget for different years could reference the same \"yearly budget\" scenario definition. The model itself is quite flexible, and we expect there will be more uses for it, all using the basic input-process-output structure with resource flows connecting them, contained by a scenario.","title":"Scenarios"},{"location":"concepts/estimates/#connecting-plans-and-scenarios","text":"Plans do not need to be directly connected to Scenarios, although they can be. If comparisons are needed, often the time periods and scope are all that is needed. In addition, if resource specifications and/or process specifications are part of a classification taxonomy, that can be used for connecting the higher to lower perspectives. For example, the plan for carrots could be aggregated into the higher level plan for all vegetables. Often Plans do not fit cleanly within Scenarios, because plans tend to be for real production when it happens, which usually does not fit nicely into accounting periods or planning horizons. Seasonal food production can be an exception to this. Scenarios can be refinements of other scenarios. For example, a group might do scenarios for yearly estimates, then refine those for each month, before creating operational plans which will be executed. If other requirements arise, we are happy to add connections as needed to the vocabulary.","title":"Connecting Plans and Scenarios"},{"location":"concepts/exchanges/","text":"The independent viewpoint Here we look at exchanges of resources from an independent or neutral viewpoint (not the viewpoint of one of the Agents in the exchange). For example, from one Agent's viewpoint, the exchange may be a Purchase, from the other Agent's viewpoint, it might be a Sale. From the neutral viewpoint, it is an exchange of resources, with usually at least two flows of resources, from different directions. So for example, the seller might give some goods to the buyer, and the buyer might give some money to the seller. Or in a barter exchange, one agent might give the other some books, and the other agent might compensate with some cookies. Exchange is ubiquitous on the internet today, with offers everywhere. In Valueflows, we track not only the offers and promises, but also the actual flows of resources in networks, in all directions. And we support exchanges that don't involve money as well as those that do. Valueflows enables multilateral exchange agreements as well. Any number of agents can commit to flows where they provide something and flows where they receive something. This way creating a reciprocal cycle in the flows graph. So for example, Alice can provide apples from her orchard to Bob, who can provide accommodation to Claire, who can provide tutoring to Alice's children. Such exchanges can happen in infinite number of possible ways, as long as all agents participating agree on specific reciprocal cycle in the flows graph. We also support non-reciprocal one-way transfers, such as in a gift economy. However, an exchange implies at least two transfers with reciprocity. Exchanges and flows Exchanges as modeled in VF actually relate to flows within agreements, not resources directly. Flows involved in transfers of rights and responsibilities are more obvious. Process related flows can also imply a transfer, and can thus be used as part of an exchange. For example, most timebanks exchange work for credits. The work event can be part of a process that produces something for some other agent. It is also part of an exchange in the timebank. The transfer of credits on the other hand, is not part of any process that creates or transports something, it is merely the timebank recording that one account was decremented and another account was incremented. Exchange of work also happens in open value networks, where people record work events as input to many processes, and then when income is received for outputs of that work, people receive part of that income, in exchange for their work. Another example is when a service is created as an output of a process, where that service delivery event can be considered an implied transfer, and exchanged for some other resource. Agreements Various kinds of agreements between agents often define the rights and responsibilities for economic resources that are transferred. Agreements can reflect any economic paradigm, so make it possible for the Exchange and Transfer vocabulary to work equally well for capitalist businesses, transitional economic interactions, and next economy interactions. Agreements can be of any kind and scope, from an order to a value equation to a larger blanket agreement. Valueflows does not define the detailed internal vocabulary for agreements, but defines optional references to an agreement when it could be useful.","title":"Exchanges"},{"location":"concepts/exchanges/#the-independent-viewpoint","text":"Here we look at exchanges of resources from an independent or neutral viewpoint (not the viewpoint of one of the Agents in the exchange). For example, from one Agent's viewpoint, the exchange may be a Purchase, from the other Agent's viewpoint, it might be a Sale. From the neutral viewpoint, it is an exchange of resources, with usually at least two flows of resources, from different directions. So for example, the seller might give some goods to the buyer, and the buyer might give some money to the seller. Or in a barter exchange, one agent might give the other some books, and the other agent might compensate with some cookies. Exchange is ubiquitous on the internet today, with offers everywhere. In Valueflows, we track not only the offers and promises, but also the actual flows of resources in networks, in all directions. And we support exchanges that don't involve money as well as those that do. Valueflows enables multilateral exchange agreements as well. Any number of agents can commit to flows where they provide something and flows where they receive something. This way creating a reciprocal cycle in the flows graph. So for example, Alice can provide apples from her orchard to Bob, who can provide accommodation to Claire, who can provide tutoring to Alice's children. Such exchanges can happen in infinite number of possible ways, as long as all agents participating agree on specific reciprocal cycle in the flows graph. We also support non-reciprocal one-way transfers, such as in a gift economy. However, an exchange implies at least two transfers with reciprocity.","title":"The independent viewpoint"},{"location":"concepts/exchanges/#exchanges-and-flows","text":"Exchanges as modeled in VF actually relate to flows within agreements, not resources directly. Flows involved in transfers of rights and responsibilities are more obvious. Process related flows can also imply a transfer, and can thus be used as part of an exchange. For example, most timebanks exchange work for credits. The work event can be part of a process that produces something for some other agent. It is also part of an exchange in the timebank. The transfer of credits on the other hand, is not part of any process that creates or transports something, it is merely the timebank recording that one account was decremented and another account was incremented. Exchange of work also happens in open value networks, where people record work events as input to many processes, and then when income is received for outputs of that work, people receive part of that income, in exchange for their work. Another example is when a service is created as an output of a process, where that service delivery event can be considered an implied transfer, and exchanged for some other resource.","title":"Exchanges and flows"},{"location":"concepts/exchanges/#agreements","text":"Various kinds of agreements between agents often define the rights and responsibilities for economic resources that are transferred. Agreements can reflect any economic paradigm, so make it possible for the Exchange and Transfer vocabulary to work equally well for capitalist businesses, transitional economic interactions, and next economy interactions. Agreements can be of any kind and scope, from an order to a value equation to a larger blanket agreement. Valueflows does not define the detailed internal vocabulary for agreements, but defines optional references to an agreement when it could be useful.","title":"Agreements"},{"location":"concepts/flows/","text":"Kinds of Flows Flows are a fundamental construct in the Valueflows ontology. The types of flows form a progression from potential to scheduled to realized: Intents which can lead to Commitments Commitments which can lead to Economic Events (or Intents can lead directly to Economic Events) Intent Intents describe potential future events which have not been agreed to by other agents, such as offers and requests. Intents are often used for discovering another agent to participate in a desired event. On the process side, for example, planned work could be an Intent, but planned work that some agent committed to is a Commitment. Commitment Commitments describe potential future events which the involved agents have already agreed to pursue. Commitments can be considered contractual promises from one agent to another. Commitments can be thought of as plans for Economic Events, and Economic Events can fulfill Commitments. Commitments can satisfy Intents. Economic Event Economic Events describe past events, something observed, never some potential future event. They can fulfill Commitments or satisfy Intents (when there is no Commitment). Claim Claims resemble Commitments, but are initiated by the receiver, not the provider. An Economic Event can trigger a reciprocal Claim. Claims sometimes do not have to actually be saved, often they can be implied from an Economic Event and an Agreement. For example, if Alice has agreed to sell Bob some carrots for $2, then if Alice delivers the carrots to Bob, she has an implicit claim for $2 from Bob. Recipe Flow Recipes are used to create plans, and the Recipe Flow can create a corresponding Intent or a Commitment in a Plan, depending on if all the agents are known and the level of certainty of the planning. Timeline, plans and observations The figure below shows that Economic Events have to be observed and for that reason only appear as records of the past. Future plans get represented with Intents and Commitments. Matching Intents Often agents will start their plans independently and record their initial intents. Later once they make a Commitment with another agent, it will represent a specific shared part of their plans. For that reason any Commitment can result in Satisfaction of the providing agent's Intent as well as Satisfaction of the receiving agent's Intent. Granularity Intents, Commitments, and Economic Events can occur at any granularity that is needed or for which data can be obtained. So they primarily are used for all operational needs, but can also be used at higher levels for budgeting for organizations, analytical and high level planning needs for communities or regions, etc. Actions All types of flows use the same set of actions, which define what the flow does and how it behaves in relation to resources. You can find detailed documentation on actions in the next section . Quantities and Times Quantities are used for counting, such as: Exchange/transfer Resource increment and decrement Recipes, how much or many goes into and out of a transformation process Times are used for coordination and scheduling, such as: Calendar availability Planned timelines They can be used together for analysis and reporting, such as: Accounting totals (quantity) within accounting period (time) Quantities can be any needed unit of measure, including counts, volumes, weights, etc. Time can be a beginning/end time (an interval), or a point in time, or a due date. The flows require at least one of those. If a point in time is recorded, an application should return that time as the beginning and end time. Note that recipes may need to scale both quantities and calendar times when used to create a plan. Sometimes a quantity is expressed in time-based units, like \"I worked 6 hours\", or \"we used this machine for 8 hours\". These flows also will have a related time, like \"I worked from 10am to 4pm\", or \"we used this machine from 8am to 4pm\". In these examples, the quantity is used for accounting figures, exchange, recipes. The time is used to schedule and coordinate the work or machine usage. Sometimes a situation may call for a \"compound quantity\", like \"Number-per-Year\". Display note: The OM2 ontology defines a Unit called one that is used for one-dimensional units. This is confusing for many economic applications, where something like each would be used, or nothing at all. We recommend that user interfaces handle this by not displaying the unit one where it would be confusing, or substituting a more applicable name.","title":"Flows"},{"location":"concepts/flows/#kinds-of-flows","text":"Flows are a fundamental construct in the Valueflows ontology. The types of flows form a progression from potential to scheduled to realized: Intents which can lead to Commitments Commitments which can lead to Economic Events (or Intents can lead directly to Economic Events)","title":"Kinds of Flows"},{"location":"concepts/flows/#intent","text":"Intents describe potential future events which have not been agreed to by other agents, such as offers and requests. Intents are often used for discovering another agent to participate in a desired event. On the process side, for example, planned work could be an Intent, but planned work that some agent committed to is a Commitment.","title":"Intent"},{"location":"concepts/flows/#commitment","text":"Commitments describe potential future events which the involved agents have already agreed to pursue. Commitments can be considered contractual promises from one agent to another. Commitments can be thought of as plans for Economic Events, and Economic Events can fulfill Commitments. Commitments can satisfy Intents.","title":"Commitment"},{"location":"concepts/flows/#economic-event","text":"Economic Events describe past events, something observed, never some potential future event. They can fulfill Commitments or satisfy Intents (when there is no Commitment).","title":"Economic Event"},{"location":"concepts/flows/#claim","text":"Claims resemble Commitments, but are initiated by the receiver, not the provider. An Economic Event can trigger a reciprocal Claim. Claims sometimes do not have to actually be saved, often they can be implied from an Economic Event and an Agreement. For example, if Alice has agreed to sell Bob some carrots for $2, then if Alice delivers the carrots to Bob, she has an implicit claim for $2 from Bob.","title":"Claim"},{"location":"concepts/flows/#recipe-flow","text":"Recipes are used to create plans, and the Recipe Flow can create a corresponding Intent or a Commitment in a Plan, depending on if all the agents are known and the level of certainty of the planning.","title":"Recipe Flow"},{"location":"concepts/flows/#timeline-plans-and-observations","text":"The figure below shows that Economic Events have to be observed and for that reason only appear as records of the past. Future plans get represented with Intents and Commitments.","title":"Timeline, plans and observations"},{"location":"concepts/flows/#matching-intents","text":"Often agents will start their plans independently and record their initial intents. Later once they make a Commitment with another agent, it will represent a specific shared part of their plans. For that reason any Commitment can result in Satisfaction of the providing agent's Intent as well as Satisfaction of the receiving agent's Intent.","title":"Matching Intents"},{"location":"concepts/flows/#granularity","text":"Intents, Commitments, and Economic Events can occur at any granularity that is needed or for which data can be obtained. So they primarily are used for all operational needs, but can also be used at higher levels for budgeting for organizations, analytical and high level planning needs for communities or regions, etc.","title":"Granularity"},{"location":"concepts/flows/#actions","text":"All types of flows use the same set of actions, which define what the flow does and how it behaves in relation to resources. You can find detailed documentation on actions in the next section .","title":"Actions"},{"location":"concepts/flows/#quantities-and-times","text":"Quantities are used for counting, such as: Exchange/transfer Resource increment and decrement Recipes, how much or many goes into and out of a transformation process Times are used for coordination and scheduling, such as: Calendar availability Planned timelines They can be used together for analysis and reporting, such as: Accounting totals (quantity) within accounting period (time) Quantities can be any needed unit of measure, including counts, volumes, weights, etc. Time can be a beginning/end time (an interval), or a point in time, or a due date. The flows require at least one of those. If a point in time is recorded, an application should return that time as the beginning and end time. Note that recipes may need to scale both quantities and calendar times when used to create a plan. Sometimes a quantity is expressed in time-based units, like \"I worked 6 hours\", or \"we used this machine for 8 hours\". These flows also will have a related time, like \"I worked from 10am to 4pm\", or \"we used this machine from 8am to 4pm\". In these examples, the quantity is used for accounting figures, exchange, recipes. The time is used to schedule and coordinate the work or machine usage. Sometimes a situation may call for a \"compound quantity\", like \"Number-per-Year\". Display note: The OM2 ontology defines a Unit called one that is used for one-dimensional units. This is confusing for many economic applications, where something like each would be used, or nothing at all. We recommend that user interfaces handle this by not displaying the unit one where it would be confusing, or substituting a more applicable name.","title":"Quantities and Times"},{"location":"concepts/plan/","text":"Coordinating work An operational plan is a schedule of related operational processes, that constitute a body of scheduled work with defined deliverable(s). A plan normally contains one or more process resource flows, one for each deliverable. A plan can cover more than one scope , if the different scopes are tightly coordinated with pre-agreed rules, for example sub-organizations of a main organization, or an ongoing supply chain. If not, or if the agents prefer, then requirements from one scope could become deliverables for another scope's plan. Different batch sizes could trigger a new plan for inputs to the main deliverable too. But all of this does not affect the vocabulary or model. Plans can relate to each other through resource flows just like processes. Plans are used for understanding and coordinating what needs to happen for specific outputs. The size and complexity of a plan is up to the people who are planning and coordinating the work. A plan can be generated from a recipe , or created without one. Some examples: A communications group creates articles for a larger group. The communications group needs some of their articles to be translated into various languages, by another group within the larger group. Both the creation of an article and its translation could be part of the same plan. An organization decides to mount a campaign for some objective. There might be many different deliverables: a fundraising website, some brochures, some events, etc. All of these can be part of the same plan for easier coordination. For example, a campaign logo could be used in all of these separate outputs. An organization gets an order for some things they produce. They can create a plan to produce to that order, including all line items. Or they can gather all the orders for a time period for an item and produce to that as a larger plan. An organization produces a standard batch size to stock, in anticipation of future orders. Processes nested in a Plan When processes are \"nested\", it is not random, nor based on a taxonomy. It is based on what processes are actually part of the plan. And not all the inputs and outputs of nested processes are considered inputs and outputs of the plan, since some are both produced and consumed within the plan. In the following simplified example, the flows between plant/weed and weed/harvest start and end inside the nest, and so are not inputs to, or outputs of, the plan. There are some common situations for nested processes that will not be as simple as the above diagram. Thes include: Action makes a difference. When a piece of equipment or tool is \"used\", it is not gone at the end of the nesting process. But if it is managed as a time-based resource with a calendar, some calendar duration is in fact consumed. Or if a citable resource is created and then cited inside, it is also still there at the end of the nesting process. Batch or lot size makes a difference. Suppose you have a requirement for 5 of some assembled item, and 4 of some input component are needed to make each item, 20 components in all. But the minimum batch size for the component is 100. Then 80 of the components will be left in inventory at the end of the nesting process, and that 80 will also an output of the outer process. Planning from a Recipe Plans can be generated from a recipe by scaling the recipe according to the demanded quantity of the end outputs. This is called a \"demand explosion\". The generation might take into account current inventories, batch sizes, etc., so it is not necessarily a \"pure\" reflection of the recipe. In addition, often plans are tweaked after generation from a recipe, depending on how firm and exact the recipe is. A manufacturing recipe might be more exact than a recipe for a more general business process. For these reasons, a plans is decoupled from the recipe that generated it in the vocabulary. It maintains only the references to the resource and process specifications that were supplied from the recipe.","title":"Operational Planning"},{"location":"concepts/plan/#coordinating-work","text":"An operational plan is a schedule of related operational processes, that constitute a body of scheduled work with defined deliverable(s). A plan normally contains one or more process resource flows, one for each deliverable. A plan can cover more than one scope , if the different scopes are tightly coordinated with pre-agreed rules, for example sub-organizations of a main organization, or an ongoing supply chain. If not, or if the agents prefer, then requirements from one scope could become deliverables for another scope's plan. Different batch sizes could trigger a new plan for inputs to the main deliverable too. But all of this does not affect the vocabulary or model. Plans can relate to each other through resource flows just like processes. Plans are used for understanding and coordinating what needs to happen for specific outputs. The size and complexity of a plan is up to the people who are planning and coordinating the work. A plan can be generated from a recipe , or created without one. Some examples: A communications group creates articles for a larger group. The communications group needs some of their articles to be translated into various languages, by another group within the larger group. Both the creation of an article and its translation could be part of the same plan. An organization decides to mount a campaign for some objective. There might be many different deliverables: a fundraising website, some brochures, some events, etc. All of these can be part of the same plan for easier coordination. For example, a campaign logo could be used in all of these separate outputs. An organization gets an order for some things they produce. They can create a plan to produce to that order, including all line items. Or they can gather all the orders for a time period for an item and produce to that as a larger plan. An organization produces a standard batch size to stock, in anticipation of future orders.","title":"Coordinating work"},{"location":"concepts/plan/#processes-nested-in-a-plan","text":"When processes are \"nested\", it is not random, nor based on a taxonomy. It is based on what processes are actually part of the plan. And not all the inputs and outputs of nested processes are considered inputs and outputs of the plan, since some are both produced and consumed within the plan. In the following simplified example, the flows between plant/weed and weed/harvest start and end inside the nest, and so are not inputs to, or outputs of, the plan. There are some common situations for nested processes that will not be as simple as the above diagram. Thes include: Action makes a difference. When a piece of equipment or tool is \"used\", it is not gone at the end of the nesting process. But if it is managed as a time-based resource with a calendar, some calendar duration is in fact consumed. Or if a citable resource is created and then cited inside, it is also still there at the end of the nesting process. Batch or lot size makes a difference. Suppose you have a requirement for 5 of some assembled item, and 4 of some input component are needed to make each item, 20 components in all. But the minimum batch size for the component is 100. Then 80 of the components will be left in inventory at the end of the nesting process, and that 80 will also an output of the outer process.","title":"Processes nested in a Plan"},{"location":"concepts/plan/#planning-from-a-recipe","text":"Plans can be generated from a recipe by scaling the recipe according to the demanded quantity of the end outputs. This is called a \"demand explosion\". The generation might take into account current inventories, batch sizes, etc., so it is not necessarily a \"pure\" reflection of the recipe. In addition, often plans are tweaked after generation from a recipe, depending on how firm and exact the recipe is. A manufacturing recipe might be more exact than a recipe for a more general business process. For these reasons, a plans is decoupled from the recipe that generated it in the vocabulary. It maintains only the references to the resource and process specifications that were supplied from the recipe.","title":"Planning from a Recipe"},{"location":"concepts/processes/","text":"Processes By Process, we mean an activity that transforms inputs into outputs. The outputs might then become inputs to other processes, forming networks and chains. Those chains may be circular, where an output from one process becomes an input to another process that occurred previously in the same chain. For example: a farming process takes compost, soil, seeds, water and human and mechanical work as inputs, and transforms them into grains, nuts, fruit, and vegetables. Those ingredients may go to kitchens that create dinners for people to eat. Some of those ingredients may be pared off in preparation, or spoil, or be left on plates. Those leftovers go into compost, which starts the process chain over from the beginning. Or for a bad example: a CAFO (Confined Animal Feeding Operation) produces a lot of manure. They put manure into big lagoons, which drain into the water table, and come back up in people's drinking water, causing diseases, for which the people become inputs to hospital processes. One of the inputs to the CAFO process is antibiotics. The animals are filled with antibiotics because they get sick in the CAFO environment. And the antibiotics are also an output, mixed in with the manure and meat. The antibiotics then breed resistant bacteria, which end up in the people, and send them to the hospital, and then kill the people, because the common antibiotics no longer work. And the resistant bacteria remain in the hospital to kill other people. Connected processes enable us to see cause and effect, if we want. Below is a view of processes, which occur in resource flow networks, and live in three layers: Knowledge, which describe how processes work. Plans, which describe processes which are intended to happen. And Observation, which is a record of processes that have already happened. Here is a specific example:","title":"Processes"},{"location":"concepts/processes/#processes","text":"By Process, we mean an activity that transforms inputs into outputs. The outputs might then become inputs to other processes, forming networks and chains. Those chains may be circular, where an output from one process becomes an input to another process that occurred previously in the same chain. For example: a farming process takes compost, soil, seeds, water and human and mechanical work as inputs, and transforms them into grains, nuts, fruit, and vegetables. Those ingredients may go to kitchens that create dinners for people to eat. Some of those ingredients may be pared off in preparation, or spoil, or be left on plates. Those leftovers go into compost, which starts the process chain over from the beginning. Or for a bad example: a CAFO (Confined Animal Feeding Operation) produces a lot of manure. They put manure into big lagoons, which drain into the water table, and come back up in people's drinking water, causing diseases, for which the people become inputs to hospital processes. One of the inputs to the CAFO process is antibiotics. The animals are filled with antibiotics because they get sick in the CAFO environment. And the antibiotics are also an output, mixed in with the manure and meat. The antibiotics then breed resistant bacteria, which end up in the people, and send them to the hospital, and then kill the people, because the common antibiotics no longer work. And the resistant bacteria remain in the hospital to kill other people. Connected processes enable us to see cause and effect, if we want. Below is a view of processes, which occur in resource flow networks, and live in three layers: Knowledge, which describe how processes work. Plans, which describe processes which are intended to happen. And Observation, which is a record of processes that have already happened. Here is a specific example:","title":"Processes"},{"location":"concepts/proposals/","text":"Proposals Proposals refer to published requests or offers (Intents), sometimes with what is expected in return. Agreements, which are committed to by agents, can evolve from proposals, or be entered into without proposals. Proposals are everywhere in advertising. But we see many groups posting proposals that are different from commercial advertisements or e-commerce offers. Proposals can stay directed to broad or specific audience . In the broadest case, they stay available for anyone (public proposals). In the most narrow case, the stay available only for specific agent. In between those two extremes a whole spectrum exists. For example two distinct proposals can exist on providing particular product or service - one for club members and one for general public etc. Proposals may be specific or more general, often not commercial at all, expressed not in identified products but in classifications and text. But they want to find each other. The offers want to find the matching requests. The requests want to find the matching offers. When they find their match, those with the matching offer and request enter into a conversation for action which might result in an agreement. A proposal to do something might enter into conversation for action which might result in commitments for a process. This may lead to more and better cycles of engagement:","title":"Proposals"},{"location":"concepts/proposals/#proposals","text":"Proposals refer to published requests or offers (Intents), sometimes with what is expected in return. Agreements, which are committed to by agents, can evolve from proposals, or be entered into without proposals. Proposals are everywhere in advertising. But we see many groups posting proposals that are different from commercial advertisements or e-commerce offers. Proposals can stay directed to broad or specific audience . In the broadest case, they stay available for anyone (public proposals). In the most narrow case, the stay available only for specific agent. In between those two extremes a whole spectrum exists. For example two distinct proposals can exist on providing particular product or service - one for club members and one for general public etc. Proposals may be specific or more general, often not commercial at all, expressed not in identified products but in classifications and text. But they want to find each other. The offers want to find the matching requests. The requests want to find the matching offers. When they find their match, those with the matching offer and request enter into a conversation for action which might result in an agreement. A proposal to do something might enter into conversation for action which might result in commitments for a process. This may lead to more and better cycles of engagement:","title":"Proposals"},{"location":"concepts/recipes/","text":"Not just for cooking Recipes are for: documenting how to do something, generating plans for people to do it together, providing signals for coordinating their work. Recipes contain all the info required to create a resource or provide a service. In ERP (Enterprise Resource Planning) terms, it\u2019s a combination of bills of material and routings and suppliers. Recipe patterns Recipe patterns can be used alone, or mixed and matched in a recipe: Manufacturing pattern : assemble or transform input resources into different output resources. This combines bills of material, processing instructions (routings), other inputs like labor and equipment requirements, and possible suppliers for the inputs. They are structured like an upside down tree. The manufacturing pattern creates recursive structures. In other words, if an input component has a recipe itself, that recipe will be incorporated into its parent, so you can view a processing tree from parents through children unto many generations. For example: Assemble a robot from metal, wires, computer chips, software, etc. Bake bread from flour, yeast, water, etc., using an oven. Workflow pattern : change the same resource into a different stage of the same resource. This describes a sequence of processes used to complete work on one resource. They create a series of stages that one resource will go through until it is finished. For example: Translate a source document, edit the translation, format for publication, and publish. Repair a bike. Do quality testing on something that was created using the manufacturing pattern. The examples above have to do with producing specific goods or services. Recipes can also be used to document more general business processes that an organization uses to produce more generally defined kinds of outputs. For example, an R&D process might be hard to document in detail, but it does have general steps like researching existing technology, concept generation, experimentation, concept selection, refinement, testing, documenting the design. Generation of plans Back-scheduling a plan from a Recipe : Start with end items and a due date, generate the plan from the end item to its inputs, to the outputs leading the inputs, to their inputs, etc. Forward-scheduling from a Recipe : Start with the inputs with no predecessors and a start date, generate the plan from the inputs to their outputs, to the inputs that want the outputs, etc. Forward-scheduling from a Resource : Start with a Resource and generate the plan based on its recipe. Examples: Translation: start with a source document Auto repair: start with an auto that needs repair.","title":"Recipes"},{"location":"concepts/recipes/#not-just-for-cooking","text":"Recipes are for: documenting how to do something, generating plans for people to do it together, providing signals for coordinating their work. Recipes contain all the info required to create a resource or provide a service. In ERP (Enterprise Resource Planning) terms, it\u2019s a combination of bills of material and routings and suppliers.","title":"Not just for cooking"},{"location":"concepts/recipes/#recipe-patterns","text":"Recipe patterns can be used alone, or mixed and matched in a recipe: Manufacturing pattern : assemble or transform input resources into different output resources. This combines bills of material, processing instructions (routings), other inputs like labor and equipment requirements, and possible suppliers for the inputs. They are structured like an upside down tree. The manufacturing pattern creates recursive structures. In other words, if an input component has a recipe itself, that recipe will be incorporated into its parent, so you can view a processing tree from parents through children unto many generations. For example: Assemble a robot from metal, wires, computer chips, software, etc. Bake bread from flour, yeast, water, etc., using an oven. Workflow pattern : change the same resource into a different stage of the same resource. This describes a sequence of processes used to complete work on one resource. They create a series of stages that one resource will go through until it is finished. For example: Translate a source document, edit the translation, format for publication, and publish. Repair a bike. Do quality testing on something that was created using the manufacturing pattern. The examples above have to do with producing specific goods or services. Recipes can also be used to document more general business processes that an organization uses to produce more generally defined kinds of outputs. For example, an R&D process might be hard to document in detail, but it does have general steps like researching existing technology, concept generation, experimentation, concept selection, refinement, testing, documenting the design.","title":"Recipe patterns"},{"location":"concepts/recipes/#generation-of-plans","text":"Back-scheduling a plan from a Recipe : Start with end items and a due date, generate the plan from the end item to its inputs, to the outputs leading the inputs, to their inputs, etc. Forward-scheduling from a Recipe : Start with the inputs with no predecessors and a start date, generate the plan from the inputs to their outputs, to the inputs that want the outputs, etc. Forward-scheduling from a Resource : Start with a Resource and generate the plan based on its recipe. Examples: Translation: start with a source document Auto repair: start with an auto that needs repair.","title":"Generation of plans"},{"location":"concepts/resources/","text":"Definition Traditionally, an economic resource is defined by its utility, but also by its scarcity and its control by an economic agent. That definition is too limited. Its limitations include: Intellectual creations like designs are not scarce, yet they clearly are economic resources. They only become scarce when legally restricted by patents and copyrights. Air, water, and other products of nature are clearly economic resources, but they are not under the control of an agent unless they are legally restricted by ownership. However, by means of the invisible foot that accompanies the invisible hand, they are regularly degraded by enterprises, and not accounted for, classified as \u201cexternalities\u201d. We want to think of ourselves as participants in ecosystems, not competing enterprises. As such, we need to account for our effects on all aspects of our ecosystem. And we want knowledge to be freely available. Also, we prefer to think of use value, but economic resources also often have exchange value. The difference between a resource and its specification/classification(s) An economic resource is observable. Its specification or classification defines what kind of thing the economic resource is. So, for example, most listings of things offered for sale on an e-commerce site are specifications, which can be searched using classifications. The one in a box delivered to your door is a resource. Or the description of the book entitled \"The Power of Babel: A Natural History of Language\", ISBN-13: 978-0060520854, is a specification. Your library may have two copies that you can check out. Those are resources. The difference between a resource specification and a resource classification An economic resource or a flow can have only one resource specification in Valueflows. This defines the lowest level useful type or kind of the resource that is needed. The Valueflows vocabulary defines this as the ResourceSpecification. Note that often taxonomies and other references on the web can define very specific resource specifications at their leaf levels, and these can be used if the necessary properties can be found. Note also that for specific global identifiers such as GTIN, we recommend using properties of the GoodRelations ProductOrServiceModel . An economic resource or a flow can have any number of resource classifications . They are used to filter, match, or group economic resources. Resource classifications can be part of a taxonomy. That means they can be defined very broadly and generally and maybe vaguely, or they can be defined very narrowly, but fit into broader classifications. So, for example, you may want an apple. Or you may want a green apple. Or you may want a Granny Smith apple. Or, Herb is the parent classification of Anise Hyssop, Goldenrod, Nettles, Red Clover, etc. Besides its usefulness in understanding taxonomies of resource types, this can be useful when one can define a general recipe that will work for many more specific kinds of resources. People can use the multitude of existing taxonomies for resource classifications, or can also create their own as needed. Resource classifications can also use other schemes, like facets or tags. The references to resource classifications are uri's, and not otherwise defined inside Valueflows. Identification and Behaviors of Resources Here are three different kinds of resources from the viewpoint of identification: serialized resources, where each individual instance has a unique identifier, lot-controlled resources, where each lot or batch has a unique identifier, but the lot or batch may contain many individual instances, and count or volume or stock resources, where individual instances are indistinguishable, or in the case of fluids, only exist on a molecular level. Serialized resources would fit the direct identification pattern. Lots can be split up, so the identification of a subset of a lot would require some other properties, such as location. Stock resources can only be described indirectly, by means of some combination of properties, such as specification and location. (Location is a complex ontology of its own: for example, in warehousing, a location is often composed of warehouse:room:aisle:row:tier.) The tracking identifier is used for serial numbers. Moreover, identification of resources will depend on scope and purpose. We want to allow each scope or context to define resources that they have relationships with, according to the combination of properties that works best for them, which might include which agent has which relationship with a resource. And then in the \"independent view\", for larger-scale analysis of resource flows, or for example for lot tracking for public health issues like mad cow disease, different combinations of properties might be needed. Substitutability : This defines if any resources of that specification can be freely substituted for any other resource of that same specification when used, consumed, traded, etc. For example, one container of \"B9R-1-red DLP resin photopolymer\" is probably substitutable for another container of the same photopolymer. While each resource for a resource specification called \"English-Spanish translation\" is probably not substitutable because each will be a different document. Unique identifiers for resources This can vary. And people can be allowed within some boundaries of agreement to specify which combination of other properties would constitute identifiers. Here are some examples from manufacturing situations: Unique identifier = an assigned serialized identifier, which is unique across manufacturers, due to agreements in an industry. Examples are computers, vehicles, and other equipment. Unique identifier = resource model + lot identifier + location + owner: so in other words, the owner of the rights was part of the unique identifier of the resource, and if the resource got transferred from one owner to another, the first owner's resources would be decremented, and the second owner's resources would be incremented. Note in the last case, a transfer of rights means a different resource. This is common with resources that are not serialized, where one logical resource has a quantity greater than 1, and the individual instances are substitutable. (Think nuts and bolts, grain, strawberries, bottles of beer in cases, etc.) Stage and state Sometimes part of the logical identification of a resource includes: stage : the ProcessSpecification of the most recent process the resource was output from, with the modify action state : the state of the resource on output from a process, such as \"failed\" Stage is used when the same resource passes through multiple processes in its lifetime, and that information is needed by the next process to determine which resources can be valid inputs. For example, in creating a translation, you might have one translated document pass through translation, editing, proofreading, and formatting stages. You don't want to bring that resource into the formatting stage until it has been proofread, for example. Or you might have a testing stage for a component or product, in which case you don't want to consume or transfer the resource until it both has been through the testing stage, and had a pass output state. These can be defined on the recipe or the plan, showing where an input flow expects a certain stage and/or state of a resource. In that case, Dependent demand planning will select only those resources that fit the specified stage and state. In user-interface forms for adding EconomicEvents, the input event form should query EconomicResources for required stage and state when offering selections of possible input resources. The stage and state of an EconomicResource can be derived or stored, as preferred. Inventory Economic Resources can be inventoried, not inventoried but could be, or it doesn't make sense to think about inventory. If a resource is not inventoried, it is generally not instantiated in the software, but defined using resource specification and other properties, such as the accountable agent or location. Inventoried: You want to keep track of it, its changes in quantity, and how many you have right now. Not inventoried: You could keep track of it, but it isn't worth it. This usually happens for quantities of small or hard to measure items that are obtained in bulk, like solder or bolts. In this case, you have to look at the actual resource to see if you need more, the data won't tell you. Not applicable: This is for types of work (unless scheduled), services, and other resources where it just doesn't make sense. How resources relate to events In the original REA ontology, an Economic Event is a change in the quantity or in the rights to an Economic Resource performed by Economic Agents. An event is also defined by its behavior in relation to the resource (consume, use, produce, transfer, etc.). Some people use the terms \"stock\" and \"stock flow\". A stock is a resource; a stock flow is an event. (The term stock is too limiting, since a resource could be digital, like a document or media file.) An event can trigger incrementing or decrementing a resource. Sometimes it does neither, as in the case of using a piece of equipment or citing a document. But in any case, the quantity of a resource related to the event is not a resource itself, it is just a property of the event. For example a resource could be 100 widgets on a pallet, lot number 1234. If 10 of those widgets are consumed in a process that makes something out of them, that is an event: consumption of 10 widgets of lot number 1234. The 10 widgets are not a resource in their own right. The event triggers the decrement of the original resource of 100 widgets, which now has quantity of 90. For serialized or uniquely identified resources, if the logical and technical unique identifiers are not changed by an event, such as moving a vehicle to another location without any changes to its accountable agent (and assuming location is not part of the logical identifier), the resource does not behave like a stock and is not decremented or incremented. How resources relate to transfers Two different kinds of \"inventorying\" of resources are affected by transfers. quantity of the resource where the agent has full (human realm) rights and responsibilities, irrespective of custody quantity of the resource where the agent has custody or physical possession, irrespective of rights, more of an operational focus We define two current quantities on the economic resource for these two concepts, accounting quantity for the first and onhand quantity for the second. For example, in vendor-managed inventory, the vendor owns the inventory so they see it in their accounting; but the store sees it in their onhand quantities. Or for inventory being shipped FOB source, the intended receiver owns the inventory and sees it in their accounting, but the goods are actually onhand in a truck. How resources related to each other If one resource contains other resources, the contained resources are part of, or make up the larger resource. For example, a bank account might contain a number of \"virtual accounts\" that a group manages itself, outside the bank's knowledge. Or, a makerspace network might share packages of resources for projects, where the package moves as a whole, but the resources inside are what the project used. Or, a bike shed resource might contain 10 bikes, which are identified and tracked by their serial numbers as individual resources.","title":"Economic Resources"},{"location":"concepts/resources/#definition","text":"Traditionally, an economic resource is defined by its utility, but also by its scarcity and its control by an economic agent. That definition is too limited. Its limitations include: Intellectual creations like designs are not scarce, yet they clearly are economic resources. They only become scarce when legally restricted by patents and copyrights. Air, water, and other products of nature are clearly economic resources, but they are not under the control of an agent unless they are legally restricted by ownership. However, by means of the invisible foot that accompanies the invisible hand, they are regularly degraded by enterprises, and not accounted for, classified as \u201cexternalities\u201d. We want to think of ourselves as participants in ecosystems, not competing enterprises. As such, we need to account for our effects on all aspects of our ecosystem. And we want knowledge to be freely available. Also, we prefer to think of use value, but economic resources also often have exchange value.","title":"Definition"},{"location":"concepts/resources/#the-difference-between-a-resource-and-its-specificationclassifications","text":"An economic resource is observable. Its specification or classification defines what kind of thing the economic resource is. So, for example, most listings of things offered for sale on an e-commerce site are specifications, which can be searched using classifications. The one in a box delivered to your door is a resource. Or the description of the book entitled \"The Power of Babel: A Natural History of Language\", ISBN-13: 978-0060520854, is a specification. Your library may have two copies that you can check out. Those are resources.","title":"The difference between a resource and its specification/classification(s)"},{"location":"concepts/resources/#the-difference-between-a-resource-specification-and-a-resource-classification","text":"An economic resource or a flow can have only one resource specification in Valueflows. This defines the lowest level useful type or kind of the resource that is needed. The Valueflows vocabulary defines this as the ResourceSpecification. Note that often taxonomies and other references on the web can define very specific resource specifications at their leaf levels, and these can be used if the necessary properties can be found. Note also that for specific global identifiers such as GTIN, we recommend using properties of the GoodRelations ProductOrServiceModel . An economic resource or a flow can have any number of resource classifications . They are used to filter, match, or group economic resources. Resource classifications can be part of a taxonomy. That means they can be defined very broadly and generally and maybe vaguely, or they can be defined very narrowly, but fit into broader classifications. So, for example, you may want an apple. Or you may want a green apple. Or you may want a Granny Smith apple. Or, Herb is the parent classification of Anise Hyssop, Goldenrod, Nettles, Red Clover, etc. Besides its usefulness in understanding taxonomies of resource types, this can be useful when one can define a general recipe that will work for many more specific kinds of resources. People can use the multitude of existing taxonomies for resource classifications, or can also create their own as needed. Resource classifications can also use other schemes, like facets or tags. The references to resource classifications are uri's, and not otherwise defined inside Valueflows.","title":"The difference between a resource specification and a resource classification"},{"location":"concepts/resources/#identification-and-behaviors-of-resources","text":"Here are three different kinds of resources from the viewpoint of identification: serialized resources, where each individual instance has a unique identifier, lot-controlled resources, where each lot or batch has a unique identifier, but the lot or batch may contain many individual instances, and count or volume or stock resources, where individual instances are indistinguishable, or in the case of fluids, only exist on a molecular level. Serialized resources would fit the direct identification pattern. Lots can be split up, so the identification of a subset of a lot would require some other properties, such as location. Stock resources can only be described indirectly, by means of some combination of properties, such as specification and location. (Location is a complex ontology of its own: for example, in warehousing, a location is often composed of warehouse:room:aisle:row:tier.) The tracking identifier is used for serial numbers. Moreover, identification of resources will depend on scope and purpose. We want to allow each scope or context to define resources that they have relationships with, according to the combination of properties that works best for them, which might include which agent has which relationship with a resource. And then in the \"independent view\", for larger-scale analysis of resource flows, or for example for lot tracking for public health issues like mad cow disease, different combinations of properties might be needed. Substitutability : This defines if any resources of that specification can be freely substituted for any other resource of that same specification when used, consumed, traded, etc. For example, one container of \"B9R-1-red DLP resin photopolymer\" is probably substitutable for another container of the same photopolymer. While each resource for a resource specification called \"English-Spanish translation\" is probably not substitutable because each will be a different document.","title":"Identification and Behaviors of Resources"},{"location":"concepts/resources/#unique-identifiers-for-resources","text":"This can vary. And people can be allowed within some boundaries of agreement to specify which combination of other properties would constitute identifiers. Here are some examples from manufacturing situations: Unique identifier = an assigned serialized identifier, which is unique across manufacturers, due to agreements in an industry. Examples are computers, vehicles, and other equipment. Unique identifier = resource model + lot identifier + location + owner: so in other words, the owner of the rights was part of the unique identifier of the resource, and if the resource got transferred from one owner to another, the first owner's resources would be decremented, and the second owner's resources would be incremented. Note in the last case, a transfer of rights means a different resource. This is common with resources that are not serialized, where one logical resource has a quantity greater than 1, and the individual instances are substitutable. (Think nuts and bolts, grain, strawberries, bottles of beer in cases, etc.)","title":"Unique identifiers for resources"},{"location":"concepts/resources/#stage-and-state","text":"Sometimes part of the logical identification of a resource includes: stage : the ProcessSpecification of the most recent process the resource was output from, with the modify action state : the state of the resource on output from a process, such as \"failed\" Stage is used when the same resource passes through multiple processes in its lifetime, and that information is needed by the next process to determine which resources can be valid inputs. For example, in creating a translation, you might have one translated document pass through translation, editing, proofreading, and formatting stages. You don't want to bring that resource into the formatting stage until it has been proofread, for example. Or you might have a testing stage for a component or product, in which case you don't want to consume or transfer the resource until it both has been through the testing stage, and had a pass output state. These can be defined on the recipe or the plan, showing where an input flow expects a certain stage and/or state of a resource. In that case, Dependent demand planning will select only those resources that fit the specified stage and state. In user-interface forms for adding EconomicEvents, the input event form should query EconomicResources for required stage and state when offering selections of possible input resources. The stage and state of an EconomicResource can be derived or stored, as preferred.","title":"Stage and state"},{"location":"concepts/resources/#inventory","text":"Economic Resources can be inventoried, not inventoried but could be, or it doesn't make sense to think about inventory. If a resource is not inventoried, it is generally not instantiated in the software, but defined using resource specification and other properties, such as the accountable agent or location. Inventoried: You want to keep track of it, its changes in quantity, and how many you have right now. Not inventoried: You could keep track of it, but it isn't worth it. This usually happens for quantities of small or hard to measure items that are obtained in bulk, like solder or bolts. In this case, you have to look at the actual resource to see if you need more, the data won't tell you. Not applicable: This is for types of work (unless scheduled), services, and other resources where it just doesn't make sense.","title":"Inventory"},{"location":"concepts/resources/#how-resources-relate-to-events","text":"In the original REA ontology, an Economic Event is a change in the quantity or in the rights to an Economic Resource performed by Economic Agents. An event is also defined by its behavior in relation to the resource (consume, use, produce, transfer, etc.). Some people use the terms \"stock\" and \"stock flow\". A stock is a resource; a stock flow is an event. (The term stock is too limiting, since a resource could be digital, like a document or media file.) An event can trigger incrementing or decrementing a resource. Sometimes it does neither, as in the case of using a piece of equipment or citing a document. But in any case, the quantity of a resource related to the event is not a resource itself, it is just a property of the event. For example a resource could be 100 widgets on a pallet, lot number 1234. If 10 of those widgets are consumed in a process that makes something out of them, that is an event: consumption of 10 widgets of lot number 1234. The 10 widgets are not a resource in their own right. The event triggers the decrement of the original resource of 100 widgets, which now has quantity of 90. For serialized or uniquely identified resources, if the logical and technical unique identifiers are not changed by an event, such as moving a vehicle to another location without any changes to its accountable agent (and assuming location is not part of the logical identifier), the resource does not behave like a stock and is not decremented or incremented.","title":"How resources relate to events"},{"location":"concepts/resources/#how-resources-relate-to-transfers","text":"Two different kinds of \"inventorying\" of resources are affected by transfers. quantity of the resource where the agent has full (human realm) rights and responsibilities, irrespective of custody quantity of the resource where the agent has custody or physical possession, irrespective of rights, more of an operational focus We define two current quantities on the economic resource for these two concepts, accounting quantity for the first and onhand quantity for the second. For example, in vendor-managed inventory, the vendor owns the inventory so they see it in their accounting; but the store sees it in their onhand quantities. Or for inventory being shipped FOB source, the intended receiver owns the inventory and sees it in their accounting, but the goods are actually onhand in a truck.","title":"How resources relate to transfers"},{"location":"concepts/resources/#how-resources-related-to-each-other","text":"If one resource contains other resources, the contained resources are part of, or make up the larger resource. For example, a bank account might contain a number of \"virtual accounts\" that a group manages itself, outside the bank's knowledge. Or, a makerspace network might share packages of resources for projects, where the package moves as a whole, but the resources inside are what the project used. Or, a bike shed resource might contain 10 bikes, which are identified and tracked by their serial numbers as individual resources.","title":"How resources related to each other"},{"location":"concepts/scoping/","text":"Boundary for analysis and accounting Scope can be thought of as a boundary for analysis and accounting, mostly used for sets of economic events, commitments, and intents. The scope is where work is done, where processes live, where value is created and exchanged. Economic events, commitments and intents can reference an organization (an agent) as an entity that defines their scope. It may be a formal or informal organization, and will include the network(s) themselves. Or economic events, commitments and intents can reference a geographic area (a city, a bio-region, etc.), or a community, or a loose network, or a less formal shorter lived project, or plan, or any other bounded concept that is useful for accounting for economic events. An economic event, commitment or intent can reference any number of entities which scope it. It is not required that events, commitments, or intents designate a scope. In fact, sometimes the scope is the same as the provider or recipient agent. Or sometimes there is no useful scope. For functions that require traversing value flows, often the value flow will cross from one scope to another. For example, perhaps another network or organization makes a component that you consume when making your product. When this happens, there are some options. Standing agreements can govern what happens. A conversation for action might be required to determine what should occur for the specific instance. Accounting Accounting is usually done for an agent or other bounded scope. Where a computer system supports one enterprise, this is simple. When a computer system supports many organizations or there is a distributed network of economic activity, it is useful to be able to segregate the accounting using scope. It basically enables multi-party accounting in a networked scenario. Planning Sometimes a generic recipe will cross scope boundaries for particular agents. For example one agent could produce a resource that consumes a component made by another agent. In this case, can the first agent schedule the production of the component by the second agent? Possibly yes, if there are agreements in place for that, and the first agent has verified that inventory does not already exist. Or possibly, based again on agreements, the first agent can assume the second agent will provide the component, with the second agent taking responsibility for checking if it is onhand, and if not, scheduling it for production. Distributing Incoming Resources Some organizations distribute income backwards on value flows, based on people's contributions to the resources that generated the income. When traversing the value chain, it is useful to know when the traversal has crossed a scope boundary, because it is possible that the rules for distributing the incoming resources will change for a different scope. If the rules change or the rules are unknown, the income can be passed on to the other scope for them to distribute. Note that income does not need to be money and can include distributing the output of a process to the contributors, like when a community farm distributes food to its contributors.","title":"Scoping"},{"location":"concepts/scoping/#boundary-for-analysis-and-accounting","text":"Scope can be thought of as a boundary for analysis and accounting, mostly used for sets of economic events, commitments, and intents. The scope is where work is done, where processes live, where value is created and exchanged. Economic events, commitments and intents can reference an organization (an agent) as an entity that defines their scope. It may be a formal or informal organization, and will include the network(s) themselves. Or economic events, commitments and intents can reference a geographic area (a city, a bio-region, etc.), or a community, or a loose network, or a less formal shorter lived project, or plan, or any other bounded concept that is useful for accounting for economic events. An economic event, commitment or intent can reference any number of entities which scope it. It is not required that events, commitments, or intents designate a scope. In fact, sometimes the scope is the same as the provider or recipient agent. Or sometimes there is no useful scope. For functions that require traversing value flows, often the value flow will cross from one scope to another. For example, perhaps another network or organization makes a component that you consume when making your product. When this happens, there are some options. Standing agreements can govern what happens. A conversation for action might be required to determine what should occur for the specific instance.","title":"Boundary for analysis and accounting"},{"location":"concepts/scoping/#accounting","text":"Accounting is usually done for an agent or other bounded scope. Where a computer system supports one enterprise, this is simple. When a computer system supports many organizations or there is a distributed network of economic activity, it is useful to be able to segregate the accounting using scope. It basically enables multi-party accounting in a networked scenario.","title":"Accounting"},{"location":"concepts/scoping/#planning","text":"Sometimes a generic recipe will cross scope boundaries for particular agents. For example one agent could produce a resource that consumes a component made by another agent. In this case, can the first agent schedule the production of the component by the second agent? Possibly yes, if there are agreements in place for that, and the first agent has verified that inventory does not already exist. Or possibly, based again on agreements, the first agent can assume the second agent will provide the component, with the second agent taking responsibility for checking if it is onhand, and if not, scheduling it for production.","title":"Planning"},{"location":"concepts/scoping/#distributing-incoming-resources","text":"Some organizations distribute income backwards on value flows, based on people's contributions to the resources that generated the income. When traversing the value chain, it is useful to know when the traversal has crossed a scope boundary, because it is possible that the rules for distributing the incoming resources will change for a different scope. If the rules change or the rules are unknown, the income can be passed on to the other scope for them to distribute. Note that income does not need to be money and can include distributing the output of a process to the contributors, like when a community farm distributes food to its contributors.","title":"Distributing Incoming Resources"},{"location":"concepts/transfers/","text":"Transfers One kind of transfer is an activity that re-assigns rights and responsibilities for an economic resource from one agent to another. A second kind is an activity that operationally changes physical custody or possession of an economic resource from one agent to another, without affecting rights. Note that a transfer is a one-way activity. Two or more reciprocal transfers form an exchange. We think that now, and more so in the future, there will be more gradations of rights and responsibilities for resources than are sometimes considered now. For example, as a society we may decide that we should take more responsibility for recycling or upcycling resources at the end of their useful life for us, or not wasting them. The concept of \"ownership\" may transition more into \"stewardship\" in a concept of the world that does not put humans in a position of controlling the world's resources or abdicating responsibilities to the ecosystem in the name of ownership. So, we are for the most part avoiding talking about ownership in this vocabulary, as we work towards more of an ecosystemic perspective. Examples For example, perhaps some agent has many apple trees, and plans on pressing apple cider. Another agent has an apple press and agrees to transfer use of the press (a resource) in exchange for a reciprocal transfer of a portion of the apple cider. The use of the press involves some rights (to use the press for some period of time) and responsibilities (to not run it beyond its capacity and to clean it up before returning it). Or in a library, a book can be checked out, a transfer from the library to the reader. The agent who checks it out can read it and is responsible for caring for it and returning it on time, another transfer. Or let's say that a community has farmland and equipment held in common. The community transfers responsibility for the land and equipment to some farmers to use and take care of. The community also transfers seeds every year to the farmers, enough to grow the food the community needs. During the year, the harvests are distributed (transferred) to the community members for their consumption. In reciprocity, the community provides for other needs of the farmers. Implementation note : Different networks may choose to handle namespaces and identifiers at different granularity. This also may depend on the technology used. So one network may have separate namespaces for the nodes in the network; another may have one namespace for the whole network. In the latter case, an implication on transfers is that the provider agent and the receiver agent may use the same resource identifier for resourceInventoriedAs and toResourceInventoriedAs , even though the primary accountable has changed.","title":"Transfers"},{"location":"concepts/transfers/#transfers","text":"One kind of transfer is an activity that re-assigns rights and responsibilities for an economic resource from one agent to another. A second kind is an activity that operationally changes physical custody or possession of an economic resource from one agent to another, without affecting rights. Note that a transfer is a one-way activity. Two or more reciprocal transfers form an exchange. We think that now, and more so in the future, there will be more gradations of rights and responsibilities for resources than are sometimes considered now. For example, as a society we may decide that we should take more responsibility for recycling or upcycling resources at the end of their useful life for us, or not wasting them. The concept of \"ownership\" may transition more into \"stewardship\" in a concept of the world that does not put humans in a position of controlling the world's resources or abdicating responsibilities to the ecosystem in the name of ownership. So, we are for the most part avoiding talking about ownership in this vocabulary, as we work towards more of an ecosystemic perspective. Examples For example, perhaps some agent has many apple trees, and plans on pressing apple cider. Another agent has an apple press and agrees to transfer use of the press (a resource) in exchange for a reciprocal transfer of a portion of the apple cider. The use of the press involves some rights (to use the press for some period of time) and responsibilities (to not run it beyond its capacity and to clean it up before returning it). Or in a library, a book can be checked out, a transfer from the library to the reader. The agent who checks it out can read it and is responsible for caring for it and returning it on time, another transfer. Or let's say that a community has farmland and equipment held in common. The community transfers responsibility for the land and equipment to some farmers to use and take care of. The community also transfers seeds every year to the farmers, enough to grow the food the community needs. During the year, the harvests are distributed (transferred) to the community members for their consumption. In reciprocity, the community provides for other needs of the farmers. Implementation note : Different networks may choose to handle namespaces and identifiers at different granularity. This also may depend on the technology used. So one network may have separate namespaces for the nodes in the network; another may have one namespace for the whole network. In the latter case, an implication on transfers is that the provider agent and the receiver agent may use the same resource identifier for resourceInventoriedAs and toResourceInventoriedAs , even though the primary accountable has changed.","title":"Transfers"},{"location":"examples/ex-agent/","text":"Agent Examples This example include agents (people and organizations) and their relationships. # Example: Agents and Agent Relationships '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ fablab : https://fablab.example/ coop : https://coop.example/ '@id' : rgh:valueflows/valueflows/master/examples/agent.yaml '@graph' : # Agents - '@id' : https://alice.example/ '@type' : foaf:Person name : Alice image : https://alice.example/avatar.png primaryLocation : https://somelocation.example skos:note : Alice is a mechanical engineer who likes to work in the fablab. - '@id' : https://bob.example/ '@type' : foaf:Person name : Bob - '@id' : https://fablab.example/ '@type' : org:Organization name : Driftless Fablab - '@id' : https://coop.example/ '@type' : org:Organization name : Community Tool Lending Coop # Roles - '@id' : fablab:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : AgentRelationshipRole roleLabel : is member of inverseRoleLabel : has member skos:note : Both persons and organizations can be members of this fablab. - '@id' : fablab:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : AgentRelationshipRole roleLabel : is supplier of inverseRoleLabel : is customer of - '@id' : fablab:a25500e0-0106-43cd-8cbb-e74779488835 '@type' : AgentRelationshipRole roleLabel : mentors inverseRoleLabel : has mentor # Relationships - '@id' : fablab:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : AgentRelationship subject : https://alice.example/ relationship : fablab:52f0e212-3c4f-4d27-b345-5e964c135824 # member object : https://fablab.example/ - '@id' : fablab:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : AgentRelationship subject : https://coop.example/ relationship : fablab:02b39a30-3e04-4305-9656-7f261aa63c84 # trading partner object : https://fablab.example/ skos:note : The coop is a supplier of tools for the fablab. - '@id' : fablab:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : AgentRelationship subject : https://alice.example/ relationship : fablab:a25500e0-0106-43cd-8cbb-e74779488835 # mentor object : https://bob.example/ inScopeOf : https://fablab.example/ skos:note : Alice mentors Bob at the fablab.","title":"Agents"},{"location":"examples/ex-agent/#agent-examples","text":"This example include agents (people and organizations) and their relationships. # Example: Agents and Agent Relationships '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ fablab : https://fablab.example/ coop : https://coop.example/ '@id' : rgh:valueflows/valueflows/master/examples/agent.yaml '@graph' : # Agents - '@id' : https://alice.example/ '@type' : foaf:Person name : Alice image : https://alice.example/avatar.png primaryLocation : https://somelocation.example skos:note : Alice is a mechanical engineer who likes to work in the fablab. - '@id' : https://bob.example/ '@type' : foaf:Person name : Bob - '@id' : https://fablab.example/ '@type' : org:Organization name : Driftless Fablab - '@id' : https://coop.example/ '@type' : org:Organization name : Community Tool Lending Coop # Roles - '@id' : fablab:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : AgentRelationshipRole roleLabel : is member of inverseRoleLabel : has member skos:note : Both persons and organizations can be members of this fablab. - '@id' : fablab:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : AgentRelationshipRole roleLabel : is supplier of inverseRoleLabel : is customer of - '@id' : fablab:a25500e0-0106-43cd-8cbb-e74779488835 '@type' : AgentRelationshipRole roleLabel : mentors inverseRoleLabel : has mentor # Relationships - '@id' : fablab:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : AgentRelationship subject : https://alice.example/ relationship : fablab:52f0e212-3c4f-4d27-b345-5e964c135824 # member object : https://fablab.example/ - '@id' : fablab:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : AgentRelationship subject : https://coop.example/ relationship : fablab:02b39a30-3e04-4305-9656-7f261aa63c84 # trading partner object : https://fablab.example/ skos:note : The coop is a supplier of tools for the fablab. - '@id' : fablab:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : AgentRelationship subject : https://alice.example/ relationship : fablab:a25500e0-0106-43cd-8cbb-e74779488835 # mentor object : https://bob.example/ inScopeOf : https://fablab.example/ skos:note : Alice mentors Bob at the fablab.","title":"Agent Examples"},{"location":"examples/ex-complex/","text":"Complex Examples Transportation with transfer Bob purchases 30kg of apples from Alice and Claudia transports them (FOB destination). The receipt of the apples triggers the transfer of ownership. # Transportation with transfer '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ claudia : https://claudia.example/ '@id' : rgh:valueflows/valueflows/master/examples/transport-with-transfer.yaml '@graph' : # Bob purchases 30kg of apples from Alice and Claudia transports them (FOB destination) # resources before - '@id' : alice:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 230 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 230 # alice commits to transfer some apples to bob - '@id' : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : Commitment action : transfer resourceClassifiedAs : wd:Q41777871 # haralson apples provider : https://alice.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # alice and claudia agree on transportation of the apples - '@id' : urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0 '@type' : Agreement skos:note : exchange transportation service for currency - '@id' : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Commitment action : transfer resourceClassifedAs : wd:Q4917 # US Dollar provider : https://alice.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 10 clauseOf : urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0 # transportation agreement - '@id' : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a '@type' : Commitment skos:note : Transportation of alice's apples from alice's location to bob's location action : service resourceClassifiedAs : wd:Q7590 # transportation service provider : https://claudia.example/ receiver : https://alice.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 clauseOf : urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0 # transportation agreement # alice transfers custody of the apples to claudia for transportation - '@id' : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f87 '@type' : EconomicEvent action : transfer-custody resourceClassifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 provider : https://alice.example/ receiver : https://claudia.example/ resourceInventoriedAs : alice:21f361a6-2375-46bb-b192-c21b5ba833bf # alice's apples toResourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 # claudia's bill of lading on the truck resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # resources snapshot - '@id' : alice:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 230 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 200 - '@id' : claudia:27be5cab-d740-4194-9298-1661a69d9d95 '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # claudia transports the apples in two hops - '@id' : claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960 '@type' : Process skos:note : Claudia transports the apples - '@id' : claudia:fd399b37-0740-4a68-a184-1e655021ca21 '@type' : EconomicEvent inputOf : claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960 action : pickup resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:57f1c1d0-432e-4bfa-9d32-002b8955a708 '@type' : EconomicEvent outputOf : claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960 action : dropoff resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c '@type' : Process skos:note : Claudia transports the apples - '@id' : claudia:856c43b1-0a63-445f-a56f-707b257f086e '@type' : EconomicEvent inputOf : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c action : pickup resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:9cb4944b-d26d-4774-a530-d18f2747c0d8 '@type' : EconomicEvent outputOf : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c action : dropoff resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : urn:uuid:68cabaf3-deb8-4bd5-a439-798263abe35a '@type' : EconomicEvent skos:note : Transportation of alice's apples from alice's location to bob's location outputOf : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c action : service resourceClassifiedAs : wd:Q7590 # transportation service provider : https://claudia.example/ receiver : https://alice.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 '@type' : Fulfillment fulfills : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # the commitment fulfilledBy : urn:uuid:68cabaf3-deb8-4bd5-a439-798263abe35a # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # bob receives the apples - '@id' : urn:uuid:7a63ea10-b1c3-441a-9a08-fb8630c02614 '@type' : EconomicEvent action : transfer-custody resourceClassifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 toResourceInventoriedAs : bob:9bd19194-a36d-4a1f-896b-8082887962cb provider : https://claudia.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # receipt of the apples triggers finalizing the transfer of ownership - '@id' : urn:uuid:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 '@type' : EconomicEvent action : transfer-all-rights resourceClassifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 provider : https://alice.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 triggeredBy : urn:uuid:7a63ea10-b1c3-441a-9a08-fb8630c02614 - '@id' : urn:uuid:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : Fulfillment fulfills : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # the commitment fulfilledBy : urn:uuid:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 # the economic event resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # resources snapshot - '@id' : alice:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9 # only the possessed amount accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 200 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 200 - '@id' : bob:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:b52a5815-fae9-43bf-be95-833b95dc0ada # only the possessed amount accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:27be5cab-d740-4194-9298-1661a69d9d95 # claudia's bill of lading on the truck '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 0 # alice pays claudia for the transportation service - '@id' : urn:uuid:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 '@type' : EconomicEvent action : transfer resourceClassifedAs : wd:Q4917 # US Dollar resourceInventoriedAs : alice:daa2ec3b-2c1a-4eb1-839f-8dcec1a1f93a # alice's bank account toResourceInventoriedAs : claudia:bd5806d6-4a36-45b9-b3b6-3e7d361a5a14 # claudia's bank account provider : https://alice.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 10 - '@id' : urn:uuid:fbff9852-36ca-4364-a943-bc0b49e1cab5 '@type' : Fulfillment fulfills : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 # the commitment fulfilledBy : urn:uuid:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 10 Manufacturing and workflow A component is produced (manufacturing pattern) and tested (workflow pattern). QT (\"quality testing\") gives pass and/or fail outputs. The failed components are passed back into a source resource (because it can be re-used as an input as part of the QT process, to be used in this or the next manufacturing run. The QT needs the stage and state of the input component resource, because QT would only be done on components that are made and not tested yet. By the same token, components would only be sent into the next assembly process if they have passed the QT process/stage (not part of this example). This example includes recipe, plan, and actuals. # Example: Workflow recipe, plan, execution, including stage and state usage '@context' : - https://git.io/vf-examples-jsonld-context - mfg : https://manufacturing.example/ '@id' : rgh:valueflows/valueflows/master/examples/workflow-stage-state.yaml '@graph' : # specifications - '@id' : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ResourceSpecification name : Bucket white 5 gallon unitOfResource : om2:one substitutable : true - '@id' : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 '@type' : ResourceSpecification name : Thermoplastic polymer white unitOfResource : om2:kilogram substitutable : true - '@id' : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a '@type' : ResourceSpecification name : Injection molding machine unitOfResource : om2:one unitOfEffort : om2:hour substitutable : true - '@id' : mfg:27be5cab-d740-4194-9298-1661a69d9d95 '@type' : ProcessSpecification name : Make injection molded buckets - '@id' : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 '@type' : ProcessSpecification name : QT injection molded buckets # resources before - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource name : Bucket white 5 gallon resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 320 state : pass stage : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # QT - '@id' : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : EconomicResource name : Thermoplastic polymer white resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 2455 - '@id' : mfg:23799c14-c368-4653-a584-83bf9ae8b82a '@type' : EconomicResource name : Injection molding maching resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a trackingIdentifier : DDE098989099911 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 unitOfEffort : om2:hour # the recipe (here the recipe runs \"backwards\" from the final product, similar to a BOM) - '@id' : mfg:ac9ec98d-db80-44dc-97be-7aa149b2fe5d '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket - '@id' : mfg:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b action : modify state : pass recipeFlowResource : mfg:ac9ec98d-db80-44dc-97be-7aa149b2fe5d resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 500 - '@id' : mfg:a3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : RecipeResource resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer - '@id' : mfg:54b814ee-62dc-40c1-bb96-f8582aa4f771 '@type' : RecipeFlow recipeOutputOf : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b action : produce # fail recipeFlowResource : mfg:a3be5259d-10f0-431c-9fec-9c0c15a461d3 resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 0 - '@id' : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b '@type' : RecipeProcess name : QT bucket white 5 gallon - minimum run processConformsTo : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 1 - '@id' : mfg:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c '@type' : RecipeFlow recipeInputOf : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b action : accept recipeFlowResource : mfg:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead stage : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # 'make' process specification resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 500 - '@id' : mfg:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket - '@id' : mfg:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf action : produce recipeFlowResource : mfg:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 500 - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : RecipeProcess name : Make bucket white 5 gallon - minimum run processConformsTo : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 7 - '@id' : mfg:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : RecipeFlow recipeInputOf : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf action : consume recipeFlowResource : mfg:6405b8ad-0ac2-4d58-abdb-0808903c78ad resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 450 - '@id' : mfg:6405b8ad-0ac2-4d58-abdb-0808903c78ad '@type' : RecipeResource resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer - '@id' : mfg:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : RecipeFlow recipeInputOf : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf action : use recipeFlowResource : mfg:e02e3f6b-420a-4ba8-89b0-909d7363ce07 effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 5.5 - '@id' : mfg:e02e3f6b-420a-4ba8-89b0-909d7363ce07 '@type' : RecipeResource resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # injection molding machine # the plan (shown running \"forwards\") - '@id' : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Buckets run number 381 due : 2019-04-08T17:00:00-5:00 - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 900 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : Commitment inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : use provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # injection molding machine effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 11 - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Make bucket white 5 gallon plannedWithin : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f basedOn : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 14 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:fbff9852-36ca-4364-a943-bc0b49e1cab5 '@type' : Commitment inputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket stage : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # 'make' process specification resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 '@type' : Process name : QT bucket white 5 gallon plannedWithin : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f basedOn : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 14 - '@id' : mfg:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : Commitment independentDemandOf : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the plan outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 action : modify state : pass provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : Commitment outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 0 # manufacture and test the buckets according to plan - '@id' : mfg:e18c808c-929a-450d-9d0d-3b3f531bc126 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # polymer stock resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 925 - '@id' : mfg:5d2fe7da-b91b-4dab-91d9-68db80c1feb7 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process action : use provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:23799c14-c368-4653-a584-83bf9ae8b82a # the machine effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 10.7 - '@id' : mfg:8791913c-0152-4c32-bb3f-f25d61df736c '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # buckets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 #buckets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process action : modify state : pass provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # buckets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 998 - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicEvent outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # polymer stock resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 1.8 # resources after - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource name : Bucket white 5 gallon resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1318 state : pass stage : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 #QT - '@id' : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : EconomicResource name : Thermoplastic polymer white resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 1531.8 - '@id' : mfg:23799c14-c368-4653-a584-83bf9ae8b82a '@type' : EconomicResource name : Injection molding maching resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a trackingIdentifier : DDE098989099911 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 unitOfEffort : om2:hour","title":"More Complex"},{"location":"examples/ex-complex/#complex-examples","text":"","title":"Complex Examples"},{"location":"examples/ex-complex/#transportation-with-transfer","text":"Bob purchases 30kg of apples from Alice and Claudia transports them (FOB destination). The receipt of the apples triggers the transfer of ownership. # Transportation with transfer '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ claudia : https://claudia.example/ '@id' : rgh:valueflows/valueflows/master/examples/transport-with-transfer.yaml '@graph' : # Bob purchases 30kg of apples from Alice and Claudia transports them (FOB destination) # resources before - '@id' : alice:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 230 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 230 # alice commits to transfer some apples to bob - '@id' : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : Commitment action : transfer resourceClassifiedAs : wd:Q41777871 # haralson apples provider : https://alice.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # alice and claudia agree on transportation of the apples - '@id' : urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0 '@type' : Agreement skos:note : exchange transportation service for currency - '@id' : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Commitment action : transfer resourceClassifedAs : wd:Q4917 # US Dollar provider : https://alice.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 10 clauseOf : urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0 # transportation agreement - '@id' : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a '@type' : Commitment skos:note : Transportation of alice's apples from alice's location to bob's location action : service resourceClassifiedAs : wd:Q7590 # transportation service provider : https://claudia.example/ receiver : https://alice.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 clauseOf : urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0 # transportation agreement # alice transfers custody of the apples to claudia for transportation - '@id' : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f87 '@type' : EconomicEvent action : transfer-custody resourceClassifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 provider : https://alice.example/ receiver : https://claudia.example/ resourceInventoriedAs : alice:21f361a6-2375-46bb-b192-c21b5ba833bf # alice's apples toResourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 # claudia's bill of lading on the truck resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # resources snapshot - '@id' : alice:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 230 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 200 - '@id' : claudia:27be5cab-d740-4194-9298-1661a69d9d95 '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # claudia transports the apples in two hops - '@id' : claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960 '@type' : Process skos:note : Claudia transports the apples - '@id' : claudia:fd399b37-0740-4a68-a184-1e655021ca21 '@type' : EconomicEvent inputOf : claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960 action : pickup resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:57f1c1d0-432e-4bfa-9d32-002b8955a708 '@type' : EconomicEvent outputOf : claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960 action : dropoff resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c '@type' : Process skos:note : Claudia transports the apples - '@id' : claudia:856c43b1-0a63-445f-a56f-707b257f086e '@type' : EconomicEvent inputOf : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c action : pickup resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:9cb4944b-d26d-4774-a530-d18f2747c0d8 '@type' : EconomicEvent outputOf : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c action : dropoff resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 provider : https://claudia.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : urn:uuid:68cabaf3-deb8-4bd5-a439-798263abe35a '@type' : EconomicEvent skos:note : Transportation of alice's apples from alice's location to bob's location outputOf : claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c action : service resourceClassifiedAs : wd:Q7590 # transportation service provider : https://claudia.example/ receiver : https://alice.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 '@type' : Fulfillment fulfills : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # the commitment fulfilledBy : urn:uuid:68cabaf3-deb8-4bd5-a439-798263abe35a # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # bob receives the apples - '@id' : urn:uuid:7a63ea10-b1c3-441a-9a08-fb8630c02614 '@type' : EconomicEvent action : transfer-custody resourceClassifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 resourceInventoriedAs : claudia:27be5cab-d740-4194-9298-1661a69d9d95 toResourceInventoriedAs : bob:9bd19194-a36d-4a1f-896b-8082887962cb provider : https://claudia.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # receipt of the apples triggers finalizing the transfer of ownership - '@id' : urn:uuid:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 '@type' : EconomicEvent action : transfer-all-rights resourceClassifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 provider : https://alice.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 triggeredBy : urn:uuid:7a63ea10-b1c3-441a-9a08-fb8630c02614 - '@id' : urn:uuid:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : Fulfillment fulfills : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # the commitment fulfilledBy : urn:uuid:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 # the economic event resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 # resources snapshot - '@id' : alice:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9 # only the possessed amount accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 200 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 200 - '@id' : bob:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples trackingIdentifier : lot-alice-apples-2018-10-11 locatedAt : geo:b52a5815-fae9-43bf-be95-833b95dc0ada # only the possessed amount accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 30 - '@id' : claudia:27be5cab-d740-4194-9298-1661a69d9d95 # claudia's bill of lading on the truck '@type' : EconomicResource classifiedAs : wd:Q41777871 # haralson apples onhandQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 0 # alice pays claudia for the transportation service - '@id' : urn:uuid:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 '@type' : EconomicEvent action : transfer resourceClassifedAs : wd:Q4917 # US Dollar resourceInventoriedAs : alice:daa2ec3b-2c1a-4eb1-839f-8dcec1a1f93a # alice's bank account toResourceInventoriedAs : claudia:bd5806d6-4a36-45b9-b3b6-3e7d361a5a14 # claudia's bank account provider : https://alice.example/ receiver : https://claudia.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 10 - '@id' : urn:uuid:fbff9852-36ca-4364-a943-bc0b49e1cab5 '@type' : Fulfillment fulfills : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 # the commitment fulfilledBy : urn:uuid:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 10","title":"Transportation with transfer"},{"location":"examples/ex-complex/#manufacturing-and-workflow","text":"A component is produced (manufacturing pattern) and tested (workflow pattern). QT (\"quality testing\") gives pass and/or fail outputs. The failed components are passed back into a source resource (because it can be re-used as an input as part of the QT process, to be used in this or the next manufacturing run. The QT needs the stage and state of the input component resource, because QT would only be done on components that are made and not tested yet. By the same token, components would only be sent into the next assembly process if they have passed the QT process/stage (not part of this example). This example includes recipe, plan, and actuals. # Example: Workflow recipe, plan, execution, including stage and state usage '@context' : - https://git.io/vf-examples-jsonld-context - mfg : https://manufacturing.example/ '@id' : rgh:valueflows/valueflows/master/examples/workflow-stage-state.yaml '@graph' : # specifications - '@id' : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ResourceSpecification name : Bucket white 5 gallon unitOfResource : om2:one substitutable : true - '@id' : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 '@type' : ResourceSpecification name : Thermoplastic polymer white unitOfResource : om2:kilogram substitutable : true - '@id' : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a '@type' : ResourceSpecification name : Injection molding machine unitOfResource : om2:one unitOfEffort : om2:hour substitutable : true - '@id' : mfg:27be5cab-d740-4194-9298-1661a69d9d95 '@type' : ProcessSpecification name : Make injection molded buckets - '@id' : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 '@type' : ProcessSpecification name : QT injection molded buckets # resources before - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource name : Bucket white 5 gallon resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 320 state : pass stage : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # QT - '@id' : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : EconomicResource name : Thermoplastic polymer white resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 2455 - '@id' : mfg:23799c14-c368-4653-a584-83bf9ae8b82a '@type' : EconomicResource name : Injection molding maching resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a trackingIdentifier : DDE098989099911 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 unitOfEffort : om2:hour # the recipe (here the recipe runs \"backwards\" from the final product, similar to a BOM) - '@id' : mfg:ac9ec98d-db80-44dc-97be-7aa149b2fe5d '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket - '@id' : mfg:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b action : modify state : pass recipeFlowResource : mfg:ac9ec98d-db80-44dc-97be-7aa149b2fe5d resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 500 - '@id' : mfg:a3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : RecipeResource resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer - '@id' : mfg:54b814ee-62dc-40c1-bb96-f8582aa4f771 '@type' : RecipeFlow recipeOutputOf : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b action : produce # fail recipeFlowResource : mfg:a3be5259d-10f0-431c-9fec-9c0c15a461d3 resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 0 - '@id' : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b '@type' : RecipeProcess name : QT bucket white 5 gallon - minimum run processConformsTo : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 1 - '@id' : mfg:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c '@type' : RecipeFlow recipeInputOf : mfg:a8356625-bf64-4c16-9099-28aa1b718c4b action : accept recipeFlowResource : mfg:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead stage : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # 'make' process specification resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 500 - '@id' : mfg:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket - '@id' : mfg:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf action : produce recipeFlowResource : mfg:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 500 - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : RecipeProcess name : Make bucket white 5 gallon - minimum run processConformsTo : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 7 - '@id' : mfg:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : RecipeFlow recipeInputOf : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf action : consume recipeFlowResource : mfg:6405b8ad-0ac2-4d58-abdb-0808903c78ad resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 450 - '@id' : mfg:6405b8ad-0ac2-4d58-abdb-0808903c78ad '@type' : RecipeResource resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer - '@id' : mfg:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : RecipeFlow recipeInputOf : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf action : use recipeFlowResource : mfg:e02e3f6b-420a-4ba8-89b0-909d7363ce07 effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 5.5 - '@id' : mfg:e02e3f6b-420a-4ba8-89b0-909d7363ce07 '@type' : RecipeResource resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # injection molding machine # the plan (shown running \"forwards\") - '@id' : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Buckets run number 381 due : 2019-04-08T17:00:00-5:00 - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 900 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : Commitment inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : use provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # injection molding machine effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 11 - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Make bucket white 5 gallon plannedWithin : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f basedOn : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 14 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:fbff9852-36ca-4364-a943-bc0b49e1cab5 '@type' : Commitment inputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket stage : mfg:27be5cab-d740-4194-9298-1661a69d9d95 # 'make' process specification resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 '@type' : Process name : QT bucket white 5 gallon plannedWithin : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f basedOn : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # the process specification time:hasDuration : time:unitType unit:Hour time:numericDuration 14 - '@id' : mfg:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : Commitment independentDemandOf : mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the plan outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 action : modify state : pass provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : Commitment outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 0 # manufacture and test the buckets according to plan - '@id' : mfg:e18c808c-929a-450d-9d0d-3b3f531bc126 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # polymer stock resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 925 - '@id' : mfg:5d2fe7da-b91b-4dab-91d9-68db80c1feb7 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process action : use provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:23799c14-c368-4653-a584-83bf9ae8b82a # the machine effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 10.7 - '@id' : mfg:8791913c-0152-4c32-bb3f-f25d61df736c '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # buckets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 #buckets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process action : modify state : pass provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # buckets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 998 - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicEvent outputOf : mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # polymer stock resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 1.8 # resources after - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource name : Bucket white 5 gallon resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1318 state : pass stage : mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 #QT - '@id' : mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : EconomicResource name : Thermoplastic polymer white resourceConformsTo : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 1531.8 - '@id' : mfg:23799c14-c368-4653-a584-83bf9ae8b82a '@type' : EconomicResource name : Injection molding maching resourceConformsTo : urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a trackingIdentifier : DDE098989099911 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 unitOfEffort : om2:hour","title":"Manufacturing and workflow"},{"location":"examples/ex-exchange/","text":"Transfer and Exchange Examples Exchange agreement An exchange agreement with commitments. # Example: Simple exchange agreement '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ '@id' : rgh:valueflows/valueflows/master/examples/exch-agreement.yaml '@graph' : # Exchange agreement with commitments - '@id' : alice:57f1c1d0-432e-4bfa-9d32-002b8955a708 '@type' : Agreement skos:note : Alice commits to giving Bob 50 kg of apples in exchange for 10 liters of apple cider. - '@id' : alice:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c '@type' : Commitment clauseOf : alice:57f1c1d0-432e-4bfa-9d32-002b8955a708 action : transfer provider : https://alice.example/ receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q89 # apples resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 50 - '@id' : bob:fd399b37-0740-4a68-a184-1e655021ca21 '@type' : Commitment clauseOf : alice:57f1c1d0-432e-4bfa-9d32-002b8955a708 action : transfer provider : https://bob.example/ receiver : https://alice.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q5977438 # soft apple cider resourceQuantity : om2:hasUnit : om2:litre om2:hasNumericalValue : 10 Retail exchange An exchange without prior commitments. Note we are still using the Agreement to tie together the reciprocal events, even there were no commitments ahead of time. # Example: Simple retail exchange without commitments '@context' : - https://git.io/vf-examples-jsonld-context - carol : https://carol.example/ store : https://store.example/ '@id' : rgh:valueflows/valueflows/master/examples/exch-retail.yaml '@graph' : - '@id' : store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d '@type' : Agreement skos:note : Carol purchased a new bucket at the hardware store and paid 5 dollars for it. - '@id' : store:a8356625-bf64-4c16-9099-28aa1b718c4b '@type' : EconomicEvent realizationOf : store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d action : transfer provider : https://store.example/ receiver : https://carol.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q47107 # bucket resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : store:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c '@type' : EconomicEvent realizationOf : store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d action : transfer provider : https://carol.example/ receiver : https://store.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US dollar resourceInventoriedAs : carol:e56fd654-7b94-4d96-8e60-de39e08329a7 # Carol's bank account resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 5 Crypto-currency transfer A simple transfer of a currency from one agent to another. # Transfer of crypto-currency, ignoring the fee, but to record time involved in the transfer validation process '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ alice : https://alice.example/ fair : https://faircoin.example/ '@id' : rgh:valueflows/valueflows/master/examples/transfer-crypto.yaml '@graph' : # accounts before - '@id' : fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : EconomicResource skos:note : Alice's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 540 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 480 # transfer from Alice to Bob - '@id' : urn:uuid:e5afaa28-1080-4912-835b-46883efb83e6 '@type' : EconomicEvent action : transfer resourceClassifiedAs : wd:Q21002847 # FairCoin resourceInventoriedAs : fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead # Alice's wallet address toResourceInventoriedAs : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 # Bob's wallet address provider : https://alice.example receiver : https://bob.example resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 100 hasPointInTime : 2019-04-18T8:30:08-5:00 # accounts after - '@id' : fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : EconomicResource skos:note : Alice's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 440 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 580 Moving crypto-currency A simple move of a currency from one account to another by one agent. # Move of crypto-currency for one agent, ignoring the fee '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ fair : https://faircoin.example/ '@id' : rgh:valueflows/valueflows/master/examples/move-crypto.yaml '@graph' : # accounts before - '@id' : fair:6fb358a3-2859-4d6a-a4fa-431603ee70f5 '@type' : EconomicResource skos:note : Bob's first wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 540 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's second wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 480 # move between Bob's accounts - '@id' : urn:uuid:e5afaa28-1080-4912-835b-46883efb83e6 '@type' : EconomicEvent action : move resourceClassifiedAs : wd:Q21002847 # FairCoin resourceInventoriedAs : fair:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # Bob's first wallet address toResourceInventoriedAs : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 # Bob's second wallet address provider : https://bob.example receiver : https://bob.example resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 100 hasPointInTime : 2019-04-18T8:30:08-5:00 # accounts after - '@id' : fair:b6fb358a3-2859-4d6a-a4fa-431603ee70f5 '@type' : EconomicResource skos:note : Bob's first wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 440 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's second wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 580 Checkout book Checking out and checking back in a library book (a loan). # Checking out a book '@context' : - https://git.io/vf-examples-jsonld-context - library : https://library.example/ bob : https://bob.example/ '@id' : rgh:valueflows/valueflows/master/examples/checkout-book.yaml '@graph' : # resource before - '@id' : library:2402b57c-1c45-423a-acb2-f50961c97d65 '@type' : EconomicResource skos:note : Valueflows cookbook ISBN:1234 copy 2 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 onhandQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # check out - '@id' : library:f47064eb-7120-4b31-b882-770165901fe6 '@type' : Agreement skos:note : loaning Valueflows cookbook to Bob - '@id' : urn:uuid:54b814ee-62dc-40c1-bb96-f8582aa4f771 '@type' : EconomicEvent realizationOf : library:f47064eb-7120-4b31-b882-770165901fe6 action : transfer-custody resourceInventoriedAs : library:2402b57c-1c45-423a-acb2-f50961c97d65 hasPointInTime : 2019-04-18T8:00:00-5:00 provider : https://library.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9 '@type' : Commitment clauseOf : library:f47064eb-7120-4b31-b882-770165901fe6 action : transfer-custody resourceInventoriedAs : library:2402b57c-1c45-423a-acb2-f50961c97d65 provider : https://bob.example/ receiver : https://library.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 due : 2019-05-17T18:00:00-5:00 # resource after check out - '@id' : library:2402b57c-1c45-423a-acb2-f50961c97d65 '@type' : EconomicResource skos:note : Valueflows cookbook ISBN:1234 copy 2 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 onhandQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 0 # return - '@id' : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent realizationOf : library:f47064eb-7120-4b31-b882-770165901fe6 action : transfer-custody resourceInventoriedAs : library:2402b57c-1c45-423a-acb2-f50961c97d65 provider : https://bob.example/ receiver : https://library.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 hasPointInTime : 2019-05-14T10:20:00-5:00 - '@id' : urn:uuid:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : Fulfillment fulfills : urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9 # the commitment fulfilledBy : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # resource after return - '@id' : library:2402b57c-1c45-423a-acb2-f50961c97d65 '@type' : EconomicResource skos:note : Valueflows cookbook ISBN:1234 copy 2 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 onhandQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 Claim Logged work triggers a claim for future income distribution for that work. # Example: Claim (simple) '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ mfg : https://manufacturer.example/ '@id' : rgh:valueflows/valueflows/master/examples/claim.yaml '@graph' : # Bob does some work to create a product that the mfg team wishes to sell on the marketplace - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c83 '@type' : EconomicEvent action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 7 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-14T15:00:00-0:00 # this triggers a claim for payment in the future based on an income distribution agreement among the mfg group - '@id' : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 '@type' : Claim action : transfer provider : https://manufacturing.example/ receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q1104069 # Canadian dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 140 dcterms:created : 2018-10-14T15:30:00-0:00 triggeredBy : mfg:02b39a30-3e04-4305-9656-7f261aa63c83 agreedIn : mfg:e1721a61-cd47-4556-84b9-8b1b81da15be # a distribution agreement (not detailed in example) # half of the manufactured product is sold along with some other products, and income is distributed - '@id' : mfg:c7897c39-7f05-4a5d-a487-80e130a2414a '@type' : EconomicEvent action : transfer provider : https://manufacturing.example/ receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q1104069 # Canadian dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 260 # here Bob received income for more than one work event (others not included in the example) hasPointInTime : 2018-10-25T09:30:00-0:00 - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0ada '@type' : Settlement settles : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # the claim settlededBy : mfg:c7897c39-7f05-4a5d-a487-80e130a2414a # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 70 # half of the original claim for the work Plan from recipe with production and exchange This shows a simple recipe that includes both a process and the exchange of work that is input to the process for currency. # Example: Simple recipe with both process and exchange '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ doc : https://documenters.example '@id' : rgh:valueflows/valueflows/master/examples/recipe-with-exchange.yaml '@graph' : # the recipe - '@id' : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ResourceSpecification name : Training handout uri : https://documenters.example/training-handout skos:note : This is an electronic version of the formatted handout - '@id' : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : ResourceSpecification name : Technical writing - '@id' : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # the spec name : Training handout - '@id' : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : produce recipeFlowResource : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 # handout resourceQuantity : om2:hasUnit : one om2:hasNumericalValue : 1 - '@id' : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : RecipeProcess name : Write and format training handout - '@id' : urn:uuid:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : RecipeFlow recipeInputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf recipeClauseOf : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb # the recipe exchange action : work resourceConformsTo : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 resourceClassifiedAs : wd:Q1193158 # technical writing effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 15 - '@id' : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : RecipeExchange name : Exchange work for FairCoin - '@id' : urn:uuid:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : RecipeFlow recipeClauseOf : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb # the recipe exchange action : transfer resourceConformsTo : wd:Q21002847 # FairCoin resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 300 # the plan - '@id' : doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Training Handout and Payment skos:note : Write and format the training handout, payment for writing work. due : 2019-04-08T17:00:00-5:00 dcterms:created : 2019-04-01T10:35:00-5:00 - '@id' : doc:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment independentDemandOf : doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f outputOf : doc:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://documenters.example/ receiver : https://documenters.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # training handout resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : doc:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Write and format training handout plannedWithin : doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : doc:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : Commitment inputOf : doc:02b39a30-3e04-4305-9656-7f261aa63c84 clauseOf : urn:uuid:583e83d9-a46d-44ff-bd71-88513a1d83c0 action : work provider : https://alice.example/ receiver : https://documenters.example/ resourceConformsTo : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 resourceClassifiedAs : wd:Q1193158 # technical writing effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 20 # the estimate for this particular work is higher than the recipe's - '@id' : urn:uuid:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : Agreement name : Exchange technical documentation work for FairCoin - '@id' : doc:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment clauseOf : doc:02b39a30-3e04-4305-9656-7f261aa63c84 action : transfer provider : https://documenters.example/ receiver : https://alice.example/ resourceConformsTo : wd:Q21002847 # FairCoin resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 400","title":"Exchanges and Transfers"},{"location":"examples/ex-exchange/#transfer-and-exchange-examples","text":"","title":"Transfer and Exchange Examples"},{"location":"examples/ex-exchange/#exchange-agreement","text":"An exchange agreement with commitments. # Example: Simple exchange agreement '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ '@id' : rgh:valueflows/valueflows/master/examples/exch-agreement.yaml '@graph' : # Exchange agreement with commitments - '@id' : alice:57f1c1d0-432e-4bfa-9d32-002b8955a708 '@type' : Agreement skos:note : Alice commits to giving Bob 50 kg of apples in exchange for 10 liters of apple cider. - '@id' : alice:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c '@type' : Commitment clauseOf : alice:57f1c1d0-432e-4bfa-9d32-002b8955a708 action : transfer provider : https://alice.example/ receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q89 # apples resourceQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 50 - '@id' : bob:fd399b37-0740-4a68-a184-1e655021ca21 '@type' : Commitment clauseOf : alice:57f1c1d0-432e-4bfa-9d32-002b8955a708 action : transfer provider : https://bob.example/ receiver : https://alice.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q5977438 # soft apple cider resourceQuantity : om2:hasUnit : om2:litre om2:hasNumericalValue : 10","title":"Exchange agreement"},{"location":"examples/ex-exchange/#retail-exchange","text":"An exchange without prior commitments. Note we are still using the Agreement to tie together the reciprocal events, even there were no commitments ahead of time. # Example: Simple retail exchange without commitments '@context' : - https://git.io/vf-examples-jsonld-context - carol : https://carol.example/ store : https://store.example/ '@id' : rgh:valueflows/valueflows/master/examples/exch-retail.yaml '@graph' : - '@id' : store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d '@type' : Agreement skos:note : Carol purchased a new bucket at the hardware store and paid 5 dollars for it. - '@id' : store:a8356625-bf64-4c16-9099-28aa1b718c4b '@type' : EconomicEvent realizationOf : store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d action : transfer provider : https://store.example/ receiver : https://carol.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q47107 # bucket resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : store:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c '@type' : EconomicEvent realizationOf : store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d action : transfer provider : https://carol.example/ receiver : https://store.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US dollar resourceInventoriedAs : carol:e56fd654-7b94-4d96-8e60-de39e08329a7 # Carol's bank account resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 5","title":"Retail exchange"},{"location":"examples/ex-exchange/#crypto-currency-transfer","text":"A simple transfer of a currency from one agent to another. # Transfer of crypto-currency, ignoring the fee, but to record time involved in the transfer validation process '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ alice : https://alice.example/ fair : https://faircoin.example/ '@id' : rgh:valueflows/valueflows/master/examples/transfer-crypto.yaml '@graph' : # accounts before - '@id' : fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : EconomicResource skos:note : Alice's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 540 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 480 # transfer from Alice to Bob - '@id' : urn:uuid:e5afaa28-1080-4912-835b-46883efb83e6 '@type' : EconomicEvent action : transfer resourceClassifiedAs : wd:Q21002847 # FairCoin resourceInventoriedAs : fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead # Alice's wallet address toResourceInventoriedAs : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 # Bob's wallet address provider : https://alice.example receiver : https://bob.example resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 100 hasPointInTime : 2019-04-18T8:30:08-5:00 # accounts after - '@id' : fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : EconomicResource skos:note : Alice's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 440 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 580","title":"Crypto-currency transfer"},{"location":"examples/ex-exchange/#moving-crypto-currency","text":"A simple move of a currency from one account to another by one agent. # Move of crypto-currency for one agent, ignoring the fee '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ fair : https://faircoin.example/ '@id' : rgh:valueflows/valueflows/master/examples/move-crypto.yaml '@graph' : # accounts before - '@id' : fair:6fb358a3-2859-4d6a-a4fa-431603ee70f5 '@type' : EconomicResource skos:note : Bob's first wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 540 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's second wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 480 # move between Bob's accounts - '@id' : urn:uuid:e5afaa28-1080-4912-835b-46883efb83e6 '@type' : EconomicEvent action : move resourceClassifiedAs : wd:Q21002847 # FairCoin resourceInventoriedAs : fair:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # Bob's first wallet address toResourceInventoriedAs : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 # Bob's second wallet address provider : https://bob.example receiver : https://bob.example resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 100 hasPointInTime : 2019-04-18T8:30:08-5:00 # accounts after - '@id' : fair:b6fb358a3-2859-4d6a-a4fa-431603ee70f5 '@type' : EconomicResource skos:note : Bob's first wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 440 - '@id' : fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : EconomicResource skos:note : Bob's second wallet address classifiedAs : wd:Q21002847 # FairCoin accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 580","title":"Moving crypto-currency"},{"location":"examples/ex-exchange/#checkout-book","text":"Checking out and checking back in a library book (a loan). # Checking out a book '@context' : - https://git.io/vf-examples-jsonld-context - library : https://library.example/ bob : https://bob.example/ '@id' : rgh:valueflows/valueflows/master/examples/checkout-book.yaml '@graph' : # resource before - '@id' : library:2402b57c-1c45-423a-acb2-f50961c97d65 '@type' : EconomicResource skos:note : Valueflows cookbook ISBN:1234 copy 2 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 onhandQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # check out - '@id' : library:f47064eb-7120-4b31-b882-770165901fe6 '@type' : Agreement skos:note : loaning Valueflows cookbook to Bob - '@id' : urn:uuid:54b814ee-62dc-40c1-bb96-f8582aa4f771 '@type' : EconomicEvent realizationOf : library:f47064eb-7120-4b31-b882-770165901fe6 action : transfer-custody resourceInventoriedAs : library:2402b57c-1c45-423a-acb2-f50961c97d65 hasPointInTime : 2019-04-18T8:00:00-5:00 provider : https://library.example/ receiver : https://bob.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9 '@type' : Commitment clauseOf : library:f47064eb-7120-4b31-b882-770165901fe6 action : transfer-custody resourceInventoriedAs : library:2402b57c-1c45-423a-acb2-f50961c97d65 provider : https://bob.example/ receiver : https://library.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 due : 2019-05-17T18:00:00-5:00 # resource after check out - '@id' : library:2402b57c-1c45-423a-acb2-f50961c97d65 '@type' : EconomicResource skos:note : Valueflows cookbook ISBN:1234 copy 2 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 onhandQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 0 # return - '@id' : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent realizationOf : library:f47064eb-7120-4b31-b882-770165901fe6 action : transfer-custody resourceInventoriedAs : library:2402b57c-1c45-423a-acb2-f50961c97d65 provider : https://bob.example/ receiver : https://library.example/ resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 hasPointInTime : 2019-05-14T10:20:00-5:00 - '@id' : urn:uuid:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : Fulfillment fulfills : urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9 # the commitment fulfilledBy : urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # resource after return - '@id' : library:2402b57c-1c45-423a-acb2-f50961c97d65 '@type' : EconomicResource skos:note : Valueflows cookbook ISBN:1234 copy 2 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 onhandQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1","title":"Checkout book"},{"location":"examples/ex-exchange/#claim","text":"Logged work triggers a claim for future income distribution for that work. # Example: Claim (simple) '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ mfg : https://manufacturer.example/ '@id' : rgh:valueflows/valueflows/master/examples/claim.yaml '@graph' : # Bob does some work to create a product that the mfg team wishes to sell on the marketplace - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c83 '@type' : EconomicEvent action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 7 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-14T15:00:00-0:00 # this triggers a claim for payment in the future based on an income distribution agreement among the mfg group - '@id' : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 '@type' : Claim action : transfer provider : https://manufacturing.example/ receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q1104069 # Canadian dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 140 dcterms:created : 2018-10-14T15:30:00-0:00 triggeredBy : mfg:02b39a30-3e04-4305-9656-7f261aa63c83 agreedIn : mfg:e1721a61-cd47-4556-84b9-8b1b81da15be # a distribution agreement (not detailed in example) # half of the manufactured product is sold along with some other products, and income is distributed - '@id' : mfg:c7897c39-7f05-4a5d-a487-80e130a2414a '@type' : EconomicEvent action : transfer provider : https://manufacturing.example/ receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q1104069 # Canadian dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 260 # here Bob received income for more than one work event (others not included in the example) hasPointInTime : 2018-10-25T09:30:00-0:00 - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0ada '@type' : Settlement settles : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # the claim settlededBy : mfg:c7897c39-7f05-4a5d-a487-80e130a2414a # the economic event resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 70 # half of the original claim for the work","title":"Claim"},{"location":"examples/ex-exchange/#plan-from-recipe-with-production-and-exchange","text":"This shows a simple recipe that includes both a process and the exchange of work that is input to the process for currency. # Example: Simple recipe with both process and exchange '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ doc : https://documenters.example '@id' : rgh:valueflows/valueflows/master/examples/recipe-with-exchange.yaml '@graph' : # the recipe - '@id' : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ResourceSpecification name : Training handout uri : https://documenters.example/training-handout skos:note : This is an electronic version of the formatted handout - '@id' : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 '@type' : ResourceSpecification name : Technical writing - '@id' : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # the spec name : Training handout - '@id' : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : produce recipeFlowResource : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 # handout resourceQuantity : om2:hasUnit : one om2:hasNumericalValue : 1 - '@id' : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : RecipeProcess name : Write and format training handout - '@id' : urn:uuid:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : RecipeFlow recipeInputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf recipeClauseOf : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb # the recipe exchange action : work resourceConformsTo : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 resourceClassifiedAs : wd:Q1193158 # technical writing effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 15 - '@id' : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : RecipeExchange name : Exchange work for FairCoin - '@id' : urn:uuid:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : RecipeFlow recipeClauseOf : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb # the recipe exchange action : transfer resourceConformsTo : wd:Q21002847 # FairCoin resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 300 # the plan - '@id' : doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Training Handout and Payment skos:note : Write and format the training handout, payment for writing work. due : 2019-04-08T17:00:00-5:00 dcterms:created : 2019-04-01T10:35:00-5:00 - '@id' : doc:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment independentDemandOf : doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f outputOf : doc:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://documenters.example/ receiver : https://documenters.example/ resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # training handout resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : doc:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Write and format training handout plannedWithin : doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : doc:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : Commitment inputOf : doc:02b39a30-3e04-4305-9656-7f261aa63c84 clauseOf : urn:uuid:583e83d9-a46d-44ff-bd71-88513a1d83c0 action : work provider : https://alice.example/ receiver : https://documenters.example/ resourceConformsTo : urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 resourceClassifiedAs : wd:Q1193158 # technical writing effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 20 # the estimate for this particular work is higher than the recipe's - '@id' : urn:uuid:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : Agreement name : Exchange technical documentation work for FairCoin - '@id' : doc:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment clauseOf : doc:02b39a30-3e04-4305-9656-7f261aa63c84 action : transfer provider : https://documenters.example/ receiver : https://alice.example/ resourceConformsTo : wd:Q21002847 # FairCoin resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 400","title":"Plan from recipe with production and exchange"},{"location":"examples/ex-planning/","text":"Planning Examples Simple plan A plan for creating two different resources needed for one campaign. The first resource requires two chained processes. # Example: Simple operational plan '@context' : - https://git.io/vf-examples-jsonld-context - printer : https://printer.example/ '@id' : rgh:valueflows/valueflows/master/examples/simple-plan.yaml '@graph' : - '@id' : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Anti climate change campaign materials skos:note : A set of printed materials for the campaign by Students for Peace and Justice due : 2019-04-08T17:00:00-5:00 dcterms:created : 2019-04-01T10:35:00-5:00 - '@id' : printer:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Print climate brochures plannedWithin : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : printer:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment outputOf : printer:02b39a30-3e04-4305-9656-7f261aa63c84 independentDemandOf : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f action : produce provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # specific brochures resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : printer:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment inputOf : printer:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:3129ca8b-fcda-45be-bbda-294dc924d3b9 # paper resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1020 - '@id' : printer:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : Process name : Print climate posters plannedWithin : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : printer:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Commitment outputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb independentDemandOf : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f action : produce provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:6078f30a-b15b-4b1c-8e77-797abae11378 # specific posters resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 35 - '@id' : printer:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : Commitment inputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb action : consume provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:e56fd654-7b94-4d96-8e60-de39e08329a7 # paper resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 35 - '@id' : printer:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : Commitment inputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb action : use provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:e4783bef-9006-490c-9c03-389272c7444d # printing plate for the specific posters effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 1.5 - '@id' : printer:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b '@type' : Process name : Create poster plate plannedWithin : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : printer:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : Commitment outputOf : printer:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b action : produce provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:e4783bef-9006-490c-9c03-389272c7444d # printing plate for the specific posters resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : printer:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 '@type' : Commitment inputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb action : consume provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:86ad6e22-7640-4b93-972a-db7177ab2616 # blank printing plate resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 Simple plan from recipe A plan generated from a recipe, for making a component. # Example: Simple plan from recipe '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ sensor : https://sensorica.example/ open : https://openhardware.example '@id' : rgh:valueflows/valueflows/master/examples/plan-from-recipe.yaml '@graph' : # the recipe - '@id' : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ResourceSpecification name : Delivery fiber uri : https://openhardware.example/delivery-fiber skos:note : Optical fiber that connects 2 devices. - '@id' : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # the spec name : Delivery fiber skos:note : Optical fiber that makes the connection between the device and the transducer. An adapter can also be used between the transducer and the delivery fiber. - '@id' : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : produce recipeFlowResource : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 # delivery fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 - '@id' : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : RecipeProcess name : Make delivery fiber component skos:note : The delivery fiber makes the optical connection between an optical transducer and the sensor [electro-photonics device]. Requires cutting a piece of optical fiber and connectorizing it - '@id' : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : RecipeFlow recipeInputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : consume resourceClassifiedAs : wd:Q162 # optical fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 skos:note : Optical guide, can be of glass of polymer. Usually it comes in a cylindrical shape. Can be MM (multimode) or SM (single mode) - '@id' : urn:uuid:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : RecipeFlow recipeInputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : work resourceClassifiedAs : wd:Q640621 # optical engineering effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 2 # the plan - '@id' : sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Delivery fiber skos:note : Make the optical fiber that makes the connection between the device and the transducer. due : 2019-04-08T17:00:00-5:00 dcterms:created : 2019-04-01T10:35:00-5:00 - '@id' : sensor:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment independentDemandOf : sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f outputOf : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://sensorica.example/ receiver : https://sensorica.example/ resourceConformsTo : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 # delivery fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 - '@id' : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Make optical fiber component plannedWithin : sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f skos:note : The delivery fiber makes the optical connection between an optical transducer and the sensor [electro-photonics device]. Requires cutting a piece of optical fiber and connectorizing it - '@id' : sensor:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment inputOf : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://sensorica.example/ receiver : https://sensorica.example/ resourceClassifiedAs : wd:Q162 # optical fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 skos:note : Optical guide, can be of glass of polymer. Usually it comes in a cylindrical shape. Can be MM (multimode) or SM (single mode) - '@id' : sensor:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : Commitment inputOf : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 action : work provider : https://alice.example/ receiver : https://sensorica.example/ resourceClassifiedAs : wd:Q640621 # optical engineering effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 2 Fulfillment and satisfaction Commitments satisfying intents, and economic events fulfilling commitments. # Example: Intent - satisfied by - Commitment - fulfilled by - EconomicEvent '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ mfg : https://manufacturer.example/ '@id' : rgh:valueflows/valueflows/master/examples/fulfill-satisfy.yaml '@graph' : # A manufacturer makes a plan that includes an intent for some work which # they want someone in their network to commit to doing on Oct. 14 - 15 - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : Intent action : work receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-15T18:00:00-0:00 # Bob commits to doing the work on Oct. 14 - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Commitment action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-14T17:00:00-0:00 - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Satisfaction satisfies : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # the intent satisfiedBy : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 # Bob does the work in two 4-hour shifts on Oct. 14 - '@id' : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-14T12:00:00-0:00 - '@id' : mfg:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : Fulfillment fulfills : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment fulfilledBy : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 # the economic event effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4 - '@id' : mfg:c7897c39-7f05-4a5d-a487-80e130a2414b '@type' : EconomicEvent action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4 hasBeginning : 2018-10-14T13:00:00-0:00 hasEnd : 2018-10-14T17:00:00-0:00 - '@id' : mfg:0f563083-8da4-46fe-adc3-68b05ba06320 '@type' : Fulfillment fulfills : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment fulfilledBy : mfg:c7897c39-7f05-4a5d-a487-80e130a2414b # the second economic event effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4 Proposals to sell and give away A simple proposal with reciprocity expected, then another one to give the item away. # Example: Simple proposals based on one intent '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposals-intent.yaml '@graph' : # One offer with expected reciprocity - '@id' : alice:8791913c-0152-4c32-bb3f-f25d61df736c '@type' : Proposal name : Used bike hasBeginning : 2019-03-01T00:00:00-5:00 hasEnd : 2019-03-31T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : alice:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Intent name : Old adult Schwinn one speed bike skos:note : Pedals fine, not good for hills, has basket, brakes are a bit dodgy action : transfer provider : https://alice.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q11442 # bicycle - '@id' : alice:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : ProposedIntent publishedIn : alice:8791913c-0152-4c32-bb3f-f25d61df736c # the proposal publishes : alice:02b39a30-3e04-4305-9656-7f261aa63c84 # the intent reciprocal : false - '@id' : alice:e72f7d1d-4f0a-4518-a44c-96658cafda95 '@type' : Intent name : Payment action : transfer receiver : https://alice.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 15 - '@id' : alice:f325a950-5737-488d-b122-8f21114d0eb0 '@type' : ProposedIntent publishedIn : alice:8791913c-0152-4c32-bb3f-f25d61df736c # the proposal publishes : alice:e72f7d1d-4f0a-4518-a44c-96658cafda95 # the intent reciprocal : true # Alice did not get any responses to her proposal above, so decided to offer the bike for free - '@id' : alice:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Proposal name : Free used bike hasBeginning : 2019-04-01T00:00:00-5:00 hasEnd : 2019-05-01T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : alice:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : ProposedIntent publishedIn : alice:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the proposal publishes : alice:02b39a30-3e04-4305-9656-7f261aa63c84 # the intent (this is the same intent alice originally published) Proposal in timebank A simple proposal for a timebank. The reciprocity is assumed based on the timebank policies. # Example: Simple proposal in a timebank '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ timebank : https://timebank.example/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-timebank.yaml '@graph' : # Timebank request, reciprocity defined in the timebank agreement (hour credits) - '@id' : bob:23799c14-c368-4653-a584-83bf9ae8b82a '@type' : Proposal name : Seeking plumbing help hasBeginning : 2019-04-01T00:00:00-5:00 hasEnd : 2019-04-05T00:00:00-5:00 inScopeOf : https://timebank.example/ agreedIn : https://timebank.example/member-agreement/ - '@id' : bob:e18c808c-929a-450d-9d0d-3b3f531bc126 '@type' : Intent name : Plumbing help please skos:note : Need someone with plumbing skills to fix leaky faucet and plugged drain asap action : work receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q252924 # plumber - '@id' : bob:5d2fe7da-b91b-4dab-91d9-68db80c1feb7 '@type' : ProposedIntent publishedIn : bob:23799c14-c368-4653-a584-83bf9ae8b82a # the proposal publishes : bob:e18c808c-929a-450d-9d0d-3b3f531bc126 # the intent Proposal for barter A simple proposal for barter. # Example: Simple proposal for barter '@context' : - https://git.io/vf-examples-jsonld-context - carol : https://carol.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-barter.yaml '@graph' : - '@id' : carol:6405b8ad-0ac2-4d58-abdb-0808903c78ad '@type' : Proposal name : Cider press for cider hasBeginning : 2018-10-01T00:00:00-5:00 hasEnd : 2018-10-15T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : carol:e02e3f6b-420a-4ba8-89b0-909d7363ce07 '@type' : Intent name : Cider press skos:note : I can pick up or come to your place, will clean up. action : use receiver : https://carol.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q1111 # cider press (fictional) effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 6 - '@id' : carol:9f112621-3f13-4f48-a3e2-fd2ca99493cd '@type' : ProposedIntent publishedIn : carol:6405b8ad-0ac2-4d58-abdb-0808903c78ad # the proposal publishes : carol:e02e3f6b-420a-4ba8-89b0-909d7363ce07 # the intent reciprocal : false - '@id' : carol:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Intent name : Cider skos:note : Fresh cider from the pressing action : transfer provider : https://carol.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q5977438 # apple cider resourceQuantity : om2:hasUnit : om2:gallon-US om2:hasNumericalValue : 3 - '@id' : carol:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : ProposedIntent publishedIn : carol:6405b8ad-0ac2-4d58-abdb-0808903c78ad # the proposal publishes : carol:b52a5815-fae9-43bf-be95-833b95dc0adb7 # the intent reciprocal : true Proposal for work commitment A simple proposal requesting help for work on a planned production process. The reciprocal intent (payment) is governed by a previous agreement, and based on the actual hours that will be worked. # Example: Simple proposal for commitment to an intent on a planned process '@context' : - https://git.io/vf-examples-jsonld-context - fablab : https://fablab.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-plan.yaml '@graph' : # Plan a process, broadcast request for worker with certain skills to collaborate - '@id' : fablab:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 '@type' : Process name : Develop soil moisture sensor inScopeOf : https://fablab.example/ - '@id' : fablab:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : Intent inputOf : fablab:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 name : Help with R&D for the sensor skos:note : Will need to be at the lab all day both days. action : work receiver : https://fablab.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q2474620 # electrochemical engineering flowQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 16 hasBeginning : 2019-04-12T08:00:00-5:00 hasEnd : 2019-04-13T17:00:00-5:00 - '@id' : fablab:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Proposal name : Electrochemical engineering skills hasBeginning : 2019-04-01T08:00:00-5:00 hasEnd : 2019-04-11T17:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : fablab:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : ProposedIntent publishedIn : fablab:33e8933b-ff73-4a01-964a-ca7a98893083 # the proposal publishes : fablab:60f4204e-b8d2-4026-8577-102c3f82c0af # the intent reciprocal : false - '@id' : fablab:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : Intent name : Payment skos:note : Payment when the unit is manufactured and sold action : transfer provider : https://fablab.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar agreedIn : https://fablab.example/soil-sensor-project/value-equation/ - '@id' : fablab:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b '@type' : ProposedIntent publishedIn : fablab:33e8933b-ff73-4a01-964a-ca7a98893083 # the proposal publishes : fablab:583e83d9-a46d-44ff-bd71-88513a1d83c0 # the intent reciprocal : true Proposals for price list A simple set of proposals that make up a price list. # Example: Simple price list '@context' : - https://git.io/vf-examples-jsonld-context - farm : https://farm.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-list.yaml '@graph' : # Price list - '@id' : farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec8807a '@type' : Proposal hasBeginning : 2019-03-01T00:00:00-5:00 hasEnd : 2019-03-31T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI unitBased : true # often currently called 'unit pricing' - '@id' : farm:c7897c39-7f05-4a5d-a487-80e130a24345 '@type' : Intent name : Carrots case 25# action : transfer provider : https://farm.example/ resourceClassifiedAs : wd:Q81 # carrot resourceSpecifiedAs : farm:2402b57c-1c45-423a-acb2-f50961c97d65 # 25 pound case organic carrots seconds resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : farm:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : ProposedIntent publishedIn : farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec8807a # the proposal publishes : farm:c7897c39-7f05-4a5d-a487-80e130a24345 # the intent reciprocal : false - '@id' : farm:0f563083-7f05-4a5d-a487-80e130a24345 '@type' : Intent name : Payment action : transfer receiver : https://farm.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 18 - '@id' : farm:f325a950-5737-488d-b122-8f21114d0eb0 '@type' : ProposedIntent publishedIn : farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec8807a # the proposal publishes : farm:0f563083-7f05-4a5d-a487-80e130a24345 # the intent reciprocal : true - '@id' : farm:f47064eb-7120-4b31-b882-770165901fe6 '@type' : Proposal hasBeginning : 2019-03-01T00:00:00-5:00 hasEnd : 2019-03-31T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI unitBased : true - '@id' : farm:54b814ee-62dc-40c1-bb96-f8582aa4f771 '@type' : Intent name : Beets case 25# action : transfer provider : https://farm.example/ resourceClassifiedAs : wd:Q165437 # beet root resourceSpecifiedAs : farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # 25 pound case organic beets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : farm:98c2bfeb-9c70-4801-896c-4646b975a7d9 '@type' : ProposedIntent publishedIn : farm:f47064eb-7120-4b31-b882-770165901fe6 # the proposal publishes : farm:54b814ee-62dc-40c1-bb96-f8582aa4f771 # the intent reciprocal : false - '@id' : farm:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : Intent name : Payment action : transfer receiver : https://farm.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 32 - '@id' : farm:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : ProposedIntent publishedIn : farm:f47064eb-7120-4b31-b882-770165901fe6 # the proposal publishes : farm:21f361a6-2375-46bb-b192-c21b5ba833bf5 # the intent reciprocal : true","title":"Planning"},{"location":"examples/ex-planning/#planning-examples","text":"","title":"Planning Examples"},{"location":"examples/ex-planning/#simple-plan","text":"A plan for creating two different resources needed for one campaign. The first resource requires two chained processes. # Example: Simple operational plan '@context' : - https://git.io/vf-examples-jsonld-context - printer : https://printer.example/ '@id' : rgh:valueflows/valueflows/master/examples/simple-plan.yaml '@graph' : - '@id' : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Anti climate change campaign materials skos:note : A set of printed materials for the campaign by Students for Peace and Justice due : 2019-04-08T17:00:00-5:00 dcterms:created : 2019-04-01T10:35:00-5:00 - '@id' : printer:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Print climate brochures plannedWithin : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : printer:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment outputOf : printer:02b39a30-3e04-4305-9656-7f261aa63c84 independentDemandOf : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f action : produce provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # specific brochures resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1000 - '@id' : printer:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment inputOf : printer:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:3129ca8b-fcda-45be-bbda-294dc924d3b9 # paper resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1020 - '@id' : printer:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : Process name : Print climate posters plannedWithin : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : printer:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Commitment outputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb independentDemandOf : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f action : produce provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:6078f30a-b15b-4b1c-8e77-797abae11378 # specific posters resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 35 - '@id' : printer:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : Commitment inputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb action : consume provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:e56fd654-7b94-4d96-8e60-de39e08329a7 # paper resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 35 - '@id' : printer:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : Commitment inputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb action : use provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:e4783bef-9006-490c-9c03-389272c7444d # printing plate for the specific posters effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 1.5 - '@id' : printer:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b '@type' : Process name : Create poster plate plannedWithin : printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f - '@id' : printer:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : Commitment outputOf : printer:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b action : produce provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:e4783bef-9006-490c-9c03-389272c7444d # printing plate for the specific posters resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : printer:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 '@type' : Commitment inputOf : printer:9bd19194-a36d-4a1f-896b-8082887962cb action : consume provider : https://printer.example/ receiver : https://printer.example/ resourceInventoriedAs : printer:86ad6e22-7640-4b93-972a-db7177ab2616 # blank printing plate resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1","title":"Simple plan"},{"location":"examples/ex-planning/#simple-plan-from-recipe","text":"A plan generated from a recipe, for making a component. # Example: Simple plan from recipe '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ sensor : https://sensorica.example/ open : https://openhardware.example '@id' : rgh:valueflows/valueflows/master/examples/plan-from-recipe.yaml '@graph' : # the recipe - '@id' : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ResourceSpecification name : Delivery fiber uri : https://openhardware.example/delivery-fiber skos:note : Optical fiber that connects 2 devices. - '@id' : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : RecipeResource resourceConformsTo : urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # the spec name : Delivery fiber skos:note : Optical fiber that makes the connection between the device and the transducer. An adapter can also be used between the transducer and the delivery fiber. - '@id' : urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : RecipeFlow recipeOutputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : produce recipeFlowResource : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 # delivery fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 - '@id' : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : RecipeProcess name : Make delivery fiber component skos:note : The delivery fiber makes the optical connection between an optical transducer and the sensor [electro-photonics device]. Requires cutting a piece of optical fiber and connectorizing it - '@id' : urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : RecipeFlow recipeInputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : consume resourceClassifiedAs : wd:Q162 # optical fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 skos:note : Optical guide, can be of glass of polymer. Usually it comes in a cylindrical shape. Can be MM (multimode) or SM (single mode) - '@id' : urn:uuid:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : RecipeFlow recipeInputOf : urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf action : work resourceClassifiedAs : wd:Q640621 # optical engineering effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 2 # the plan - '@id' : sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Plan name : Delivery fiber skos:note : Make the optical fiber that makes the connection between the device and the transducer. due : 2019-04-08T17:00:00-5:00 dcterms:created : 2019-04-01T10:35:00-5:00 - '@id' : sensor:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : Commitment independentDemandOf : sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f outputOf : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://sensorica.example/ receiver : https://sensorica.example/ resourceConformsTo : urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 # delivery fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 - '@id' : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Make optical fiber component plannedWithin : sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f skos:note : The delivery fiber makes the optical connection between an optical transducer and the sensor [electro-photonics device]. Requires cutting a piece of optical fiber and connectorizing it - '@id' : sensor:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Commitment inputOf : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://sensorica.example/ receiver : https://sensorica.example/ resourceClassifiedAs : wd:Q162 # optical fiber resourceQuantity : om2:hasUnit : om2:metre om2:hasNumericalValue : .5 skos:note : Optical guide, can be of glass of polymer. Usually it comes in a cylindrical shape. Can be MM (multimode) or SM (single mode) - '@id' : sensor:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : Commitment inputOf : sensor:02b39a30-3e04-4305-9656-7f261aa63c84 action : work provider : https://alice.example/ receiver : https://sensorica.example/ resourceClassifiedAs : wd:Q640621 # optical engineering effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 2","title":"Simple plan from recipe"},{"location":"examples/ex-planning/#fulfillment-and-satisfaction","text":"Commitments satisfying intents, and economic events fulfilling commitments. # Example: Intent - satisfied by - Commitment - fulfilled by - EconomicEvent '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ mfg : https://manufacturer.example/ '@id' : rgh:valueflows/valueflows/master/examples/fulfill-satisfy.yaml '@graph' : # A manufacturer makes a plan that includes an intent for some work which # they want someone in their network to commit to doing on Oct. 14 - 15 - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : Intent action : work receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-15T18:00:00-0:00 # Bob commits to doing the work on Oct. 14 - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Commitment action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-14T17:00:00-0:00 - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Satisfaction satisfies : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # the intent satisfiedBy : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 # Bob does the work in two 4-hour shifts on Oct. 14 - '@id' : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4 hasBeginning : 2018-10-14T8:00:00-0:00 hasEnd : 2018-10-14T12:00:00-0:00 - '@id' : mfg:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : Fulfillment fulfills : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment fulfilledBy : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 # the economic event effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4 - '@id' : mfg:c7897c39-7f05-4a5d-a487-80e130a2414b '@type' : EconomicEvent action : work provider : https://bob.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4 hasBeginning : 2018-10-14T13:00:00-0:00 hasEnd : 2018-10-14T17:00:00-0:00 - '@id' : mfg:0f563083-8da4-46fe-adc3-68b05ba06320 '@type' : Fulfillment fulfills : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment fulfilledBy : mfg:c7897c39-7f05-4a5d-a487-80e130a2414b # the second economic event effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 4","title":"Fulfillment and satisfaction"},{"location":"examples/ex-planning/#proposals-to-sell-and-give-away","text":"A simple proposal with reciprocity expected, then another one to give the item away. # Example: Simple proposals based on one intent '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposals-intent.yaml '@graph' : # One offer with expected reciprocity - '@id' : alice:8791913c-0152-4c32-bb3f-f25d61df736c '@type' : Proposal name : Used bike hasBeginning : 2019-03-01T00:00:00-5:00 hasEnd : 2019-03-31T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : alice:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Intent name : Old adult Schwinn one speed bike skos:note : Pedals fine, not good for hills, has basket, brakes are a bit dodgy action : transfer provider : https://alice.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q11442 # bicycle - '@id' : alice:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : ProposedIntent publishedIn : alice:8791913c-0152-4c32-bb3f-f25d61df736c # the proposal publishes : alice:02b39a30-3e04-4305-9656-7f261aa63c84 # the intent reciprocal : false - '@id' : alice:e72f7d1d-4f0a-4518-a44c-96658cafda95 '@type' : Intent name : Payment action : transfer receiver : https://alice.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 15 - '@id' : alice:f325a950-5737-488d-b122-8f21114d0eb0 '@type' : ProposedIntent publishedIn : alice:8791913c-0152-4c32-bb3f-f25d61df736c # the proposal publishes : alice:e72f7d1d-4f0a-4518-a44c-96658cafda95 # the intent reciprocal : true # Alice did not get any responses to her proposal above, so decided to offer the bike for free - '@id' : alice:8e5fe80d-a769-4bd5-89e5-2136d33eab9f '@type' : Proposal name : Free used bike hasBeginning : 2019-04-01T00:00:00-5:00 hasEnd : 2019-05-01T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : alice:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : ProposedIntent publishedIn : alice:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the proposal publishes : alice:02b39a30-3e04-4305-9656-7f261aa63c84 # the intent (this is the same intent alice originally published)","title":"Proposals to sell and give away"},{"location":"examples/ex-planning/#proposal-in-timebank","text":"A simple proposal for a timebank. The reciprocity is assumed based on the timebank policies. # Example: Simple proposal in a timebank '@context' : - https://git.io/vf-examples-jsonld-context - bob : https://bob.example/ timebank : https://timebank.example/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-timebank.yaml '@graph' : # Timebank request, reciprocity defined in the timebank agreement (hour credits) - '@id' : bob:23799c14-c368-4653-a584-83bf9ae8b82a '@type' : Proposal name : Seeking plumbing help hasBeginning : 2019-04-01T00:00:00-5:00 hasEnd : 2019-04-05T00:00:00-5:00 inScopeOf : https://timebank.example/ agreedIn : https://timebank.example/member-agreement/ - '@id' : bob:e18c808c-929a-450d-9d0d-3b3f531bc126 '@type' : Intent name : Plumbing help please skos:note : Need someone with plumbing skills to fix leaky faucet and plugged drain asap action : work receiver : https://bob.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q252924 # plumber - '@id' : bob:5d2fe7da-b91b-4dab-91d9-68db80c1feb7 '@type' : ProposedIntent publishedIn : bob:23799c14-c368-4653-a584-83bf9ae8b82a # the proposal publishes : bob:e18c808c-929a-450d-9d0d-3b3f531bc126 # the intent","title":"Proposal in timebank"},{"location":"examples/ex-planning/#proposal-for-barter","text":"A simple proposal for barter. # Example: Simple proposal for barter '@context' : - https://git.io/vf-examples-jsonld-context - carol : https://carol.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-barter.yaml '@graph' : - '@id' : carol:6405b8ad-0ac2-4d58-abdb-0808903c78ad '@type' : Proposal name : Cider press for cider hasBeginning : 2018-10-01T00:00:00-5:00 hasEnd : 2018-10-15T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : carol:e02e3f6b-420a-4ba8-89b0-909d7363ce07 '@type' : Intent name : Cider press skos:note : I can pick up or come to your place, will clean up. action : use receiver : https://carol.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q1111 # cider press (fictional) effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 6 - '@id' : carol:9f112621-3f13-4f48-a3e2-fd2ca99493cd '@type' : ProposedIntent publishedIn : carol:6405b8ad-0ac2-4d58-abdb-0808903c78ad # the proposal publishes : carol:e02e3f6b-420a-4ba8-89b0-909d7363ce07 # the intent reciprocal : false - '@id' : carol:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : Intent name : Cider skos:note : Fresh cider from the pressing action : transfer provider : https://carol.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q5977438 # apple cider resourceQuantity : om2:hasUnit : om2:gallon-US om2:hasNumericalValue : 3 - '@id' : carol:9bd19194-a36d-4a1f-896b-8082887962cb '@type' : ProposedIntent publishedIn : carol:6405b8ad-0ac2-4d58-abdb-0808903c78ad # the proposal publishes : carol:b52a5815-fae9-43bf-be95-833b95dc0adb7 # the intent reciprocal : true","title":"Proposal for barter"},{"location":"examples/ex-planning/#proposal-for-work-commitment","text":"A simple proposal requesting help for work on a planned production process. The reciprocal intent (payment) is governed by a previous agreement, and based on the actual hours that will be worked. # Example: Simple proposal for commitment to an intent on a planned process '@context' : - https://git.io/vf-examples-jsonld-context - fablab : https://fablab.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-plan.yaml '@graph' : # Plan a process, broadcast request for worker with certain skills to collaborate - '@id' : fablab:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 '@type' : Process name : Develop soil moisture sensor inScopeOf : https://fablab.example/ - '@id' : fablab:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : Intent inputOf : fablab:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47 name : Help with R&D for the sensor skos:note : Will need to be at the lab all day both days. action : work receiver : https://fablab.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q2474620 # electrochemical engineering flowQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 16 hasBeginning : 2019-04-12T08:00:00-5:00 hasEnd : 2019-04-13T17:00:00-5:00 - '@id' : fablab:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Proposal name : Electrochemical engineering skills hasBeginning : 2019-04-01T08:00:00-5:00 hasEnd : 2019-04-11T17:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI - '@id' : fablab:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : ProposedIntent publishedIn : fablab:33e8933b-ff73-4a01-964a-ca7a98893083 # the proposal publishes : fablab:60f4204e-b8d2-4026-8577-102c3f82c0af # the intent reciprocal : false - '@id' : fablab:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : Intent name : Payment skos:note : Payment when the unit is manufactured and sold action : transfer provider : https://fablab.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar agreedIn : https://fablab.example/soil-sensor-project/value-equation/ - '@id' : fablab:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b '@type' : ProposedIntent publishedIn : fablab:33e8933b-ff73-4a01-964a-ca7a98893083 # the proposal publishes : fablab:583e83d9-a46d-44ff-bd71-88513a1d83c0 # the intent reciprocal : true","title":"Proposal for work commitment"},{"location":"examples/ex-planning/#proposals-for-price-list","text":"A simple set of proposals that make up a price list. # Example: Simple price list '@context' : - https://git.io/vf-examples-jsonld-context - farm : https://farm.example/ map : https://mapping.service/ '@id' : rgh:valueflows/valueflows/master/examples/proposal-list.yaml '@graph' : # Price list - '@id' : farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec8807a '@type' : Proposal hasBeginning : 2019-03-01T00:00:00-5:00 hasEnd : 2019-03-31T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI unitBased : true # often currently called 'unit pricing' - '@id' : farm:c7897c39-7f05-4a5d-a487-80e130a24345 '@type' : Intent name : Carrots case 25# action : transfer provider : https://farm.example/ resourceClassifiedAs : wd:Q81 # carrot resourceSpecifiedAs : farm:2402b57c-1c45-423a-acb2-f50961c97d65 # 25 pound case organic carrots seconds resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : farm:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : ProposedIntent publishedIn : farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec8807a # the proposal publishes : farm:c7897c39-7f05-4a5d-a487-80e130a24345 # the intent reciprocal : false - '@id' : farm:0f563083-7f05-4a5d-a487-80e130a24345 '@type' : Intent name : Payment action : transfer receiver : https://farm.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 18 - '@id' : farm:f325a950-5737-488d-b122-8f21114d0eb0 '@type' : ProposedIntent publishedIn : farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec8807a # the proposal publishes : farm:0f563083-7f05-4a5d-a487-80e130a24345 # the intent reciprocal : true - '@id' : farm:f47064eb-7120-4b31-b882-770165901fe6 '@type' : Proposal hasBeginning : 2019-03-01T00:00:00-5:00 hasEnd : 2019-03-31T00:00:00-5:00 eligibleLocation : map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI unitBased : true - '@id' : farm:54b814ee-62dc-40c1-bb96-f8582aa4f771 '@type' : Intent name : Beets case 25# action : transfer provider : https://farm.example/ resourceClassifiedAs : wd:Q165437 # beet root resourceSpecifiedAs : farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # 25 pound case organic beets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : farm:98c2bfeb-9c70-4801-896c-4646b975a7d9 '@type' : ProposedIntent publishedIn : farm:f47064eb-7120-4b31-b882-770165901fe6 # the proposal publishes : farm:54b814ee-62dc-40c1-bb96-f8582aa4f771 # the intent reciprocal : false - '@id' : farm:21f361a6-2375-46bb-b192-c21b5ba833bf '@type' : Intent name : Payment action : transfer receiver : https://farm.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q4917 # US Dollar resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 32 - '@id' : farm:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead '@type' : ProposedIntent publishedIn : farm:f47064eb-7120-4b31-b882-770165901fe6 # the proposal publishes : farm:21f361a6-2375-46bb-b192-c21b5ba833bf5 # the intent reciprocal : true","title":"Proposals for price list"},{"location":"examples/ex-production/","text":"Production Examples Manufacturing Simple one-process manufacturing with typical inputs and outputs. # Example: Simple manufacturing process '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ mfg : https://manufacturing.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-manufacturing.yaml '@graph' : # Economic resources before - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : https://www.opendesk.cc/lean/desk # desk accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 8 - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q219803 # plywood accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 130 skos:note : 4 x 8 sheet of 1/2 inch plywood - '@id' : mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q2101564 # desk design specification accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q13231055 # CNC machine accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Production - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Make the lean desk - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 3 - '@id' : mfg:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : use provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 # CNC machine effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 3.5 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : cite provider : https://makezine.com/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # desk design specification resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : work provider : https://alice.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 7 - '@id' : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # desk resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resources after - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : https://www.opendesk.cc/lean/desk # desk accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 9 - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q219803 # plywood accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 127 note : 4 x 8 sheet of 1/2 inch plywood - '@id' : mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q2101564 # desk design specification accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q13231055 # CNC machine accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 Service Simple delivery of a service with typical inputs and outputs. # Example: Simple service process '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ carol : https://carol.example/ training : https://training.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-service.yaml '@graph' : # Economic resources and specifications - '@id' : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : ResourceSpecification name : 3D printing 1 day hands-on workshop classifiedAs : [ https : //www.wikidata.org/wiki/Q27556165 , https : //www.wikidata.org/wiki/Q229367 ] # workshop, 3d printing - '@id' : training:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : ResourceSpecification name : 3D printing workshop handout skos:note : 3D printing class handout for the one day hands-on class, including exercises and review - '@id' : training:f438393-7f87-4914-806c-e23a4fd15e89 '@type' : ResourceSpecification name : 3D printing training skos:note : In-house certified training on 3D printing - '@id' : training:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q53953506 # 3D printer accountingQuantity : qudt:unit : unit:Number om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : training:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : EconomicResource conformsTo : training:52f0e212-3c4f-4d27-b345-5e964c135824 # 3D printing class handout accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 100 # Service delivery - '@id' : training:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Give the 3D printing workshop - '@id' : training:b90b0b77-09a2-42e2-8bd4-e9ae2c1c617 '@type' : EconomicEvent inputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://training.example/ receiver : https://training.example/ involves : training:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # workshop handout resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 3 - '@id' : training:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent inputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : use provider : https://training.example/ receiver : https://training.example/ involves : training:e1721a61-cd47-4556-84b9-8b1b81da15bf # 3D printer effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 - '@id' : training:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : work provider : https://training.example/ receiver : https://training.example/ resourceConformsTo : training:f438393-7f87-4914-806c-e23a4fd15e89 # 3D printer training effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 - '@id' : training:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent outputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : service provider : https://training.example/ receiver : https://alice.example/ resourceConformsTo : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : training:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : EconomicEvent outputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : service provider : https://training.example/ receiver : https://bob.example/ resourceConformsTo : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : training:e4783bef-9006-490c-9c03-389272c7444d '@type' : EconomicEvent outputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : service provider : https://training.example/ receiver : https://carol.example/ resourceConformsTo : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 Workflow production Simple repair process with typical inputs and outputs. The same economic resource goes into and out of the process(es). # Example: Simple workflow process '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ repair : https://auto-repair.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-workflow.yaml '@graph' : # Economic resource before - '@id' : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : http://opensourceecology.org/wiki/Wikispeed_SGT01 # car trackingIdentifier : JHMCD38698S061469 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Repair process - '@id' : repair:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Oil change JHMCD38698S061469 skos:note : Check over car, change oil (standard quantity). - '@id' : repair:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : repair:02b39a30-3e04-4305-9656-7f261aa63c84 action : accept provider : https://alice.example/ receiver : https://auto-repair.example/ resourceInventoriedAs : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : repair:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent inputOf : repair:02b39a30-3e04-4305-9656-7f261aa63c84 action : modify provider : https://auto-repair.example/ receiver : https://alice.example/ resourceInventoriedAs : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resource after - '@id' : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : http://opensourceecology.org/wiki/Wikispeed_SGT01 # car trackingIdentifier : JHMCD38698S061469 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 Pack unpack Simple pack and unpack of resources into and out of a container resource, using combine and separate . # Example: Simple pack and unpack processes '@context' : - https://git.io/vf-examples-jsonld-context - med : https://medical.example/ wash : https://laundry.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-pack-unpack.yaml '@graph' : # Economic resources before - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q987767 # container trackingIdentifier : cont234 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown734 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown698 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : # Packing process - '@id' : med:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Pack medical gowns note : Each gown is scanned for tracking identifier as packed - '@id' : med:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 note : Container is empty at this point. - '@id' : med:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent outputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://medical.example/ receiver : https://medical.example/ resourceConformsTo : https://www.wikidata.org/wiki/Q2127468 # packaging unit resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 note : This is a new resource, a package containing all inputs. # Economic resources after packing - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q987767 # container trackingIdentifier : cont234 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown734 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown698 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da564h '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q2127468 # packaging unit trackingIdentifier : pack6789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # The package is transferred to the laundry - '@id' : med:b52a5815-fae9-43bf-be95-833berqojdasf7 '@type' : EconomicEvent action : transfer-custody provider : https://medical.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da564h # the package resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 note : Contains gowns and container. # The package is unpacked at the laundry - '@id' : wash:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Process name : Unpack medical gowns note : Each gown is scanned for tracking identifier as unpacked - '@id' : wash:33e8933b-ff73-4a01-964a-ca7a98893 '@type' : EconomicEvent inputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : consume provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da564h # the package resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3fkm98g1 '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3fsd89cv '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3fd9kjre '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resources after unpacking - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q987767 # container trackingIdentifier : cont234 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown734 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown698 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : Stage and state Simple assembly and testing showing use of stage and state. # Example: Process using stage and state # credit Fabulaser-Mini, https://github.com/fab-machines/Fabulaser-Mini/blob/main/manual/Fabulaser%20manual%20L2M2.pdf '@context' : - https://git.io/vf-examples-jsonld-context - mfg : https://manufacturing.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-stage-state.yaml '@graph' : # Process Specifications - '@id' : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ProcessSpecification name : Attach air filter - '@id' : mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 '@type' : ProcessSpecification name : Attach air compressor - '@id' : mfg:3be5259d-10f0-431c-9fec-9c0c15a461f9 '@type' : ProcessSpecification name : Test machine # Resource Specification - '@id' : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 '@type' : ResourceSpecification name : Fabulaser laser cutter # Economic resource before attach air filter process - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 # attach air compressor # Assembly process - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Attach the air filter (step 33) basedOn : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # process specification: attach air filter - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 # attach air compressor - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0ss '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81dlk4d0 # an air filter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0st '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81dlcvgk # a hose clamp resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : modify provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resource after attach air filter process - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # attach air filter # Testing process - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 '@type' : Process name : Test the laser cutter basedOn : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # final test after all assembly - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 #attach air filter - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 action : modify state : pass provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resource after testing - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 # test machine state : pass","title":"Production"},{"location":"examples/ex-production/#production-examples","text":"","title":"Production Examples"},{"location":"examples/ex-production/#manufacturing","text":"Simple one-process manufacturing with typical inputs and outputs. # Example: Simple manufacturing process '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ mfg : https://manufacturing.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-manufacturing.yaml '@graph' : # Economic resources before - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : https://www.opendesk.cc/lean/desk # desk accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 8 - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q219803 # plywood accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 130 skos:note : 4 x 8 sheet of 1/2 inch plywood - '@id' : mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q2101564 # desk design specification accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q13231055 # CNC machine accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Production - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Make the lean desk - '@id' : mfg:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 3 - '@id' : mfg:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : use provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 # CNC machine effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 3.5 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : cite provider : https://makezine.com/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # desk design specification resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : work provider : https://alice.example/ receiver : https://manufacturing.example/ resourceClassifiedAs : https://www.wikidata.org/wiki/Q192047 # machining effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 7 - '@id' : mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # desk resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resources after - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : https://www.opendesk.cc/lean/desk # desk accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 9 - '@id' : mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q219803 # plywood accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 127 note : 4 x 8 sheet of 1/2 inch plywood - '@id' : mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q2101564 # desk design specification accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q13231055 # CNC machine accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1","title":"Manufacturing"},{"location":"examples/ex-production/#service","text":"Simple delivery of a service with typical inputs and outputs. # Example: Simple service process '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ bob : https://bob.example/ carol : https://carol.example/ training : https://training.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-service.yaml '@graph' : # Economic resources and specifications - '@id' : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : ResourceSpecification name : 3D printing 1 day hands-on workshop classifiedAs : [ https : //www.wikidata.org/wiki/Q27556165 , https : //www.wikidata.org/wiki/Q229367 ] # workshop, 3d printing - '@id' : training:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : ResourceSpecification name : 3D printing workshop handout skos:note : 3D printing class handout for the one day hands-on class, including exercises and review - '@id' : training:f438393-7f87-4914-806c-e23a4fd15e89 '@type' : ResourceSpecification name : 3D printing training skos:note : In-house certified training on 3D printing - '@id' : training:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource classifiedAs : https://www.wikidata.org/wiki/Q53953506 # 3D printer accountingQuantity : qudt:unit : unit:Number om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : training:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 '@type' : EconomicResource conformsTo : training:52f0e212-3c4f-4d27-b345-5e964c135824 # 3D printing class handout accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 100 # Service delivery - '@id' : training:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Give the 3D printing workshop - '@id' : training:b90b0b77-09a2-42e2-8bd4-e9ae2c1c617 '@type' : EconomicEvent inputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://training.example/ receiver : https://training.example/ involves : training:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # workshop handout resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 3 - '@id' : training:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent inputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : use provider : https://training.example/ receiver : https://training.example/ involves : training:e1721a61-cd47-4556-84b9-8b1b81da15bf # 3D printer effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 - '@id' : training:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : work provider : https://training.example/ receiver : https://training.example/ resourceConformsTo : training:f438393-7f87-4914-806c-e23a4fd15e89 # 3D printer training effortQuantity : om2:hasUnit : om2:hour om2:hasNumericalValue : 8 - '@id' : training:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59 '@type' : EconomicEvent outputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : service provider : https://training.example/ receiver : https://alice.example/ resourceConformsTo : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : training:583e83d9-a46d-44ff-bd71-88513a1d83c0 '@type' : EconomicEvent outputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : service provider : https://training.example/ receiver : https://bob.example/ resourceConformsTo : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : training:e4783bef-9006-490c-9c03-389272c7444d '@type' : EconomicEvent outputOf : training:02b39a30-3e04-4305-9656-7f261aa63c84 action : service provider : https://training.example/ receiver : https://carol.example/ resourceConformsTo : training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1","title":"Service"},{"location":"examples/ex-production/#workflow-production","text":"Simple repair process with typical inputs and outputs. The same economic resource goes into and out of the process(es). # Example: Simple workflow process '@context' : - https://git.io/vf-examples-jsonld-context - alice : https://alice.example/ repair : https://auto-repair.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-workflow.yaml '@graph' : # Economic resource before - '@id' : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : http://opensourceecology.org/wiki/Wikispeed_SGT01 # car trackingIdentifier : JHMCD38698S061469 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Repair process - '@id' : repair:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Oil change JHMCD38698S061469 skos:note : Check over car, change oil (standard quantity). - '@id' : repair:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : repair:02b39a30-3e04-4305-9656-7f261aa63c84 action : accept provider : https://alice.example/ receiver : https://auto-repair.example/ resourceInventoriedAs : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : repair:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent inputOf : repair:02b39a30-3e04-4305-9656-7f261aa63c84 action : modify provider : https://auto-repair.example/ receiver : https://alice.example/ resourceInventoriedAs : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resource after - '@id' : alice:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : http://opensourceecology.org/wiki/Wikispeed_SGT01 # car trackingIdentifier : JHMCD38698S061469 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1","title":"Workflow production"},{"location":"examples/ex-production/#pack-unpack","text":"Simple pack and unpack of resources into and out of a container resource, using combine and separate . # Example: Simple pack and unpack processes '@context' : - https://git.io/vf-examples-jsonld-context - med : https://medical.example/ wash : https://laundry.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-pack-unpack.yaml '@graph' : # Economic resources before - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q987767 # container trackingIdentifier : cont234 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown734 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown698 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : # Packing process - '@id' : med:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Pack medical gowns note : Each gown is scanned for tracking identifier as packed - '@id' : med:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 note : Container is empty at this point. - '@id' : med:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:6f438393-7f87-4914-806c-e23a4fd15e89 '@type' : EconomicEvent inputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : combine provider : https://medical.example/ receiver : https://medical.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:b52a5815-fae9-43bf-be95-833b95dc0adb '@type' : EconomicEvent outputOf : med:02b39a30-3e04-4305-9656-7f261aa63c84 action : produce provider : https://medical.example/ receiver : https://medical.example/ resourceConformsTo : https://www.wikidata.org/wiki/Q2127468 # packaging unit resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 note : This is a new resource, a package containing all inputs. # Economic resources after packing - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q987767 # container trackingIdentifier : cont234 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown734 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown698 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : med:e1721a61-cd47-4556-84b9-8b1b81da564h - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da564h '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q2127468 # packaging unit trackingIdentifier : pack6789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # The package is transferred to the laundry - '@id' : med:b52a5815-fae9-43bf-be95-833berqojdasf7 '@type' : EconomicEvent action : transfer-custody provider : https://medical.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da564h # the package resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 note : Contains gowns and container. # The package is unpacked at the laundry - '@id' : wash:33e8933b-ff73-4a01-964a-ca7a98893083 '@type' : Process name : Unpack medical gowns note : Each gown is scanned for tracking identifier as unpacked - '@id' : wash:33e8933b-ff73-4a01-964a-ca7a98893 '@type' : EconomicEvent inputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : consume provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da564h # the package resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3f82c0af '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3fkm98g1 '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3fsd89cv '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : wash:60f4204e-b8d2-4026-8577-102c3fd9kjre '@type' : EconomicEvent outputOf : wash:33e8933b-ff73-4a01-964a-ca7a98893083 action : separate provider : https://laundry.example/ receiver : https://laundry.example/ resourceInventoriedAs : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resources after unpacking - '@id' : med:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q987767 # container trackingIdentifier : cont234 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b9 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown789 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b0 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown734 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn : - '@id' : med:3129ca8b-fcda-45be-bbda-294dc924d3b1 '@type' : EconomicResource conformsTo : https://www.wikidata.org/wiki/Q89990310 # medical gown trackingIdentifier : gown698 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 containedIn :","title":"Pack unpack"},{"location":"examples/ex-production/#stage-and-state","text":"Simple assembly and testing showing use of stage and state. # Example: Process using stage and state # credit Fabulaser-Mini, https://github.com/fab-machines/Fabulaser-Mini/blob/main/manual/Fabulaser%20manual%20L2M2.pdf '@context' : - https://git.io/vf-examples-jsonld-context - mfg : https://manufacturing.example/ '@id' : rgh:valueflows/valueflows/master/examples/process-stage-state.yaml '@graph' : # Process Specifications - '@id' : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 '@type' : ProcessSpecification name : Attach air filter - '@id' : mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 '@type' : ProcessSpecification name : Attach air compressor - '@id' : mfg:3be5259d-10f0-431c-9fec-9c0c15a461f9 '@type' : ProcessSpecification name : Test machine # Resource Specification - '@id' : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 '@type' : ResourceSpecification name : Fabulaser laser cutter # Economic resource before attach air filter process - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 # attach air compressor # Assembly process - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 '@type' : Process name : Attach the air filter (step 33) basedOn : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # process specification: attach air filter - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 # attach air compressor - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0ss '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81dlk4d0 # an air filter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0st '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : consume provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81dlcvgk # a hose clamp resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 action : modify provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resource after attach air filter process - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # attach air filter # Testing process - '@id' : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 '@type' : Process name : Test the laser cutter basedOn : mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # final test after all assembly - '@id' : mfg:a8236bbb-81e0-422d-9861-56d2417db0fb '@type' : EconomicEvent inputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 action : accept provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:02b39a30-3e04-4305-9656-7f261aa63c84 #attach air filter - '@id' : mfg:52f0e212-3c4f-4d27-b345-5e964c135824 '@type' : EconomicEvent outputOf : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 action : modify state : pass provider : https://manufacturing.example/ receiver : https://manufacturing.example/ resourceInventoriedAs : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter resourceQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 # Economic resource after testing - '@id' : mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf '@type' : EconomicResource resourceConformsTo : mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 stage : mfg:02b39a30-3e04-4305-9656-7f261aa63c98 # test machine state : pass","title":"Stage and state"},{"location":"examples/ex-resource/","text":"Economic Resource Examples This example includes economic resources, with their resource specifications. One resource has a lot identifier. # Example: Resources '@context' : - https://git.io/vf-examples-jsonld-context - farm : https://farm.example/ ose : https://www.opensourceecology.org/ '@id' : rgh:valueflows/valueflows/master/examples/resource.yaml '@graph' : - '@id' : ose:822b6baf-d66f-45a0-98f2-57450e2aec23 '@type' : ResourceSpecification name : Tractor - LifeTrac 6 uri : https://www.opensourceecology.org/portfolio/tractor/ image : https://www.opensourceecology.org/wp-content/uploads/2014/02/Tractor_gray.png defaultUnit : unit:Number substitutable : true resourceClassifiedAs : https://www.wikidata.org/wiki/Q39495 skos:note : A versatile, 4-wheel drive, hydraulically-driven tractor with 18 to 200 horsepower capacity for agriculture, construction and other utility duties. - '@id' : farm:fbff9852-36ca-4364-a943-bc0b49e1cab5 '@type' : EconomicResource name : Tractor - LifeTrac 6 trackingIdentifier : 889jcd00s # the serial number assigned by the manufacturer conformsTo : ose:822b6baf-d66f-45a0-98f2-57450e2aec23 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 '@type' : ResourceSpecification name : Carrots organic defaultUnit : unit:Kilogram substitutable : true resourceClassifiedAs : https://www.wikidata.org/wiki/Q39495 skos:note : Organic loose carrots without tops. - '@id' : farm:07819789-dd51-44c3-b35c-9210165bc832 '@type' : EconomicResource name : Loose organic carrots lot : farm:fd399b37-0740-4a68-a184-1e655021ca21 # the lot number assigned by the farm conformsTo : farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 650 skos:note : Medium size, clean, harvested after the first frost, will store well. - '@id' : farm:fd399b37-0740-4a68-a184-1e655021ca21 '@type' : dfc:ProductBatch dfc:batchNumber : 3409888 - '@id' : farm:68cabaf3-deb8-4bd5-a439-798263abe35a '@type' : ResourceSpecification name : Farm documentation defaultUnit : unit:Number substitutable : false resourceClassifiedAs : https://www.wikidata.org/wiki/Q49848 # document skos:note : Any of the documentation produced and/or used by the farm. - '@id' : farm:a7e94dde-2997-451e-a7e1-8d364d5e6dee '@type' : EconomicResource name : Intern orientation instructions conformsTo : farm:68cabaf3-deb8-4bd5-a439-798263abe35a uri : https://farm.example/docs/intern-orientation.odt accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1","title":"Resources"},{"location":"examples/ex-resource/#economic-resource-examples","text":"This example includes economic resources, with their resource specifications. One resource has a lot identifier. # Example: Resources '@context' : - https://git.io/vf-examples-jsonld-context - farm : https://farm.example/ ose : https://www.opensourceecology.org/ '@id' : rgh:valueflows/valueflows/master/examples/resource.yaml '@graph' : - '@id' : ose:822b6baf-d66f-45a0-98f2-57450e2aec23 '@type' : ResourceSpecification name : Tractor - LifeTrac 6 uri : https://www.opensourceecology.org/portfolio/tractor/ image : https://www.opensourceecology.org/wp-content/uploads/2014/02/Tractor_gray.png defaultUnit : unit:Number substitutable : true resourceClassifiedAs : https://www.wikidata.org/wiki/Q39495 skos:note : A versatile, 4-wheel drive, hydraulically-driven tractor with 18 to 200 horsepower capacity for agriculture, construction and other utility duties. - '@id' : farm:fbff9852-36ca-4364-a943-bc0b49e1cab5 '@type' : EconomicResource name : Tractor - LifeTrac 6 trackingIdentifier : 889jcd00s # the serial number assigned by the manufacturer conformsTo : ose:822b6baf-d66f-45a0-98f2-57450e2aec23 accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1 - '@id' : farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 '@type' : ResourceSpecification name : Carrots organic defaultUnit : unit:Kilogram substitutable : true resourceClassifiedAs : https://www.wikidata.org/wiki/Q39495 skos:note : Organic loose carrots without tops. - '@id' : farm:07819789-dd51-44c3-b35c-9210165bc832 '@type' : EconomicResource name : Loose organic carrots lot : farm:fd399b37-0740-4a68-a184-1e655021ca21 # the lot number assigned by the farm conformsTo : farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 accountingQuantity : om2:hasUnit : om2:kilogram om2:hasNumericalValue : 650 skos:note : Medium size, clean, harvested after the first frost, will store well. - '@id' : farm:fd399b37-0740-4a68-a184-1e655021ca21 '@type' : dfc:ProductBatch dfc:batchNumber : 3409888 - '@id' : farm:68cabaf3-deb8-4bd5-a439-798263abe35a '@type' : ResourceSpecification name : Farm documentation defaultUnit : unit:Number substitutable : false resourceClassifiedAs : https://www.wikidata.org/wiki/Q49848 # document skos:note : Any of the documentation produced and/or used by the farm. - '@id' : farm:a7e94dde-2997-451e-a7e1-8d364d5e6dee '@type' : EconomicResource name : Intern orientation instructions conformsTo : farm:68cabaf3-deb8-4bd5-a439-798263abe35a uri : https://farm.example/docs/intern-orientation.odt accountingQuantity : om2:hasUnit : om2:one om2:hasNumericalValue : 1","title":"Economic Resource Examples"},{"location":"introduction/concepts/","text":"Flows of Value Networks of value flows Networks of value flows are created when processes are linked together through flows of resources. This forms an economic network, where resources flow from agent to agent to agent via events. These resource flow networks do not care about company or national boundaries. And the resources themselves can be anything of value: tangible or intangible, materials, ideas, work, kudos, money, alternative currencies, whatever. Flows of value in which you can participate Like: Needs, ideas, offers, requests, plans, new recipes, creations, work to do, stuff we need, income, exchanges You will be able to subscribe to feeds from networks, with selections of types of activity. You will be able to respond: offer work, stuff, money, ideas, requests, orders, improvements, etc. You will be able to publish into the value streams. A little value flow.... This is a (simplified) very specific example taken from the Open Value Network (OVN) Sensorica, where contributions to processes are rewarded according to agreed upon rules when there is income. ... another little value flow.... Producing and exchange olive oil and coffee, even more simplified. ... to thinking bigger. Traversing value flows Value flows can be traversed forwards (\"tracking\") or backwards (\"tracing\"). Often people use the term \"provenance\" when looking backwards towards the source of some resource, sometimes when a problem emerges (as in a disease outbreak from food), sometimes to know the quality of the resource (as in wanting local humanely produced food with lower ecological impact). The data structures of ValueFlows provide the ability to trace or track any value flow, no matter how long or complex, see Track and Trace .","title":"Flows of Value"},{"location":"introduction/concepts/#flows-of-value","text":"","title":"Flows of Value"},{"location":"introduction/concepts/#networks-of-value-flows","text":"Networks of value flows are created when processes are linked together through flows of resources. This forms an economic network, where resources flow from agent to agent to agent via events. These resource flow networks do not care about company or national boundaries. And the resources themselves can be anything of value: tangible or intangible, materials, ideas, work, kudos, money, alternative currencies, whatever.","title":"Networks of value flows"},{"location":"introduction/concepts/#flows-of-value-in-which-you-can-participate","text":"Like: Needs, ideas, offers, requests, plans, new recipes, creations, work to do, stuff we need, income, exchanges You will be able to subscribe to feeds from networks, with selections of types of activity. You will be able to respond: offer work, stuff, money, ideas, requests, orders, improvements, etc. You will be able to publish into the value streams.","title":"Flows of value in which you can participate"},{"location":"introduction/concepts/#a-little-value-flow","text":"This is a (simplified) very specific example taken from the Open Value Network (OVN) Sensorica, where contributions to processes are rewarded according to agreed upon rules when there is income.","title":"A little value flow...."},{"location":"introduction/concepts/#another-little-value-flow","text":"Producing and exchange olive oil and coffee, even more simplified.","title":"... another little value flow...."},{"location":"introduction/concepts/#to-thinking-bigger","text":"","title":"... to thinking bigger."},{"location":"introduction/concepts/#traversing-value-flows","text":"Value flows can be traversed forwards (\"tracking\") or backwards (\"tracing\"). Often people use the term \"provenance\" when looking backwards towards the source of some resource, sometimes when a problem emerges (as in a disease outbreak from food), sometimes to know the quality of the resource (as in wanting local humanely produced food with lower ecological impact). The data structures of ValueFlows provide the ability to trace or track any value flow, no matter how long or complex, see Track and Trace .","title":"Traversing value flows"},{"location":"introduction/contributors/","text":"Contributors Committers Lynn Foster elf Pavlik Bob Haugen Michael Williams Paul Mackey Kalin Maldzhanski pospi (Sam Pospischil) Jef Vanbockryck Use cases, tools, and helpful discussion... and let's not forget the logo! Jon Richter Steve Bosserman Greg Cassel Connor Turland Brent Shambaugh Dan Hassan Alexander Praetorius Steve Michel Tiberius Brastaviceanu Simon Tegg Johannes Winter Elio Qoshi REA assistance Bill McCarthy Wim Laurier Christian Scheller Anders Hessellund Pavel Hruby Graham Gal Richard Newmark Todd Sedbrook Cheryl Dunn Dave McComb Jesper Kiehn","title":"Contributors"},{"location":"introduction/contributors/#contributors","text":"","title":"Contributors"},{"location":"introduction/contributors/#committers","text":"Lynn Foster elf Pavlik Bob Haugen Michael Williams Paul Mackey Kalin Maldzhanski pospi (Sam Pospischil) Jef Vanbockryck","title":"Committers"},{"location":"introduction/contributors/#use-cases-tools-and-helpful-discussion-and-lets-not-forget-the-logo","text":"Jon Richter Steve Bosserman Greg Cassel Connor Turland Brent Shambaugh Dan Hassan Alexander Praetorius Steve Michel Tiberius Brastaviceanu Simon Tegg Johannes Winter Elio Qoshi","title":"Use cases, tools, and helpful discussion... and let's not forget the logo!"},{"location":"introduction/contributors/#rea-assistance","text":"Bill McCarthy Wim Laurier Christian Scheller Anders Hessellund Pavel Hruby Graham Gal Richard Newmark Todd Sedbrook Cheryl Dunn Dave McComb Jesper Kiehn","title":"REA assistance"},{"location":"introduction/core/","text":"Core REA (Resource, Event, Agent) The vocabulary has a core that would fit many different kinds of economic formations - value networks, supply chains, joint ventures, business collaboration network, distributed cooperatives, multi-stakeholder cooperatives.... as well as more traditional enterprises. The core is based on the REA (Resource, Event, Agent) ontology. You can find all the details by following the links here . These are the main concepts in the REA ontology, as pictured in this document : Economic events are the movers and shakers. They say what is happening to economic resources, and what economic agents are involved along the way. They create the \"value flows\". A key concept in REA is Duality, which means that each event wants one or more balancing events: in other words, some kind of reciprocity. REA uses an abstract word for this relationship in order to make the meaning configurable. The reciprocity does not need to happen at the same time, or in the same transaction. And it can have any logic that a network wants: payment in money, swap, earn credits, earn reputation points, share with the commons, from each according to ability and to each according to need, etc. Independent vs Dependent views Conventional accounting always takes the view of an individual agent: often a company. REA, and Valueflows, take an independent view, sometimes called a \u201ccollaboration space\u201d or economic network or supply chain view. At the same time, derived from the independent view, REA and Valueflows support each agent's own accounting view. For example, from one agent's viewpoint, the exchange may be a \"purchase\", from the other agent's viewpoint, it might be a \"sale\". From the neutral viewpoint, it is an exchange of resources, with usually at least two flows of resources, from different directions. For the individual agent\u2019s accounting systems, assuming an Exchange of goods for money, when the goods are transferred from the seller to the purchaser, the purchaser\u2019s Accounts Payable are increased (credited) and the seller\u2019s Accounts Receivable are increased (debited). The independent view sees a transfer of goods from one agent to another. While conventional accounting uses the individual agent view, larger-scale economic analyses and planning, like for networks, communities, and bioregions, use the independent view. See Value Flow Algorithms . Levels of the ontology All the levels of the REA ontology are similarly flexible and configurable: The Knowledge level represents classification, policies, procedures, rules and patterns. This is where each network or community can configure the core concepts to fit their desires. The Plan level represents offers, requests, schedules and promises. The Observation level represents what really happened. The core Valueflows vocabulary includes some concepts for which we use other rdf-based vocabularies. There may also be terms that applications will need that are not part of the Valueflows economic model. This means that it expects people developing those applications to use VF together with other vocabularies / web ontologies. This documentation will define other vocabularies and specific terms from them that will be needed in common scenarios that VF aims to address.","title":"Core"},{"location":"introduction/core/#core","text":"","title":"Core"},{"location":"introduction/core/#rea-resource-event-agent","text":"The vocabulary has a core that would fit many different kinds of economic formations - value networks, supply chains, joint ventures, business collaboration network, distributed cooperatives, multi-stakeholder cooperatives.... as well as more traditional enterprises. The core is based on the REA (Resource, Event, Agent) ontology. You can find all the details by following the links here . These are the main concepts in the REA ontology, as pictured in this document : Economic events are the movers and shakers. They say what is happening to economic resources, and what economic agents are involved along the way. They create the \"value flows\". A key concept in REA is Duality, which means that each event wants one or more balancing events: in other words, some kind of reciprocity. REA uses an abstract word for this relationship in order to make the meaning configurable. The reciprocity does not need to happen at the same time, or in the same transaction. And it can have any logic that a network wants: payment in money, swap, earn credits, earn reputation points, share with the commons, from each according to ability and to each according to need, etc.","title":"REA (Resource, Event, Agent)"},{"location":"introduction/core/#independent-vs-dependent-views","text":"Conventional accounting always takes the view of an individual agent: often a company. REA, and Valueflows, take an independent view, sometimes called a \u201ccollaboration space\u201d or economic network or supply chain view. At the same time, derived from the independent view, REA and Valueflows support each agent's own accounting view. For example, from one agent's viewpoint, the exchange may be a \"purchase\", from the other agent's viewpoint, it might be a \"sale\". From the neutral viewpoint, it is an exchange of resources, with usually at least two flows of resources, from different directions. For the individual agent\u2019s accounting systems, assuming an Exchange of goods for money, when the goods are transferred from the seller to the purchaser, the purchaser\u2019s Accounts Payable are increased (credited) and the seller\u2019s Accounts Receivable are increased (debited). The independent view sees a transfer of goods from one agent to another. While conventional accounting uses the individual agent view, larger-scale economic analyses and planning, like for networks, communities, and bioregions, use the independent view. See Value Flow Algorithms .","title":"Independent vs Dependent views"},{"location":"introduction/core/#levels-of-the-ontology","text":"All the levels of the REA ontology are similarly flexible and configurable: The Knowledge level represents classification, policies, procedures, rules and patterns. This is where each network or community can configure the core concepts to fit their desires. The Plan level represents offers, requests, schedules and promises. The Observation level represents what really happened. The core Valueflows vocabulary includes some concepts for which we use other rdf-based vocabularies. There may also be terms that applications will need that are not part of the Valueflows economic model. This means that it expects people developing those applications to use VF together with other vocabularies / web ontologies. This documentation will define other vocabularies and specific terms from them that will be needed in common scenarios that VF aims to address.","title":"Levels of the ontology"},{"location":"introduction/principles/","text":"Principles These principles are about the model behind the vocabulary. The model must enable collaboration between different people in different organizations using different software on different platforms using different human and programming languages. The model must be able to form global networks which can track the flows of resources (values) forwards and backwards. Or maybe it would be better to say \"in any direction\", but forwards means in the direction of value creation, and backwards means in the direction of return or compensation. Corollary: the model must be able to support various fair methods of distribution of resources. The ability to find contributions to the network or the economy regardless of where and when in the network configuration those contributions occurred is key. The model must also be able to support coordinating work between different people in different organizations. People who are not concerned with rewards may still want to coordinate work. The model must be able to support circular economies, value flows where resources come full cycle to be fed into the same set or other processes. Recycling, re-use, and other ways to encourage resources not becoming waste, must be supported. Flows currently considered \"externalities\" should be able to be internalized in the model. The model must be fractal. It must support global views of networks in aggregate as well as drilling down to lower and lower levels of detail. Those lower levels of detail, for example inside one organization, may require permissions. The model must also work on the Knowledge, Plan and Observation levels, where the objects on each level are linked appropriately to the other levels. The model must support non-business-as-usual organizational forms and economic relationships in addition to traditional business organizations and relationships. These organizational forms can be as varied as the people and groups who create them want. VF in particular embraces this experimentation towards next-economy / solidarity-economy / commons-based-economy / P2P-economy/etc. in this transitional time. The model must support systems where all the people involved can get shares of the outcome to allocate as they wish. The shared outcome could be resources produced by the contributors, like food, or it could be income (reciprocal resources exchanged for resources produced). A group can choose to introduce various monetary currencies into their flows but can also do all the coordination and accounting without introducing such artifacts.","title":"Principles"},{"location":"introduction/principles/#principles","text":"These principles are about the model behind the vocabulary. The model must enable collaboration between different people in different organizations using different software on different platforms using different human and programming languages. The model must be able to form global networks which can track the flows of resources (values) forwards and backwards. Or maybe it would be better to say \"in any direction\", but forwards means in the direction of value creation, and backwards means in the direction of return or compensation. Corollary: the model must be able to support various fair methods of distribution of resources. The ability to find contributions to the network or the economy regardless of where and when in the network configuration those contributions occurred is key. The model must also be able to support coordinating work between different people in different organizations. People who are not concerned with rewards may still want to coordinate work. The model must be able to support circular economies, value flows where resources come full cycle to be fed into the same set or other processes. Recycling, re-use, and other ways to encourage resources not becoming waste, must be supported. Flows currently considered \"externalities\" should be able to be internalized in the model. The model must be fractal. It must support global views of networks in aggregate as well as drilling down to lower and lower levels of detail. Those lower levels of detail, for example inside one organization, may require permissions. The model must also work on the Knowledge, Plan and Observation levels, where the objects on each level are linked appropriately to the other levels. The model must support non-business-as-usual organizational forms and economic relationships in addition to traditional business organizations and relationships. These organizational forms can be as varied as the people and groups who create them want. VF in particular embraces this experimentation towards next-economy / solidarity-economy / commons-based-economy / P2P-economy/etc. in this transitional time. The model must support systems where all the people involved can get shares of the outcome to allocate as they wish. The shared outcome could be resources produced by the contributors, like food, or it could be income (reciprocal resources exchanged for resources produced). A group can choose to introduce various monetary currencies into their flows but can also do all the coordination and accounting without introducing such artifacts.","title":"Principles"},{"location":"introduction/status/","text":"Status of the vocabulary This documentation is for release 0.5. Change log can be found here . This vocabulary is based on decades of work in academia and some limited work in the field in software implementations - and further development by the VF team through documenting and studying use cases. The stability of the model reflects this history. The core model is fairly stable, more so in structure, somewhat less in naming. However, there are many edge cases and possibly not-so-edge cases where the model will need to be adjusted for the reality in the field based on further experience. Also, this model represents something new, something that we want to be able to support the next economy, with all the unknowns that will bring. So we see continuous improvements happening as the vocabulary is adopted by more people, through ongoing collaboration between the VF team and the adopters. The core model adapted from academic work on REA includes: Resources, Events, Agents (REA) Commitments the classifications/specifications in the knowledge layer Other relatively consolidated parts of the vocabulary include: Agent model Core Input-Process-Output model Core Recipe model Less stable are: Intents and Proposals Budgeting and Analysis Claims Coming in future releases are: Forking/versioning of Recipes Conversations for Action Quantitative and qualitative measurements, with SOSA One or more extensions for value calculation, distribution algorithms","title":"Status"},{"location":"introduction/status/#status-of-the-vocabulary","text":"This documentation is for release 0.5. Change log can be found here . This vocabulary is based on decades of work in academia and some limited work in the field in software implementations - and further development by the VF team through documenting and studying use cases. The stability of the model reflects this history. The core model is fairly stable, more so in structure, somewhat less in naming. However, there are many edge cases and possibly not-so-edge cases where the model will need to be adjusted for the reality in the field based on further experience. Also, this model represents something new, something that we want to be able to support the next economy, with all the unknowns that will bring. So we see continuous improvements happening as the vocabulary is adopted by more people, through ongoing collaboration between the VF team and the adopters. The core model adapted from academic work on REA includes: Resources, Events, Agents (REA) Commitments the classifications/specifications in the knowledge layer Other relatively consolidated parts of the vocabulary include: Agent model Core Input-Process-Output model Core Recipe model Less stable are: Intents and Proposals Budgeting and Analysis Claims Coming in future releases are: Forking/versioning of Recipes Conversations for Action Quantitative and qualitative measurements, with SOSA One or more extensions for value calculation, distribution algorithms","title":"Status of the vocabulary"},{"location":"specification/event-resource/","text":"Event Resource Logic All economic information in an Economic Resource must be put there by an Economic Event. Non-economic information (note, image, etc.) can be updated on the Economic Resource directly. Economic information is anything that might affect periodic accounting or financial reporting. In this way, there is always an immutable detailed time-based record of information that affected such reporting. Pseudo-code Here is suggested pseudo-code for an Economic Event creating or affecting an Economic Resource. It is not meant to indicate developers have to use this exact logical structure; it is just one method to communicate the intended logic, which we hope is helpful. It has not been directly translated to code and tested. If action.resourceEffect is \"+\" or \"-\" If a new resource is to be created Create the resource with zero quantity fields Else If it exists Get the resource based on resourceInventoriedAs If there is a resource from the above If action.resourceEffect is \"+\" Add event resourceQuantity to both accountingQuantity and onhandQuantity Else if action.resourceEffect is \"-\" Subtract event resourceQuantity from both accountingQuantity and onhandQuantity Else if action.resourceEffect is \"-+\" or action.onhandEffect is \"-+\" (two resources can be affected) If a new resource is to be created Create the to-resource with zero quantity fields Else Get the to-resource based on toResourceInventoriedAs If it exists in the event Get the from-resource based on the resourceInventoriedAs If action is \"transfer-custody\" or \"transfer\" or \"move\" If the from-resource exists Subtract event resourceQuantity from from-resource.onhandQuantity If the to-resource exists Add event resourceQuantity to to-resource.onhandQuantity If action is \"transfer-all-rights\" or \"transfer\" or \"move\" If the from-resource exists Subtract event resourceQuantity from from-resource.accountingQuantity If the to-resource exists Add event resourceQuantity to to-resource.accountingQuantity If a new resource is created by the economic event or if ((action is \"transfer-all-rights\" or \"transfer\") and resourceInventoriedAs is the same as toResourceInventoriedAs) Set the primaryAccountable to the receiver agent If the action.locationEffect is update Set the resource currentLocation to the event toLocation If the action.containedEffect is update Set the resource containedIn to the container resource (see the example at Examples - Production - Pack unpack) Else if the action.containedEffect is remove Set the resource containedIn to null (see the example at Examples - Production - Pack unpack) If a resource is created or updated by the economic event If the state is included in the event Set the resource state to the event state If the event is an output of a process and the process is based on a process specification Set the resource stage to the process specification","title":"Event Resource Logic"},{"location":"specification/event-resource/#event-resource-logic","text":"All economic information in an Economic Resource must be put there by an Economic Event. Non-economic information (note, image, etc.) can be updated on the Economic Resource directly. Economic information is anything that might affect periodic accounting or financial reporting. In this way, there is always an immutable detailed time-based record of information that affected such reporting.","title":"Event Resource Logic"},{"location":"specification/event-resource/#pseudo-code","text":"Here is suggested pseudo-code for an Economic Event creating or affecting an Economic Resource. It is not meant to indicate developers have to use this exact logical structure; it is just one method to communicate the intended logic, which we hope is helpful. It has not been directly translated to code and tested. If action.resourceEffect is \"+\" or \"-\" If a new resource is to be created Create the resource with zero quantity fields Else If it exists Get the resource based on resourceInventoriedAs If there is a resource from the above If action.resourceEffect is \"+\" Add event resourceQuantity to both accountingQuantity and onhandQuantity Else if action.resourceEffect is \"-\" Subtract event resourceQuantity from both accountingQuantity and onhandQuantity Else if action.resourceEffect is \"-+\" or action.onhandEffect is \"-+\" (two resources can be affected) If a new resource is to be created Create the to-resource with zero quantity fields Else Get the to-resource based on toResourceInventoriedAs If it exists in the event Get the from-resource based on the resourceInventoriedAs If action is \"transfer-custody\" or \"transfer\" or \"move\" If the from-resource exists Subtract event resourceQuantity from from-resource.onhandQuantity If the to-resource exists Add event resourceQuantity to to-resource.onhandQuantity If action is \"transfer-all-rights\" or \"transfer\" or \"move\" If the from-resource exists Subtract event resourceQuantity from from-resource.accountingQuantity If the to-resource exists Add event resourceQuantity to to-resource.accountingQuantity If a new resource is created by the economic event or if ((action is \"transfer-all-rights\" or \"transfer\") and resourceInventoriedAs is the same as toResourceInventoriedAs) Set the primaryAccountable to the receiver agent If the action.locationEffect is update Set the resource currentLocation to the event toLocation If the action.containedEffect is update Set the resource containedIn to the container resource (see the example at Examples - Production - Pack unpack) Else if the action.containedEffect is remove Set the resource containedIn to null (see the example at Examples - Production - Pack unpack) If a resource is created or updated by the economic event If the state is included in the event Set the resource state to the event state If the event is an output of a process and the process is based on a process specification Set the resource stage to the process specification","title":"Pseudo-code"},{"location":"specification/external-terms/","text":"External namespaces and terms Most applications using VF will need terms defined in various other vocabularies. In fact, we consider these to be essential to a complete value flows core vocabulary. Below are the elements we are re-using from well established vocabularies (web ontologies). SKOS https://www.w3.org/TR/skos-reference/ skos:note FOAF http://xmlns.com/foaf/spec/ foaf:Agent foaf:Person ORG https://www.w3.org/TR/vocab-org/ org:Organization OM2 http://www.ontology-of-units-of-measure.org/resource/om-2/ om2:Measure om2:hasUnit om2:hasNumericalValue om2:Unit See the page also in this section called Units of Measure. VF will use (at least) rdfs:label and om2:symbol as properties of Unit. DTYPE http://www.linkedmodel.org/schema/dtype# dtype:numericUnion TIME https://www.w3.org/TR/owl-time Some useful constructs, others here: https://www.w3.org/TR/owl-time/#topology, see the Interval Relations. time:inXSDDateTimeStamp time:hasDuration time:before time:after time:intervalDuring vf defines property chain axioms for vf:hasBeginning , vf:hasEnd , and vf:hasPointInTime as slight variant of Alignment of PROV-O with OWL-Time . GEO https://www.w3.org/2003/01/geo/wgs84_pos# geo:lat geo:long geo:alt DFC http://www.virtual-assembly.org/DataFoodConsortium/BusinessOntology# dfc:ProductBatch dfc:batchNumber dfc:expiryDate dfc:productionDate DCTERMS http://purl.org/dc/terms/ dcterms:created","title":"Other Namespaces"},{"location":"specification/external-terms/#external-namespaces-and-terms","text":"Most applications using VF will need terms defined in various other vocabularies. In fact, we consider these to be essential to a complete value flows core vocabulary. Below are the elements we are re-using from well established vocabularies (web ontologies).","title":"External namespaces and terms"},{"location":"specification/external-terms/#skos","text":"https://www.w3.org/TR/skos-reference/ skos:note","title":"SKOS"},{"location":"specification/external-terms/#foaf","text":"http://xmlns.com/foaf/spec/ foaf:Agent foaf:Person","title":"FOAF"},{"location":"specification/external-terms/#org","text":"https://www.w3.org/TR/vocab-org/ org:Organization","title":"ORG"},{"location":"specification/external-terms/#om2","text":"http://www.ontology-of-units-of-measure.org/resource/om-2/ om2:Measure om2:hasUnit om2:hasNumericalValue om2:Unit See the page also in this section called Units of Measure. VF will use (at least) rdfs:label and om2:symbol as properties of Unit.","title":"OM2"},{"location":"specification/external-terms/#dtype","text":"http://www.linkedmodel.org/schema/dtype# dtype:numericUnion","title":"DTYPE"},{"location":"specification/external-terms/#time","text":"https://www.w3.org/TR/owl-time Some useful constructs, others here: https://www.w3.org/TR/owl-time/#topology, see the Interval Relations. time:inXSDDateTimeStamp time:hasDuration time:before time:after time:intervalDuring vf defines property chain axioms for vf:hasBeginning , vf:hasEnd , and vf:hasPointInTime as slight variant of Alignment of PROV-O with OWL-Time .","title":"TIME"},{"location":"specification/external-terms/#geo","text":"https://www.w3.org/2003/01/geo/wgs84_pos# geo:lat geo:long geo:alt","title":"GEO"},{"location":"specification/external-terms/#dfc","text":"http://www.virtual-assembly.org/DataFoodConsortium/BusinessOntology# dfc:ProductBatch dfc:batchNumber dfc:expiryDate dfc:productionDate","title":"DFC"},{"location":"specification/external-terms/#dcterms","text":"http://purl.org/dc/terms/ dcterms:created","title":"DCTERMS"},{"location":"specification/graphql/","text":"Click here for the source GraphQL api for Valueflows. Note : The GraphQL reference includes the complete REA-based core economic vocabulary in a non-rdf format.","title":"GraphQL Reference"},{"location":"specification/inverses/","text":"Query and Filter Naming Introduction Although queries and query filters are not specified in the RDF core, this set of guidelines should be used, to facilitate standard api naming. It is possible that at some point they will be included in the formal VF namespace. This document is not meant to imply that all of these named queries and filters should be implemented in any particular application api. Note: Filters can be applicable to any query that can return more than one of the class. For example all processes, processes in scope of an agent, processes in a plan, could each use the process filters. Status: Not all of these queries and filters are tested, and there will certainly be other useful queries and filters. If anyone has recommended changes or additions, please start an issue or merge request, or just let us know in the Welcome chat (links on the home page). Observation layer Agent (also subclasses Person, Organization) main queries: agent agents myAgent person people organization organizations filters: classifiedAs (Organizations only), withinLocation (some geographic boundary, city, region, etc.) inverse queries: processes (Process.inScopeOf) inventoriedEconomicResources (EconomicResource.primaryAccountable) commitmentsAsProvider (Commitment.provider) commitmentsAsReceiver (Commitment.receiver) commitmentsInScope (Commitment.inScopeOf) economicEventsAsProvider (EconomicEvent.provider) economicEventsAsReceiver (EconomicEvent.receiver) economicEventsInScope (EconomicEvent.inScopeOf) intentsAsProvider (Intent.provider) intentsAsReceiver (Intent.receiver) intentsInScope (Intent.inScopeOf) claimsAsProvider (Claim.provider) claimsAsReceiver (Claim.receiver) claimsInScope (Claim.inScopeOf) proposalsInScope (Proposal.inScopeOf) scenariosInScope (Scenario.inScopeOf) relationshipsAsSubject (Relationship.subject) relationshipsAsObject (Relationship.object) other queries: plans (if there is any Process.inScopeOf in the Plan) economicEvents (EconomicEvent.provider or .receiver or .inScopeOf) commitments (Commitment.provider or .receiver or .inScopeOf) intents (Intent.provider or .receiver or .inScopeOf) claims (Claim.provider or .receiver or .inScopeOf) proposals (Proposal.inScopeOf, or a related Intent.provider or Intent.receiver) proposalsTo (Proposals.proposed where ProposedTo.proposedTo is the Agent) relationships (Relationship.object or .subject or .inScopeOf) roles (AgentRelationshipRoles that are AgentRelationship.relationship where the .subject or .object or .inScopeOf is the Agent) AgentRelationship main queries: agentRelationship agentRelationships filters: subject, object, role, inScopeOf Process main queries: process processes filters: searchString, finished, classifiedAs, inScopeOf, startDate, endDate (include any process that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end) inverse queries: observedInputs (EconomicEvent.inputOf) observedOutputs (EconomicEvent.outputOf) committedInputs (Commitment.inputOf) committedOutputs (Commitment.outputOf) intendedInputs (Intent.inputOf) intendedOutputs (Intent.outputOf) other queries: economicEvents (EconomicEvent.inputOf or .outputOf) commitments (Commitment.inputOf or .outputOf) intents (Intent.inputOf or .outputOf) inputs (EconomicEvent or Commitment or Intent .inputOf) outputs (EconomicEvent or Commitment or Intent .outputOf) unplannedEconomicEvents (any EconomicEvent.inputOf or .outputOf that don't fulfill a Commitment) unplannedInputs (any EconomicEvent.inputOf that doesn't fulfill a Commitment) unplannedOutputs (any EconomicEvent.outputOf that doesn't fulfill a Commitment) involvedAgents (any .provider or .receivers or .inScopeOf on Commitments or EconomicEvents or Intents, and self.inScopeOf) workingAgents (any EconomicEvent.provider on an input EconomicEvent with action equal to work) nextProcesses (Processes where .inputOf references the same .resourceInventoriedAs as self.outputOf references) previousProcesses (Processes where .outputOf references the same .resourceInventoriedAs as self.inputOf references) previous (EconomicEvent.inputOf, same as observedInputs) next (EconomicEvent.outputOf, same as observedOutputs) EconomicEvent main queries: economicEvent economicEvents filters: searchString, action, provider, receiver, resourceClassifiedAs, startDate, endDate (include any EconomicEvent that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end) inverse queries: settles (Settlement.settledBy) fulfills (Fulfillment.fulfilledBy) satisfies (Satisfaction.satisfiedBy) appreciationOf (Appreciation.appreciationWith) appreciationWith (Appreciation.appreciationOf) triggers (EconomicEvent.triggeredBy) other queries: reciprocalEvents (EconomicEvents.realizationOf the same Agreement with opposite provider, receiver) previous (Process, EconomicEvent, EconomicResource, see Track and Trace for logic) next (Process, EconomicEvent, EconomicResource, see Track and Trace for logic) trace (ordered incoming value flows, see Track and Trace for logic) track (ordered outgoing value flows, see Track and Trace for logic) EconomicResource main queries: economicResource economicResources filters: searchString, accountableAgent, currentLocation, withinLocation (some geographic boundary, city, region, etc.), excludeZeroQuantities (boolean), classifiedAs, state, trackingIdentifier inverse queries: contains (EconomicResource.containedIn) intents (Intent.resourceInventoriedAs) commitments (Commitment.resourceInventoriedAs) economicEventsInOutFrom (All economic events with the economic resource in the EconomicEvent.resourceInventoriedAs, which includes all process related events, the provider resource in transfers/moves, and raise/lower) economicEventsTo (All economic events with the economic Resource in the EconomicEvent.toResourceInventoriedAs, which is the receiver resource in transfers and moves) other queries: economicEvents (either EconomicEvent.resourceInventoriedAs or .toResourceInventoriedAs) previous (EconomicEvent, see Track and Trace for logic) next (EconomicEvent, see Track and Trace for logic) trace (ordered incoming value flows, see Track and Trace for logic) track (ordered outgoing value flows, see Track and Trace for logic) Fulfillment main queries: fulfillment fulfillments Appreciation main queries: appreciation appreciations Plan layer Proposal main queries: proposal proposals offers (Proposals where a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .provider) requests (Proposals where a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .receiver) filters: inScopeOf, withinLocation (the proposed intents are withinLocation), active (boolean, the current date is within the hasBeginning and hasEnd, inclusive), isOffer (boolean, the non-reciprocal intents have provider), isRequest (boolean, the non-reciprocal intents have receiver) inverse queries: publishes (ProposedIntent.publishedIn) proposedTo (ProposedTo.proposed) other queries: isOffer (boolean, true if a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .provider) isRequest (boolean, true if a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .receiver) primaryIntents (.publishes Intents where the self.publishedIn ProposedIntent.reciprocal is false) reciprocalIntents (.publishes Intents where the self.publishedIn ProposedIntent.reciprocal is true) Intent main queries: intent intents filters: searchString, action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate, inScopeOf, withinLocation (some geographic boundary, city, region, etc.) inverse queries: publishedIn (ProposedIntent.publishes) satisfiedBy (Satisfaction.satisfies) (probably some location based queries, TBD) ProposedIntent filters: reciprocal main queries: proposedIntent proposedIntents Agreement main queries: agreement agreements inverse queries: commitments (Commitment.clauseOf) unplannedEconomicEvents (EconomicEvent.realizationOf) other queries: involvedAgents (any .provider, .receiver, .inScopeOf on commitments or economicEvents) economicEvents (EconomicEvent.realizationOf, and any EconomicEvents that fulfill Commitments that are .clauseOf the Agreement) Commitment main queries: commitment commitments filters: searchString, action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate (include any Commitment that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end), withinLocation (some geographic boundary, city, region, etc.) inverse queries: fulfilledBy: (Fulfillment.fulfills) satisfies (Satisfaction.satisfiedBy) other queries: involvedAgents (Commitment.provider, .receiver, .inScopeOf if agent) (possibly some location based queries, TBD) Satisfaction main queries: satisfaction satisfactions Claim main queries: claim claims filters: action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate (include any Claim where due overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end) inverse queries: settledBy (Settlement.settles) Settlement main queries: settlement settlements Plan main queries: plan plans filters: searchString, finished (true means all the processes that are part of the Plan are finished), TBD possibly some date related logic inverse queries: processes (Process.plannedWithin) nonProcessCommitments (Commitment.plannedWithin) independentDemands (Commitment.independentDemandOf) other queries: inScopeOf (all the .plannedWithin Process.inScopeOf) involvedAgents (all the .plannedWithin Process.involvedAgents) startDate (earliest .plannedWithin Process.hasBeginning) endDate (latest .plannedWithin Process.hasEnd) finished (all the .plannedWithin Process.finished are true) Scenario main queries: scenario scenarios filters: searchString, (TBD date logic) inverse queries: plans (Plan.refinementOf) refinements (Scenario.refinementOf)) processes (Process.nestedIn) startDate TBD endDate TBD Knowledge layer ResourceSpecification main queries: resourceSpecification resourceSpecifications filters: searchString, resourceClassifiedAs inverse queries: conformingResources (EconomicResource.conformsTo) economicEvents (EconomicEvent.resourceConformsTo) commitments (Commitment.resourceConformsTo) intents (Intent.resourceConformsTo) claims (Claim.resourceConformsTo) recipes TBD ProcessSpecification main queries: processSpecification processSpecifications inverse queries: conformingProcesses (Process.basedOn) conformingRecipeProcesses (RecipeProcess.processConformsTo) commitmentsRequiringStage (Commitment.stage) resourcesCurrentlyAtStage (EconomicResource.stage) recipeFlowsRequiringStage (RecipeFlow.stage) RecipeResource main queries: recipeResource recipeResources TBD RecipeFlow main queries: recipeFlow reciprFlows TBD RecipeExchange main queries: recipeExchange recipeExchanges TBD RecipeProcess main queries: recipeProcess recipeProcesses TBD ScenarioDefinition main queries: scenarioDefinition scenarioDefinitions inverse queries: scenarios (Scenario.definedAs) Action main queries: action actions AgentRelationshipRole main queries: agentRelationshipRole agentRelationshipRoles inverse queries: agentRelationships (AgentRelationship.relationship) RoleBehavior main queries: roleBehavior roleBehaviors inverse Queries: agentRelationshipRoles (agentRelationshipRole.roleBehavior)","title":"Query Naming"},{"location":"specification/inverses/#query-and-filter-naming","text":"","title":"Query and Filter Naming"},{"location":"specification/inverses/#introduction","text":"Although queries and query filters are not specified in the RDF core, this set of guidelines should be used, to facilitate standard api naming. It is possible that at some point they will be included in the formal VF namespace. This document is not meant to imply that all of these named queries and filters should be implemented in any particular application api. Note: Filters can be applicable to any query that can return more than one of the class. For example all processes, processes in scope of an agent, processes in a plan, could each use the process filters. Status: Not all of these queries and filters are tested, and there will certainly be other useful queries and filters. If anyone has recommended changes or additions, please start an issue or merge request, or just let us know in the Welcome chat (links on the home page).","title":"Introduction"},{"location":"specification/inverses/#observation-layer","text":"","title":"Observation layer"},{"location":"specification/inverses/#agent-also-subclasses-person-organization","text":"main queries: agent agents myAgent person people organization organizations filters: classifiedAs (Organizations only), withinLocation (some geographic boundary, city, region, etc.) inverse queries: processes (Process.inScopeOf) inventoriedEconomicResources (EconomicResource.primaryAccountable) commitmentsAsProvider (Commitment.provider) commitmentsAsReceiver (Commitment.receiver) commitmentsInScope (Commitment.inScopeOf) economicEventsAsProvider (EconomicEvent.provider) economicEventsAsReceiver (EconomicEvent.receiver) economicEventsInScope (EconomicEvent.inScopeOf) intentsAsProvider (Intent.provider) intentsAsReceiver (Intent.receiver) intentsInScope (Intent.inScopeOf) claimsAsProvider (Claim.provider) claimsAsReceiver (Claim.receiver) claimsInScope (Claim.inScopeOf) proposalsInScope (Proposal.inScopeOf) scenariosInScope (Scenario.inScopeOf) relationshipsAsSubject (Relationship.subject) relationshipsAsObject (Relationship.object) other queries: plans (if there is any Process.inScopeOf in the Plan) economicEvents (EconomicEvent.provider or .receiver or .inScopeOf) commitments (Commitment.provider or .receiver or .inScopeOf) intents (Intent.provider or .receiver or .inScopeOf) claims (Claim.provider or .receiver or .inScopeOf) proposals (Proposal.inScopeOf, or a related Intent.provider or Intent.receiver) proposalsTo (Proposals.proposed where ProposedTo.proposedTo is the Agent) relationships (Relationship.object or .subject or .inScopeOf) roles (AgentRelationshipRoles that are AgentRelationship.relationship where the .subject or .object or .inScopeOf is the Agent)","title":"Agent (also subclasses Person, Organization)"},{"location":"specification/inverses/#agentrelationship","text":"main queries: agentRelationship agentRelationships filters: subject, object, role, inScopeOf","title":"AgentRelationship"},{"location":"specification/inverses/#process","text":"main queries: process processes filters: searchString, finished, classifiedAs, inScopeOf, startDate, endDate (include any process that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end) inverse queries: observedInputs (EconomicEvent.inputOf) observedOutputs (EconomicEvent.outputOf) committedInputs (Commitment.inputOf) committedOutputs (Commitment.outputOf) intendedInputs (Intent.inputOf) intendedOutputs (Intent.outputOf) other queries: economicEvents (EconomicEvent.inputOf or .outputOf) commitments (Commitment.inputOf or .outputOf) intents (Intent.inputOf or .outputOf) inputs (EconomicEvent or Commitment or Intent .inputOf) outputs (EconomicEvent or Commitment or Intent .outputOf) unplannedEconomicEvents (any EconomicEvent.inputOf or .outputOf that don't fulfill a Commitment) unplannedInputs (any EconomicEvent.inputOf that doesn't fulfill a Commitment) unplannedOutputs (any EconomicEvent.outputOf that doesn't fulfill a Commitment) involvedAgents (any .provider or .receivers or .inScopeOf on Commitments or EconomicEvents or Intents, and self.inScopeOf) workingAgents (any EconomicEvent.provider on an input EconomicEvent with action equal to work) nextProcesses (Processes where .inputOf references the same .resourceInventoriedAs as self.outputOf references) previousProcesses (Processes where .outputOf references the same .resourceInventoriedAs as self.inputOf references) previous (EconomicEvent.inputOf, same as observedInputs) next (EconomicEvent.outputOf, same as observedOutputs)","title":"Process"},{"location":"specification/inverses/#economicevent","text":"main queries: economicEvent economicEvents filters: searchString, action, provider, receiver, resourceClassifiedAs, startDate, endDate (include any EconomicEvent that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end) inverse queries: settles (Settlement.settledBy) fulfills (Fulfillment.fulfilledBy) satisfies (Satisfaction.satisfiedBy) appreciationOf (Appreciation.appreciationWith) appreciationWith (Appreciation.appreciationOf) triggers (EconomicEvent.triggeredBy) other queries: reciprocalEvents (EconomicEvents.realizationOf the same Agreement with opposite provider, receiver) previous (Process, EconomicEvent, EconomicResource, see Track and Trace for logic) next (Process, EconomicEvent, EconomicResource, see Track and Trace for logic) trace (ordered incoming value flows, see Track and Trace for logic) track (ordered outgoing value flows, see Track and Trace for logic)","title":"EconomicEvent"},{"location":"specification/inverses/#economicresource","text":"main queries: economicResource economicResources filters: searchString, accountableAgent, currentLocation, withinLocation (some geographic boundary, city, region, etc.), excludeZeroQuantities (boolean), classifiedAs, state, trackingIdentifier inverse queries: contains (EconomicResource.containedIn) intents (Intent.resourceInventoriedAs) commitments (Commitment.resourceInventoriedAs) economicEventsInOutFrom (All economic events with the economic resource in the EconomicEvent.resourceInventoriedAs, which includes all process related events, the provider resource in transfers/moves, and raise/lower) economicEventsTo (All economic events with the economic Resource in the EconomicEvent.toResourceInventoriedAs, which is the receiver resource in transfers and moves) other queries: economicEvents (either EconomicEvent.resourceInventoriedAs or .toResourceInventoriedAs) previous (EconomicEvent, see Track and Trace for logic) next (EconomicEvent, see Track and Trace for logic) trace (ordered incoming value flows, see Track and Trace for logic) track (ordered outgoing value flows, see Track and Trace for logic)","title":"EconomicResource"},{"location":"specification/inverses/#fulfillment","text":"main queries: fulfillment fulfillments","title":"Fulfillment"},{"location":"specification/inverses/#appreciation","text":"main queries: appreciation appreciations","title":"Appreciation"},{"location":"specification/inverses/#plan-layer","text":"","title":"Plan layer"},{"location":"specification/inverses/#proposal","text":"main queries: proposal proposals offers (Proposals where a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .provider) requests (Proposals where a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .receiver) filters: inScopeOf, withinLocation (the proposed intents are withinLocation), active (boolean, the current date is within the hasBeginning and hasEnd, inclusive), isOffer (boolean, the non-reciprocal intents have provider), isRequest (boolean, the non-reciprocal intents have receiver) inverse queries: publishes (ProposedIntent.publishedIn) proposedTo (ProposedTo.proposed) other queries: isOffer (boolean, true if a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .provider) isRequest (boolean, true if a .publishedIn ProposedIntent.reciprocal is false and the ProposedIntent.publishes Intent has a .receiver) primaryIntents (.publishes Intents where the self.publishedIn ProposedIntent.reciprocal is false) reciprocalIntents (.publishes Intents where the self.publishedIn ProposedIntent.reciprocal is true)","title":"Proposal"},{"location":"specification/inverses/#intent","text":"main queries: intent intents filters: searchString, action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate, inScopeOf, withinLocation (some geographic boundary, city, region, etc.) inverse queries: publishedIn (ProposedIntent.publishes) satisfiedBy (Satisfaction.satisfies) (probably some location based queries, TBD)","title":"Intent"},{"location":"specification/inverses/#proposedintent","text":"filters: reciprocal main queries: proposedIntent proposedIntents","title":"ProposedIntent"},{"location":"specification/inverses/#agreement","text":"main queries: agreement agreements inverse queries: commitments (Commitment.clauseOf) unplannedEconomicEvents (EconomicEvent.realizationOf) other queries: involvedAgents (any .provider, .receiver, .inScopeOf on commitments or economicEvents) economicEvents (EconomicEvent.realizationOf, and any EconomicEvents that fulfill Commitments that are .clauseOf the Agreement)","title":"Agreement"},{"location":"specification/inverses/#commitment","text":"main queries: commitment commitments filters: searchString, action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate (include any Commitment that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end), withinLocation (some geographic boundary, city, region, etc.) inverse queries: fulfilledBy: (Fulfillment.fulfills) satisfies (Satisfaction.satisfiedBy) other queries: involvedAgents (Commitment.provider, .receiver, .inScopeOf if agent) (possibly some location based queries, TBD)","title":"Commitment"},{"location":"specification/inverses/#satisfaction","text":"main queries: satisfaction satisfactions","title":"Satisfaction"},{"location":"specification/inverses/#claim","text":"main queries: claim claims filters: action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate (include any Claim where due overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end) inverse queries: settledBy (Settlement.settles)","title":"Claim"},{"location":"specification/inverses/#settlement","text":"main queries: settlement settlements","title":"Settlement"},{"location":"specification/inverses/#plan","text":"main queries: plan plans filters: searchString, finished (true means all the processes that are part of the Plan are finished), TBD possibly some date related logic inverse queries: processes (Process.plannedWithin) nonProcessCommitments (Commitment.plannedWithin) independentDemands (Commitment.independentDemandOf) other queries: inScopeOf (all the .plannedWithin Process.inScopeOf) involvedAgents (all the .plannedWithin Process.involvedAgents) startDate (earliest .plannedWithin Process.hasBeginning) endDate (latest .plannedWithin Process.hasEnd) finished (all the .plannedWithin Process.finished are true)","title":"Plan"},{"location":"specification/inverses/#scenario","text":"main queries: scenario scenarios filters: searchString, (TBD date logic) inverse queries: plans (Plan.refinementOf) refinements (Scenario.refinementOf)) processes (Process.nestedIn) startDate TBD endDate TBD","title":"Scenario"},{"location":"specification/inverses/#knowledge-layer","text":"","title":"Knowledge layer"},{"location":"specification/inverses/#resourcespecification","text":"main queries: resourceSpecification resourceSpecifications filters: searchString, resourceClassifiedAs inverse queries: conformingResources (EconomicResource.conformsTo) economicEvents (EconomicEvent.resourceConformsTo) commitments (Commitment.resourceConformsTo) intents (Intent.resourceConformsTo) claims (Claim.resourceConformsTo) recipes TBD","title":"ResourceSpecification"},{"location":"specification/inverses/#processspecification","text":"main queries: processSpecification processSpecifications inverse queries: conformingProcesses (Process.basedOn) conformingRecipeProcesses (RecipeProcess.processConformsTo) commitmentsRequiringStage (Commitment.stage) resourcesCurrentlyAtStage (EconomicResource.stage) recipeFlowsRequiringStage (RecipeFlow.stage)","title":"ProcessSpecification"},{"location":"specification/inverses/#reciperesource","text":"main queries: recipeResource recipeResources TBD","title":"RecipeResource"},{"location":"specification/inverses/#recipeflow","text":"main queries: recipeFlow reciprFlows TBD","title":"RecipeFlow"},{"location":"specification/inverses/#recipeexchange","text":"main queries: recipeExchange recipeExchanges TBD","title":"RecipeExchange"},{"location":"specification/inverses/#recipeprocess","text":"main queries: recipeProcess recipeProcesses TBD","title":"RecipeProcess"},{"location":"specification/inverses/#scenariodefinition","text":"main queries: scenarioDefinition scenarioDefinitions inverse queries: scenarios (Scenario.definedAs)","title":"ScenarioDefinition"},{"location":"specification/inverses/#action","text":"main queries: action actions","title":"Action"},{"location":"specification/inverses/#agentrelationshiprole","text":"main queries: agentRelationshipRole agentRelationshipRoles inverse queries: agentRelationships (AgentRelationship.relationship)","title":"AgentRelationshipRole"},{"location":"specification/inverses/#rolebehavior","text":"main queries: roleBehavior roleBehaviors inverse Queries: agentRelationshipRoles (agentRelationshipRole.roleBehavior)","title":"RoleBehavior"},{"location":"specification/uml/","text":"This UML diagram includes all elements necessary for a complete REA-based core economic vocabulary, so includes elements that we re-use from other vocabularies. All namespaces are documented by the prefix to each element. To make the diagram bigger, you can right click and select 'View Image' or 'Open Image in New Tab' or a similar command in your browser.","title":"Complete Diagram"},{"location":"specification/units/","text":"Units of Measure Valueflows uses the units of measure from OM2 , listed in the Other Namespaces page in this section. Using agreed upon standard units will facilitate network interoperability into the future. As of now, a file of units has been extracted to make it easier for user groups to choose their set of standard units. The complete rdf reference for OM2 can be found here . A csv file derived from that can be found here . This file includes units from OM2 as of 2022/06. It includes only the English version for now. The currencies have been removed, since we recommend these be set up as Resource Specifications instead, semantically, and specifically given the proliferation of alternate currencies. We have added classifications (partially complete) to facilitate search for needed units. The columns in this file are, left to right: OM2 owl Class. When a Unit belonged to multiple classes, those were consolidated to one row, under \"Unit\". Identifier in OM2. These can be prefixed with \"http://www.ontology-of-units-of-measure.org/resource/om-2/\" for direct access. Label from OM2 for the unit, to be used in Valueflows. Symbol from OM2 for the unit, to be used in Valueflows. Description from OM2. Classification(s), added by us (not from OM), to facilitate search in the csv file, or ifn an application (if one is created) for groups to choose their units. This column is incomplete, possibly not the best granularity, and in some places possibly wrong. Updates are welcome! A special note on the unit one . This indicates a generic one dimensional unit from the scientific perspective, which in business is often called \"each\", \"pieces\", \"count\", or similar. OM2 does have a unit called piece , which can be used instead of one if desired for user clarity; or the user interface could leave off the label if it is \"one\". See this directory for other potentially useful artifacts.","title":"Units of Measure"},{"location":"specification/units/#units-of-measure","text":"Valueflows uses the units of measure from OM2 , listed in the Other Namespaces page in this section. Using agreed upon standard units will facilitate network interoperability into the future. As of now, a file of units has been extracted to make it easier for user groups to choose their set of standard units. The complete rdf reference for OM2 can be found here . A csv file derived from that can be found here . This file includes units from OM2 as of 2022/06. It includes only the English version for now. The currencies have been removed, since we recommend these be set up as Resource Specifications instead, semantically, and specifically given the proliferation of alternate currencies. We have added classifications (partially complete) to facilitate search for needed units. The columns in this file are, left to right: OM2 owl Class. When a Unit belonged to multiple classes, those were consolidated to one row, under \"Unit\". Identifier in OM2. These can be prefixed with \"http://www.ontology-of-units-of-measure.org/resource/om-2/\" for direct access. Label from OM2 for the unit, to be used in Valueflows. Symbol from OM2 for the unit, to be used in Valueflows. Description from OM2. Classification(s), added by us (not from OM), to facilitate search in the csv file, or ifn an application (if one is created) for groups to choose their units. This column is incomplete, possibly not the best granularity, and in some places possibly wrong. Updates are welcome! A special note on the unit one . This indicates a generic one dimensional unit from the scientific perspective, which in business is often called \"each\", \"pieces\", \"count\", or similar. OM2 does have a unit called piece , which can be used instead of one if desired for user clarity; or the user interface could leave off the label if it is \"one\". See this directory for other potentially useful artifacts.","title":"Units of Measure"},{"location":"specification/vfspec/","text":"Read further for: a web-based formatted view ( alternative ) of the Valueflows class and property definitions. a web view of the source \"system of record\" turtle (ttl) file ( download ) for all Valueflows class and property definitions. Note : Because of the way the semantic web works, both of these represent only the Valueflows namespace. See Other Namespaces for details on the non-Valueflows namespace elements. For complete representations for what is needed for a Valueflows based core economic vocabulary, see Complete Diagram or GraphQL Reference .","title":"VF Specification"}]}